// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Ml.PutTrainedModel
{
	[ConvertAs(typeof(AggregateOutput))]
	public partial interface IAggregateOutput
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? Exponent { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? LogisticRegression { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? WeightedMode { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? WeightedSum { get; set; }
	}

	public partial class AggregateOutputDescriptor : DescriptorBase<AggregateOutputDescriptor, IAggregateOutput>, IAggregateOutput
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? IAggregateOutput.LogisticRegression { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? IAggregateOutput.WeightedSum { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? IAggregateOutput.WeightedMode { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? IAggregateOutput.Exponent { get; set; }
	}

	public partial class AggregateOutput : IAggregateOutput
	{
		[JsonInclude]
		[JsonPropertyName("exponent")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? Exponent { get; set; }

		[JsonInclude]
		[JsonPropertyName("logistic_regression")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? LogisticRegression { get; set; }

		[JsonInclude]
		[JsonPropertyName("weighted_mode")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? WeightedMode { get; set; }

		[JsonInclude]
		[JsonPropertyName("weighted_sum")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IWeights? WeightedSum { get; set; }
	}

	[ConvertAs(typeof(Definition))]
	public partial interface IDefinition
	{
		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.Preprocessor>? Preprocessors { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel TrainedModel { get; set; }
	}

	public partial class DefinitionDescriptor : DescriptorBase<DefinitionDescriptor, IDefinition>, IDefinition
	{
		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.Preprocessor>? IDefinition.Preprocessors { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel IDefinition.TrainedModel { get; set; }
	}

	public partial class Definition : IDefinition
	{
		[JsonInclude]
		[JsonPropertyName("preprocessors")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.Preprocessor>? Preprocessors { get; set; }

		[JsonInclude]
		[JsonPropertyName("trained_model")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel TrainedModel { get; set; }
	}

	[ConvertAs(typeof(Ensemble))]
	public partial interface IEnsemble
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IAggregateOutput? AggregateOutput { get; set; }

		IEnumerable<string>? ClassificationLabels { get; set; }

		IEnumerable<string>? FeatureNames { get; set; }

		string? TargetType { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel> TrainedModels { get; set; }
	}

	public partial class EnsembleDescriptor : DescriptorBase<EnsembleDescriptor, IEnsemble>, IEnsemble
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IAggregateOutput? IEnsemble.AggregateOutput { get; set; }

		IEnumerable<string>? IEnsemble.ClassificationLabels { get; set; }

		IEnumerable<string>? IEnsemble.FeatureNames { get; set; }

		string? IEnsemble.TargetType { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel> IEnsemble.TrainedModels { get; set; }
	}

	public partial class Ensemble : IEnsemble
	{
		[JsonInclude]
		[JsonPropertyName("aggregate_output")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IAggregateOutput? AggregateOutput { get; set; }

		[JsonInclude]
		[JsonPropertyName("classification_labels")]
		public IEnumerable<string>? ClassificationLabels { get; set; }

		[JsonInclude]
		[JsonPropertyName("feature_names")]
		public IEnumerable<string>? FeatureNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("target_type")]
		public string? TargetType { get; set; }

		[JsonInclude]
		[JsonPropertyName("trained_models")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModel> TrainedModels { get; set; }
	}

	[ConvertAs(typeof(FrequencyEncodingPreprocessor))]
	public partial interface IFrequencyEncodingPreprocessor
	{
		string FeatureName { get; set; }

		string Field { get; set; }

		Dictionary<string, double> FrequencyMap { get; set; }
	}

	public partial class FrequencyEncodingPreprocessorDescriptor : DescriptorBase<FrequencyEncodingPreprocessorDescriptor, IFrequencyEncodingPreprocessor>, IFrequencyEncodingPreprocessor
	{
		string IFrequencyEncodingPreprocessor.Field { get; set; }

		string IFrequencyEncodingPreprocessor.FeatureName { get; set; }

		Dictionary<string, double> IFrequencyEncodingPreprocessor.FrequencyMap { get; set; }
	}

	public partial class FrequencyEncodingPreprocessor : IFrequencyEncodingPreprocessor
	{
		[JsonInclude]
		[JsonPropertyName("feature_name")]
		public string FeatureName { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("frequency_map")]
		public Dictionary<string, double> FrequencyMap { get; set; }
	}

	[ConvertAs(typeof(Input))]
	public partial interface IInput
	{
		Elastic.Clients.Elasticsearch.Names FieldNames { get; set; }
	}

	public partial class InputDescriptor : DescriptorBase<InputDescriptor, IInput>, IInput
	{
		Elastic.Clients.Elasticsearch.Names IInput.FieldNames { get; set; }
	}

	public partial class Input : IInput
	{
		[JsonInclude]
		[JsonPropertyName("field_names")]
		public Elastic.Clients.Elasticsearch.Names FieldNames { get; set; }
	}

	[ConvertAs(typeof(OneHotEncodingPreprocessor))]
	public partial interface IOneHotEncodingPreprocessor
	{
		string Field { get; set; }

		Dictionary<string, string> HotMap { get; set; }
	}

	public partial class OneHotEncodingPreprocessorDescriptor : DescriptorBase<OneHotEncodingPreprocessorDescriptor, IOneHotEncodingPreprocessor>, IOneHotEncodingPreprocessor
	{
		string IOneHotEncodingPreprocessor.Field { get; set; }

		Dictionary<string, string> IOneHotEncodingPreprocessor.HotMap { get; set; }
	}

	public partial class OneHotEncodingPreprocessor : IOneHotEncodingPreprocessor
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("hot_map")]
		public Dictionary<string, string> HotMap { get; set; }
	}

	[ConvertAs(typeof(TargetMeanEncodingPreprocessor))]
	public partial interface ITargetMeanEncodingPreprocessor
	{
		double DefaultValue { get; set; }

		string FeatureName { get; set; }

		string Field { get; set; }

		Dictionary<string, double> TargetMap { get; set; }
	}

	public partial class TargetMeanEncodingPreprocessorDescriptor : DescriptorBase<TargetMeanEncodingPreprocessorDescriptor, ITargetMeanEncodingPreprocessor>, ITargetMeanEncodingPreprocessor
	{
		string ITargetMeanEncodingPreprocessor.Field { get; set; }

		string ITargetMeanEncodingPreprocessor.FeatureName { get; set; }

		Dictionary<string, double> ITargetMeanEncodingPreprocessor.TargetMap { get; set; }

		double ITargetMeanEncodingPreprocessor.DefaultValue { get; set; }
	}

	public partial class TargetMeanEncodingPreprocessor : ITargetMeanEncodingPreprocessor
	{
		[JsonInclude]
		[JsonPropertyName("default_value")]
		public double DefaultValue { get; set; }

		[JsonInclude]
		[JsonPropertyName("feature_name")]
		public string FeatureName { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public string Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("target_map")]
		public Dictionary<string, double> TargetMap { get; set; }
	}

	[ConvertAs(typeof(TrainedModel))]
	public partial interface ITrainedModel
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IEnsemble? Ensemble { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTree? Tree { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode? TreeNode { get; set; }
	}

	public partial class TrainedModelDescriptor : DescriptorBase<TrainedModelDescriptor, ITrainedModel>, ITrainedModel
	{
		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTree? ITrainedModel.Tree { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode? ITrainedModel.TreeNode { get; set; }

		Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IEnsemble? ITrainedModel.Ensemble { get; set; }
	}

	public partial class TrainedModel : ITrainedModel
	{
		[JsonInclude]
		[JsonPropertyName("ensemble")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.IEnsemble? Ensemble { get; set; }

		[JsonInclude]
		[JsonPropertyName("tree")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTree? Tree { get; set; }

		[JsonInclude]
		[JsonPropertyName("tree_node")]
		public Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode? TreeNode { get; set; }
	}

	[ConvertAs(typeof(TrainedModelTree))]
	public partial interface ITrainedModelTree
	{
		IEnumerable<string>? ClassificationLabels { get; set; }

		IEnumerable<string> FeatureNames { get; set; }

		string? TargetType { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode> TreeStructure { get; set; }
	}

	public partial class TrainedModelTreeDescriptor : DescriptorBase<TrainedModelTreeDescriptor, ITrainedModelTree>, ITrainedModelTree
	{
		IEnumerable<string>? ITrainedModelTree.ClassificationLabels { get; set; }

		IEnumerable<string> ITrainedModelTree.FeatureNames { get; set; }

		string? ITrainedModelTree.TargetType { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode> ITrainedModelTree.TreeStructure { get; set; }
	}

	public partial class TrainedModelTree : ITrainedModelTree
	{
		[JsonInclude]
		[JsonPropertyName("classification_labels")]
		public IEnumerable<string>? ClassificationLabels { get; set; }

		[JsonInclude]
		[JsonPropertyName("feature_names")]
		public IEnumerable<string> FeatureNames { get; set; }

		[JsonInclude]
		[JsonPropertyName("target_type")]
		public string? TargetType { get; set; }

		[JsonInclude]
		[JsonPropertyName("tree_structure")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Ml.PutTrainedModel.ITrainedModelTreeNode> TreeStructure { get; set; }
	}

	[ConvertAs(typeof(TrainedModelTreeNode))]
	public partial interface ITrainedModelTreeNode
	{
		string? DecisionType { get; set; }

		bool? DefaultLeft { get; set; }

		double? LeafValue { get; set; }

		int? LeftChild { get; set; }

		int NodeIndex { get; set; }

		int? RightChild { get; set; }

		int? SplitFeature { get; set; }

		int? SplitGain { get; set; }

		double? Threshold { get; set; }
	}

	public partial class TrainedModelTreeNodeDescriptor : DescriptorBase<TrainedModelTreeNodeDescriptor, ITrainedModelTreeNode>, ITrainedModelTreeNode
	{
		string? ITrainedModelTreeNode.DecisionType { get; set; }

		bool? ITrainedModelTreeNode.DefaultLeft { get; set; }

		double? ITrainedModelTreeNode.LeafValue { get; set; }

		int? ITrainedModelTreeNode.LeftChild { get; set; }

		int ITrainedModelTreeNode.NodeIndex { get; set; }

		int? ITrainedModelTreeNode.RightChild { get; set; }

		int? ITrainedModelTreeNode.SplitFeature { get; set; }

		int? ITrainedModelTreeNode.SplitGain { get; set; }

		double? ITrainedModelTreeNode.Threshold { get; set; }
	}

	public partial class TrainedModelTreeNode : ITrainedModelTreeNode
	{
		[JsonInclude]
		[JsonPropertyName("decision_type")]
		public string? DecisionType { get; set; }

		[JsonInclude]
		[JsonPropertyName("default_left")]
		public bool? DefaultLeft { get; set; }

		[JsonInclude]
		[JsonPropertyName("leaf_value")]
		public double? LeafValue { get; set; }

		[JsonInclude]
		[JsonPropertyName("left_child")]
		public int? LeftChild { get; set; }

		[JsonInclude]
		[JsonPropertyName("node_index")]
		public int NodeIndex { get; set; }

		[JsonInclude]
		[JsonPropertyName("right_child")]
		public int? RightChild { get; set; }

		[JsonInclude]
		[JsonPropertyName("split_feature")]
		public int? SplitFeature { get; set; }

		[JsonInclude]
		[JsonPropertyName("split_gain")]
		public int? SplitGain { get; set; }

		[JsonInclude]
		[JsonPropertyName("threshold")]
		public double? Threshold { get; set; }
	}

	[ConvertAs(typeof(Weights))]
	public partial interface IWeights
	{
	}

	public partial class WeightsDescriptor : DescriptorBase<WeightsDescriptor, IWeights>, IWeights
	{
		double IWeights.Weights { get; set; }
	}

	public partial class Weights : IWeights
	{
	}
}