// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Graph
{
	public partial class Connection
	{
		[JsonInclude]
		[JsonPropertyName("doc_count")]
		public long DocCount
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("source")]
		public long Source
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("target")]
		public long Target
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("weight")]
		public double Weight
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(ExploreControls))]
	public partial interface IExploreControls
	{
		Elastic.Clients.Elasticsearch.Graph.ISampleDiversity? SampleDiversity { get; set; }

		int? SampleSize { get; set; }

		Elastic.Clients.Elasticsearch.Time? Timeout { get; set; }

		bool UseSignificance { get; set; }
	}

	public partial class ExploreControlsDescriptor : DescriptorBase<ExploreControlsDescriptor, IExploreControls>, IExploreControls
	{
		Elastic.Clients.Elasticsearch.Graph.ISampleDiversity? IExploreControls.SampleDiversity { get; set; }

		int? IExploreControls.SampleSize { get; set; }

		Elastic.Clients.Elasticsearch.Time? IExploreControls.Timeout { get; set; }

		bool IExploreControls.UseSignificance { get; set; }
	}

	public partial class ExploreControls : IExploreControls
	{
		[JsonInclude]
		[JsonPropertyName("sample_diversity")]
		public Elastic.Clients.Elasticsearch.Graph.ISampleDiversity? SampleDiversity { get; set; }

		[JsonInclude]
		[JsonPropertyName("sample_size")]
		public int? SampleSize { get; set; }

		[JsonInclude]
		[JsonPropertyName("timeout")]
		public Elastic.Clients.Elasticsearch.Time? Timeout { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_significance")]
		public bool UseSignificance { get; set; }
	}

	[ConvertAs(typeof(Hop))]
	public partial interface IHop
	{
		Elastic.Clients.Elasticsearch.Graph.IHop? Connections { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer Query { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexDefinition> Vertices { get; set; }
	}

	public partial class HopDescriptor : DescriptorBase<HopDescriptor, IHop>, IHop
	{
		Elastic.Clients.Elasticsearch.Graph.IHop? IHop.Connections { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer IHop.Query { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexDefinition> IHop.Vertices { get; set; }
	}

	public partial class Hop : IHop
	{
		[JsonInclude]
		[JsonPropertyName("connections")]
		public Elastic.Clients.Elasticsearch.Graph.IHop? Connections { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("vertices")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexDefinition> Vertices { get; set; }
	}

	[ConvertAs(typeof(SampleDiversity))]
	public partial interface ISampleDiversity
	{
		Elastic.Clients.Elasticsearch.Field Field { get; set; }

		int MaxDocsPerValue { get; set; }
	}

	public partial class SampleDiversityDescriptor : DescriptorBase<SampleDiversityDescriptor, ISampleDiversity>, ISampleDiversity
	{
		Elastic.Clients.Elasticsearch.Field ISampleDiversity.Field { get; set; }

		int ISampleDiversity.MaxDocsPerValue { get; set; }
	}

	public partial class SampleDiversity : ISampleDiversity
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_docs_per_value")]
		public int MaxDocsPerValue { get; set; }
	}

	public partial class Vertex
	{
		[JsonInclude]
		[JsonPropertyName("depth")]
		public long Depth
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("term")]
		public string Term
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("weight")]
		public double Weight
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(VertexDefinition))]
	public partial interface IVertexDefinition
	{
		IEnumerable<string>? Exclude { get; set; }

		Elastic.Clients.Elasticsearch.Field Field { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexInclude>? Include { get; set; }

		long? MinDocCount { get; set; }

		long? ShardMinDocCount { get; set; }

		int? Size { get; set; }
	}

	public partial class VertexDefinitionDescriptor : DescriptorBase<VertexDefinitionDescriptor, IVertexDefinition>, IVertexDefinition
	{
		IEnumerable<string>? IVertexDefinition.Exclude { get; set; }

		Elastic.Clients.Elasticsearch.Field IVertexDefinition.Field { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexInclude>? IVertexDefinition.Include { get; set; }

		long? IVertexDefinition.MinDocCount { get; set; }

		long? IVertexDefinition.ShardMinDocCount { get; set; }

		int? IVertexDefinition.Size { get; set; }
	}

	public partial class VertexDefinition : IVertexDefinition
	{
		[JsonInclude]
		[JsonPropertyName("exclude")]
		public IEnumerable<string>? Exclude { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("include")]
		public IEnumerable<Elastic.Clients.Elasticsearch.Graph.IVertexInclude>? Include { get; set; }

		[JsonInclude]
		[JsonPropertyName("min_doc_count")]
		public long? MinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("shard_min_doc_count")]
		public long? ShardMinDocCount { get; set; }

		[JsonInclude]
		[JsonPropertyName("size")]
		public int? Size { get; set; }
	}

	[ConvertAs(typeof(VertexInclude))]
	public partial interface IVertexInclude
	{
		double Boost { get; set; }

		string Term { get; set; }
	}

	public partial class VertexIncludeDescriptor : DescriptorBase<VertexIncludeDescriptor, IVertexInclude>, IVertexInclude
	{
		double IVertexInclude.Boost { get; set; }

		string IVertexInclude.Term { get; set; }
	}

	public partial class VertexInclude : IVertexInclude
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public double Boost { get; set; }

		[JsonInclude]
		[JsonPropertyName("term")]
		public string Term { get; set; }
	}
}