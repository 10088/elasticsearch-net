// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Elastic.Clients.Elasticsearch.QueryDsl
{
	[ConvertAs(typeof(BoundingBox))]
	public partial interface IBoundingBox
	{
		double? Bottom { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomLeft { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomRight { get; set; }

		double? Left { get; set; }

		double? Right { get; set; }

		double? Top { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopLeft { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopRight { get; set; }

		string? Wkt { get; set; }
	}

	public partial class BoundingBoxDescriptor : DescriptorBase<BoundingBoxDescriptor, IBoundingBox>, IBoundingBox
	{
		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.BottomRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.TopLeft { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.TopRight { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? IBoundingBox.BottomLeft { get; set; }

		double? IBoundingBox.Top { get; set; }

		double? IBoundingBox.Left { get; set; }

		double? IBoundingBox.Right { get; set; }

		double? IBoundingBox.Bottom { get; set; }

		string? IBoundingBox.Wkt { get; set; }
	}

	public partial class BoundingBox : IBoundingBox
	{
		[JsonInclude]
		[JsonPropertyName("bottom")]
		public double? Bottom { get; set; }

		[JsonInclude]
		[JsonPropertyName("bottom_left")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomLeft { get; set; }

		[JsonInclude]
		[JsonPropertyName("bottom_right")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? BottomRight { get; set; }

		[JsonInclude]
		[JsonPropertyName("left")]
		public double? Left { get; set; }

		[JsonInclude]
		[JsonPropertyName("right")]
		public double? Right { get; set; }

		[JsonInclude]
		[JsonPropertyName("top")]
		public double? Top { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_left")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopLeft { get; set; }

		[JsonInclude]
		[JsonPropertyName("top_right")]
		public Elastic.Clients.Elasticsearch.QueryDsl.GeoLocation? TopRight { get; set; }

		[JsonInclude]
		[JsonPropertyName("wkt")]
		public string? Wkt { get; set; }
	}

	[ConvertAs(typeof(CommonTermsQuery))]
	public partial interface ICommonTermsQuery
	{
		string? Analyzer { get; set; }

		double? CutoffFrequency { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? HighFreqOperator { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? LowFreqOperator { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		string Query { get; set; }
	}

	public partial class CommonTermsQueryDescriptor : DescriptorBase<CommonTermsQueryDescriptor, ICommonTermsQuery>, ICommonTermsQuery
	{
		string? ICommonTermsQuery.Analyzer { get; set; }

		double? ICommonTermsQuery.CutoffFrequency { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? ICommonTermsQuery.HighFreqOperator { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.Operator? ICommonTermsQuery.LowFreqOperator { get; set; }

		Elastic.Clients.Elasticsearch.MinimumShouldMatch? ICommonTermsQuery.MinimumShouldMatch { get; set; }

		string ICommonTermsQuery.Query { get; set; }
	}

	public partial class CommonTermsQuery : QueryDsl.QueryBase, ICommonTermsQuery
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("cutoff_frequency")]
		public double? CutoffFrequency { get; set; }

		[JsonInclude]
		[JsonPropertyName("high_freq_operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? HighFreqOperator { get; set; }

		[JsonInclude]
		[JsonPropertyName("low_freq_operator")]
		public Elastic.Clients.Elasticsearch.QueryDsl.Operator? LowFreqOperator { get; set; }

		[JsonInclude]
		[JsonPropertyName("minimum_should_match")]
		public Elastic.Clients.Elasticsearch.MinimumShouldMatch? MinimumShouldMatch { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }
	}

	public partial class DateDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	public partial class DateDistanceFeatureQuery<TOrigin, TDistance> : QueryDsl.DistanceFeatureQueryBase<TOrigin, TDistance>
	{
	}

	public partial class DateRangeQuery : QueryDsl.RangeQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("format")]
		public Elastic.Clients.Elasticsearch.DateFormat? Format
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("gt")]
		public Elastic.Clients.Elasticsearch.DateMath? Gt
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("gte")]
		public Elastic.Clients.Elasticsearch.DateMath? Gte
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lt")]
		public Elastic.Clients.Elasticsearch.DateMath? Lt
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lte")]
		public Elastic.Clients.Elasticsearch.DateMath? Lte
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("time_zone")]
		public Elastic.Clients.Elasticsearch.TimeZone? TimeZone
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public abstract partial class DecayFunctionBase : QueryDsl.ScoreFunctionBase
	{
		[JsonInclude]
		[JsonPropertyName("multi_value_mode")]
		public Elastic.Clients.Elasticsearch.QueryDsl.MultiValueMode? MultiValueMode
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public abstract partial class DistanceFeatureQueryBase<TOrigin, TDistance> : QueryDsl.QueryBase
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("origin")]
		public TOrigin Origin
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("pivot")]
		public TDistance Pivot
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(FieldValueFactorScoreFunction))]
	public partial interface IFieldValueFactorScoreFunction
	{
		double? Factor { get; set; }

		Elastic.Clients.Elasticsearch.Field Field { get; set; }

		double? Missing { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.FieldValueFactorModifier? Modifier { get; set; }
	}

	public partial class FieldValueFactorScoreFunctionDescriptor : DescriptorBase<FieldValueFactorScoreFunctionDescriptor, IFieldValueFactorScoreFunction>, IFieldValueFactorScoreFunction
	{
		Elastic.Clients.Elasticsearch.Field IFieldValueFactorScoreFunction.Field { get; set; }

		double? IFieldValueFactorScoreFunction.Factor { get; set; }

		double? IFieldValueFactorScoreFunction.Missing { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.FieldValueFactorModifier? IFieldValueFactorScoreFunction.Modifier { get; set; }
	}

	public partial class FieldValueFactorScoreFunction : QueryDsl.ScoreFunctionBase, IFieldValueFactorScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("factor")]
		public double? Factor { get; set; }

		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("missing")]
		public double? Missing { get; set; }

		[JsonInclude]
		[JsonPropertyName("modifier")]
		public Elastic.Clients.Elasticsearch.QueryDsl.FieldValueFactorModifier? Modifier { get; set; }
	}

	public partial class GeoDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	public partial class GeoDistanceFeatureQuery<TOrigin, TDistance> : QueryDsl.DistanceFeatureQueryBase<TOrigin, TDistance>
	{
	}

	[ConvertAs(typeof(IntervalsAllOf))]
	public partial interface IIntervalsAllOf
	{
		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> Intervals { get; set; }

		int? MaxGaps { get; set; }

		bool? Ordered { get; set; }
	}

	public partial class IntervalsAllOfDescriptor : DescriptorBase<IntervalsAllOfDescriptor, IIntervalsAllOf>, IIntervalsAllOf
	{
		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> IIntervalsAllOf.Intervals { get; set; }

		int? IIntervalsAllOf.MaxGaps { get; set; }

		bool? IIntervalsAllOf.Ordered { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? IIntervalsAllOf.Filter { get; set; }
	}

	public partial class IntervalsAllOf : IIntervalsAllOf
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("intervals")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> Intervals { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonInclude]
		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }
	}

	[ConvertAs(typeof(IntervalsAnyOf))]
	public partial interface IIntervalsAnyOf
	{
		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> Intervals { get; set; }
	}

	public partial class IntervalsAnyOfDescriptor : DescriptorBase<IntervalsAnyOfDescriptor, IIntervalsAnyOf>, IIntervalsAnyOf
	{
		IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> IIntervalsAnyOf.Intervals { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? IIntervalsAnyOf.Filter { get; set; }
	}

	public partial class IntervalsAnyOf : IIntervalsAnyOf
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("intervals")]
		public IEnumerable<Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsContainer> Intervals { get; set; }
	}

	[ConvertAs(typeof(IntervalsFuzzy))]
	public partial interface IIntervalsFuzzy
	{
		string? Analyzer { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		int? PrefixLength { get; set; }

		string Term { get; set; }

		bool? Transpositions { get; set; }

		Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	public partial class IntervalsFuzzyDescriptor : DescriptorBase<IntervalsFuzzyDescriptor, IIntervalsFuzzy>, IIntervalsFuzzy
	{
		string? IIntervalsFuzzy.Analyzer { get; set; }

		Elastic.Clients.Elasticsearch.Fuzziness? IIntervalsFuzzy.Fuzziness { get; set; }

		int? IIntervalsFuzzy.PrefixLength { get; set; }

		string IIntervalsFuzzy.Term { get; set; }

		bool? IIntervalsFuzzy.Transpositions { get; set; }

		Elastic.Clients.Elasticsearch.Field? IIntervalsFuzzy.UseField { get; set; }
	}

	public partial class IntervalsFuzzy : IIntervalsFuzzy
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("fuzziness")]
		public Elastic.Clients.Elasticsearch.Fuzziness? Fuzziness { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix_length")]
		public int? PrefixLength { get; set; }

		[JsonInclude]
		[JsonPropertyName("term")]
		public string Term { get; set; }

		[JsonInclude]
		[JsonPropertyName("transpositions")]
		public bool? Transpositions { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	[ConvertAs(typeof(IntervalsMatch))]
	public partial interface IIntervalsMatch
	{
		string? Analyzer { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		int? MaxGaps { get; set; }

		bool? Ordered { get; set; }

		string Query { get; set; }

		Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	public partial class IntervalsMatchDescriptor : DescriptorBase<IntervalsMatchDescriptor, IIntervalsMatch>, IIntervalsMatch
	{
		string? IIntervalsMatch.Analyzer { get; set; }

		int? IIntervalsMatch.MaxGaps { get; set; }

		bool? IIntervalsMatch.Ordered { get; set; }

		string IIntervalsMatch.Query { get; set; }

		Elastic.Clients.Elasticsearch.Field? IIntervalsMatch.UseField { get; set; }

		Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? IIntervalsMatch.Filter { get; set; }
	}

	public partial class IntervalsMatch : IIntervalsMatch
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.IIntervalsFilter? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("max_gaps")]
		public int? MaxGaps { get; set; }

		[JsonInclude]
		[JsonPropertyName("ordered")]
		public bool? Ordered { get; set; }

		[JsonInclude]
		[JsonPropertyName("query")]
		public string Query { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	[ConvertAs(typeof(IntervalsPrefix))]
	public partial interface IIntervalsPrefix
	{
		string? Analyzer { get; set; }

		string Prefix { get; set; }

		Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	public partial class IntervalsPrefixDescriptor : DescriptorBase<IntervalsPrefixDescriptor, IIntervalsPrefix>, IIntervalsPrefix
	{
		string? IIntervalsPrefix.Analyzer { get; set; }

		string IIntervalsPrefix.Prefix { get; set; }

		Elastic.Clients.Elasticsearch.Field? IIntervalsPrefix.UseField { get; set; }
	}

	public partial class IntervalsPrefix : IIntervalsPrefix
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("prefix")]
		public string Prefix { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	[ConvertAs(typeof(IntervalsWildcard))]
	public partial interface IIntervalsWildcard
	{
		string? Analyzer { get; set; }

		string Pattern { get; set; }

		Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	public partial class IntervalsWildcardDescriptor : DescriptorBase<IntervalsWildcardDescriptor, IIntervalsWildcard>, IIntervalsWildcard
	{
		string? IIntervalsWildcard.Analyzer { get; set; }

		string IIntervalsWildcard.Pattern { get; set; }

		Elastic.Clients.Elasticsearch.Field? IIntervalsWildcard.UseField { get; set; }
	}

	public partial class IntervalsWildcard : IIntervalsWildcard
	{
		[JsonInclude]
		[JsonPropertyName("analyzer")]
		public string? Analyzer { get; set; }

		[JsonInclude]
		[JsonPropertyName("pattern")]
		public string Pattern { get; set; }

		[JsonInclude]
		[JsonPropertyName("use_field")]
		public Elastic.Clients.Elasticsearch.Field? UseField { get; set; }
	}

	public partial class LikeDocument
	{
		[JsonInclude]
		[JsonPropertyName("doc")]
		public object? Doc
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("fields")]
		public IReadOnlyCollection<Elastic.Clients.Elasticsearch.Field>? Fields
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("_id")]
		public Elastic.Clients.Elasticsearch.Id? Id
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("_index")]
		public Elastic.Clients.Elasticsearch.IndexName? Index
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("per_field_analyzer")]
		public Dictionary<Elastic.Clients.Elasticsearch.Field, string>? PerFieldAnalyzer
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("routing")]
		public Elastic.Clients.Elasticsearch.Routing? Routing
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("_type")]
		public Elastic.Clients.Elasticsearch.DocType? Type
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("version")]
		public Elastic.Clients.Elasticsearch.VersionNumber? Version
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("version_type")]
		public Elastic.Clients.Elasticsearch.VersionType? VersionType
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumberRangeQuery : QueryDsl.RangeQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("gt")]
		public double? Gt
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("gte")]
		public double? Gte
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lt")]
		public double? Lt
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lte")]
		public double? Lte
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NumericDecayFunction : QueryDsl.DecayFunctionBase
	{
	}

	[ConvertAs(typeof(QueryBase))]
	public partial interface IQueryBase
	{
		float? Boost { get; set; }

		string? query_name { get; set; }
	}

	public partial class QueryBaseDescriptor : DescriptorBase<QueryBaseDescriptor, IQueryBase>, IQueryBase
	{
		float? IQueryBase.Boost { get; set; }

		string? IQueryBase.query_name { get; set; }
	}

	public abstract partial class QueryBase : IQueryBase
	{
		[JsonInclude]
		[JsonPropertyName("boost")]
		public float? Boost { get; set; }

		[JsonInclude]
		[JsonPropertyName("_name")]
		public string? query_name { get; set; }
	}

	[ConvertAs(typeof(RandomScoreFunction))]
	public partial interface IRandomScoreFunction
	{
		Elastic.Clients.Elasticsearch.Field? Field { get; set; }

		Union<long, string>? Seed { get; set; }
	}

	public partial class RandomScoreFunctionDescriptor : DescriptorBase<RandomScoreFunctionDescriptor, IRandomScoreFunction>, IRandomScoreFunction
	{
		Elastic.Clients.Elasticsearch.Field? IRandomScoreFunction.Field { get; set; }

		Union<long, string>? IRandomScoreFunction.Seed { get; set; }
	}

	public partial class RandomScoreFunction : QueryDsl.ScoreFunctionBase, IRandomScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("field")]
		public Elastic.Clients.Elasticsearch.Field? Field { get; set; }

		[JsonInclude]
		[JsonPropertyName("seed")]
		public Union<long, string>? Seed { get; set; }
	}

	public abstract partial class RangeQueryBase : QueryDsl.QueryBase
	{
		[JsonInclude]
		[JsonPropertyName("relation")]
		public Elastic.Clients.Elasticsearch.QueryDsl.RangeRelation? Relation
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(RankFeatureFunction))]
	public partial interface IRankFeatureFunction
	{
	}

	public partial class RankFeatureFunctionDescriptor : DescriptorBase<RankFeatureFunctionDescriptor, IRankFeatureFunction>, IRankFeatureFunction
	{
	}

	public partial class RankFeatureFunction : IRankFeatureFunction
	{
	}

	[ConvertAs(typeof(RankFeatureFunctionLinear))]
	public partial interface IRankFeatureFunctionLinear
	{
	}

	public partial class RankFeatureFunctionLinearDescriptor : DescriptorBase<RankFeatureFunctionLinearDescriptor, IRankFeatureFunctionLinear>, IRankFeatureFunctionLinear
	{
	}

	public partial class RankFeatureFunctionLinear : QueryDsl.RankFeatureFunction, IRankFeatureFunctionLinear
	{
	}

	[ConvertAs(typeof(RankFeatureFunctionLogarithm))]
	public partial interface IRankFeatureFunctionLogarithm
	{
		float ScalingFactor { get; set; }
	}

	public partial class RankFeatureFunctionLogarithmDescriptor : DescriptorBase<RankFeatureFunctionLogarithmDescriptor, IRankFeatureFunctionLogarithm>, IRankFeatureFunctionLogarithm
	{
		float IRankFeatureFunctionLogarithm.ScalingFactor { get; set; }
	}

	public partial class RankFeatureFunctionLogarithm : QueryDsl.RankFeatureFunction, IRankFeatureFunctionLogarithm
	{
		[JsonInclude]
		[JsonPropertyName("scaling_factor")]
		public float ScalingFactor { get; set; }
	}

	[ConvertAs(typeof(RankFeatureFunctionSaturation))]
	public partial interface IRankFeatureFunctionSaturation
	{
		float? Pivot { get; set; }
	}

	public partial class RankFeatureFunctionSaturationDescriptor : DescriptorBase<RankFeatureFunctionSaturationDescriptor, IRankFeatureFunctionSaturation>, IRankFeatureFunctionSaturation
	{
		float? IRankFeatureFunctionSaturation.Pivot { get; set; }
	}

	public partial class RankFeatureFunctionSaturation : QueryDsl.RankFeatureFunction, IRankFeatureFunctionSaturation
	{
		[JsonInclude]
		[JsonPropertyName("pivot")]
		public float? Pivot { get; set; }
	}

	[ConvertAs(typeof(RankFeatureFunctionSigmoid))]
	public partial interface IRankFeatureFunctionSigmoid
	{
		float Exponent { get; set; }

		float Pivot { get; set; }
	}

	public partial class RankFeatureFunctionSigmoidDescriptor : DescriptorBase<RankFeatureFunctionSigmoidDescriptor, IRankFeatureFunctionSigmoid>, IRankFeatureFunctionSigmoid
	{
		float IRankFeatureFunctionSigmoid.Pivot { get; set; }

		float IRankFeatureFunctionSigmoid.Exponent { get; set; }
	}

	public partial class RankFeatureFunctionSigmoid : QueryDsl.RankFeatureFunction, IRankFeatureFunctionSigmoid
	{
		[JsonInclude]
		[JsonPropertyName("exponent")]
		public float Exponent { get; set; }

		[JsonInclude]
		[JsonPropertyName("pivot")]
		public float Pivot { get; set; }
	}

	[ConvertAs(typeof(ScoreFunctionBase))]
	public partial interface IScoreFunctionBase
	{
		Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer? Filter { get; set; }

		double? Weight { get; set; }
	}

	public partial class ScoreFunctionBaseDescriptor : DescriptorBase<ScoreFunctionBaseDescriptor, IScoreFunctionBase>, IScoreFunctionBase
	{
		Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer? IScoreFunctionBase.Filter { get; set; }

		double? IScoreFunctionBase.Weight { get; set; }
	}

	public abstract partial class ScoreFunctionBase : IScoreFunctionBase
	{
		[JsonInclude]
		[JsonPropertyName("filter")]
		public Elastic.Clients.Elasticsearch.QueryDsl.IQueryContainer? Filter { get; set; }

		[JsonInclude]
		[JsonPropertyName("weight")]
		public double? Weight { get; set; }
	}

	[ConvertAs(typeof(ScriptScoreFunction))]
	public partial interface IScriptScoreFunction
	{
		Elastic.Clients.Elasticsearch.Script Script { get; set; }
	}

	public partial class ScriptScoreFunctionDescriptor : DescriptorBase<ScriptScoreFunctionDescriptor, IScriptScoreFunction>, IScriptScoreFunction
	{
		Elastic.Clients.Elasticsearch.Script IScriptScoreFunction.Script { get; set; }
	}

	public partial class ScriptScoreFunction : QueryDsl.ScoreFunctionBase, IScriptScoreFunction
	{
		[JsonInclude]
		[JsonPropertyName("script")]
		public Elastic.Clients.Elasticsearch.Script Script { get; set; }
	}

	public partial class ThreeDimensionalPoint
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("z")]
		public double? z
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TwoDimensionalPoint
	{
		[JsonInclude]
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}

		[JsonInclude]
		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0_OR_GREATER
			init;
#else
			internal set;
#endif
		}
	}

	[ConvertAs(typeof(TypeQuery))]
	public partial interface ITypeQuery
	{
		string Value { get; set; }
	}

	public partial class TypeQueryDescriptor : DescriptorBase<TypeQueryDescriptor, ITypeQuery>, ITypeQuery
	{
		string ITypeQuery.Value { get; set; }
	}

	public partial class TypeQuery : QueryDsl.QueryBase, ITypeQuery
	{
		[JsonInclude]
		[JsonPropertyName("value")]
		public string Value { get; set; }
	}
}