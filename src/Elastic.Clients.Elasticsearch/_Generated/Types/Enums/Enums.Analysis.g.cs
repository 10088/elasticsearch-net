// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

using System.Text.Json.Serialization;
using System.Runtime.Serialization;
using Elastic.Transport;

#nullable restore
namespace Elastic.Clients.Elasticsearch.Analysis
{
	public enum DelimitedPayloadEncoding
	{
		[EnumMember(Value = "int")]
		Integer,
		[EnumMember(Value = "identity")]
		Identity,
		[EnumMember(Value = "float")]
		Float
	}

	public enum EdgeNGramSide
	{
		[EnumMember(Value = "front")]
		Front,
		[EnumMember(Value = "back")]
		Back
	}

	public enum IcuNormalizationMode
	{
		[EnumMember(Value = "decompose")]
		Decompose,
		[EnumMember(Value = "compose")]
		Compose
	}

	public enum IcuNormalizationType
	{
		[EnumMember(Value = "nfkc_cf")]
		NfkcCf,
		[EnumMember(Value = "nfkc")]
		Nfkc,
		[EnumMember(Value = "nfc")]
		Nfc
	}

	public enum KeepTypesMode
	{
		[EnumMember(Value = "include")]
		Include,
		[EnumMember(Value = "exclude")]
		Exclude
	}

	public enum KuromojiTokenizationMode
	{
		[EnumMember(Value = "search")]
		Search,
		[EnumMember(Value = "normal")]
		Normal,
		[EnumMember(Value = "extended")]
		Extended
	}

	public enum Language
	{
		[EnumMember(Value = "Turkish")]
		Turkish,
		[EnumMember(Value = "Thai")]
		Thai,
		[EnumMember(Value = "Swedish")]
		Swedish,
		[EnumMember(Value = "Spanish")]
		Spanish,
		[EnumMember(Value = "Sorani")]
		Sorani,
		[EnumMember(Value = "Russian")]
		Russian,
		[EnumMember(Value = "Romanian")]
		Romanian,
		[EnumMember(Value = "Portuguese")]
		Portuguese,
		[EnumMember(Value = "Persian")]
		Persian,
		[EnumMember(Value = "Norwegian")]
		Norwegian,
		[EnumMember(Value = "Latvian")]
		Latvian,
		[EnumMember(Value = "Italian")]
		Italian,
		[EnumMember(Value = "Irish")]
		Irish,
		[EnumMember(Value = "Indonesian")]
		Indonesian,
		[EnumMember(Value = "Hungarian")]
		Hungarian,
		[EnumMember(Value = "Hindi")]
		Hindi,
		[EnumMember(Value = "Greek")]
		Greek,
		[EnumMember(Value = "German")]
		German,
		[EnumMember(Value = "Galician")]
		Galician,
		[EnumMember(Value = "French")]
		French,
		[EnumMember(Value = "Finnish")]
		Finnish,
		[EnumMember(Value = "Estonian")]
		Estonian,
		[EnumMember(Value = "English")]
		English,
		[EnumMember(Value = "Dutch")]
		Dutch,
		[EnumMember(Value = "Danish")]
		Danish,
		[EnumMember(Value = "Czech")]
		Czech,
		[EnumMember(Value = "Cjk")]
		Cjk,
		[EnumMember(Value = "Chinese")]
		Chinese,
		[EnumMember(Value = "Catalan")]
		Catalan,
		[EnumMember(Value = "Bulgarian")]
		Bulgarian,
		[EnumMember(Value = "Brazilian")]
		Brazilian,
		[EnumMember(Value = "Basque")]
		Basque,
		[EnumMember(Value = "Armenian")]
		Armenian,
		[EnumMember(Value = "Arabic")]
		Arabic
	}

	public enum NoriDecompoundMode
	{
		[EnumMember(Value = "none")]
		None,
		[EnumMember(Value = "mixed")]
		Mixed,
		[EnumMember(Value = "discard")]
		Discard
	}

	public enum SnowballLanguage
	{
		[EnumMember(Value = "Turkish")]
		Turkish,
		[EnumMember(Value = "Swedish")]
		Swedish,
		[EnumMember(Value = "Spanish")]
		Spanish,
		[EnumMember(Value = "Russian")]
		Russian,
		[EnumMember(Value = "Romanian")]
		Romanian,
		[EnumMember(Value = "Portuguese")]
		Portuguese,
		[EnumMember(Value = "Porter")]
		Porter,
		[EnumMember(Value = "Norwegian")]
		Norwegian,
		[EnumMember(Value = "Lovins")]
		Lovins,
		[EnumMember(Value = "Kp")]
		Kp,
		[EnumMember(Value = "Italian")]
		Italian,
		[EnumMember(Value = "Hungarian")]
		Hungarian,
		[EnumMember(Value = "German2")]
		German2,
		[EnumMember(Value = "German")]
		German,
		[EnumMember(Value = "French")]
		French,
		[EnumMember(Value = "Finnish")]
		Finnish,
		[EnumMember(Value = "English")]
		English,
		[EnumMember(Value = "Dutch")]
		Dutch,
		[EnumMember(Value = "Danish")]
		Danish,
		[EnumMember(Value = "Catalan")]
		Catalan,
		[EnumMember(Value = "Basque")]
		Basque,
		[EnumMember(Value = "Armenian")]
		Armenian
	}

	public enum SynonymFormat
	{
		[EnumMember(Value = "wordnet")]
		Wordnet,
		[EnumMember(Value = "solr")]
		Solr
	}

	public enum TokenChar
	{
		[EnumMember(Value = "whitespace")]
		Whitespace,
		[EnumMember(Value = "symbol")]
		Symbol,
		[EnumMember(Value = "punctuation")]
		Punctuation,
		[EnumMember(Value = "letter")]
		Letter,
		[EnumMember(Value = "digit")]
		Digit,
		[EnumMember(Value = "custom")]
		Custom
	}
}