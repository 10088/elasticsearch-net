@using System.Collections.Generic
@using System.Net.Cache
@using CodeGeneration.LowLevelClient.Domain
@using CodeGeneration.LowLevelClient

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit @Model.Commit

namespace Nest
{
	
	@foreach (CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
	{
		
		<text>
	///<summary>Request parameters for @method.FullName
	///<pre>
	///@method.Documentation
	///</pre>
	///</summary>
	public partial class @Raw(method.RequestType + method.RequestTypeGeneric) @Raw(!method.RequestTypeUnmapped ?  "" : string.Format(" : BasePathRequest<{0}>", method.QueryStringParamName))
			{
	@foreach (KeyValuePair<string, ApiQueryParameters> kv in method.Url.Params)
	{
		  var original = kv.Key;
		  var cased = kv.Key.ToPascalCase();
		  var mm = (cased != "Type" && cased != "Index" && cased != "Script") ? cased : cased + "QueryString";
		  var fieldType = kv.Value.CsharpType(kv.Key).Replace("params", "");
		  var isFields = (original.Contains("fields") || original.Contains("source_include") || original.Contains("source_exclude"));
		  if (isFields && fieldType.Contains("string"))
		  {
			  fieldType = "IList<PropertyPathMarker>";
		  }
		  else if (mm.Contains("field") && fieldType.Contains("string"))
		  {
			  fieldType = "PropertyPathMarker";
		  }
		<text>
		///<summary>@kv.Value.Description</summary>
		public @Raw(fieldType) @(mm) 
		{ 
			get { return this.Request.RequestParameters.GetQueryStringValue@(Raw("<" + fieldType + ">"))("@original"); } 
			set { this.Request.RequestParameters.AddQueryString("@original", value); }
		}
		</text>
		
		
	  }
@if (method.RequestTypeUnmapped)
		{
<text>
		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo@(Raw(string.Format("<{0}>", method.QueryStringParamName))) pathInfo)
		{
			throw new NotImplementedException();
		}
</text>
		}
	}
	</text>
		
	
	}
	
}
 