@using System.Collections.Generic
@using System.Linq
@using System.Net.Cache
@using CodeGeneration.LowLevelClient.Domain
@using CodeGeneration.LowLevelClient

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

//This file contains all the typed querystring parameters that are generated of the client spec.
//This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
//Generated of commit @Model.Commit

namespace Nest
{
@{
	RestApiSpec m = Model;
	var methods = m.CsharpMethodsWithQueryStringInfo
		.Concat(m
			.CsharpMethodsWithQueryStringInfo
			.Where(s=>s.RequestTypeGeneric == "<T>")
			.Select(s=> { var ss = CsharpMethod.Clone(s); ss.RequestTypeGeneric = ""; return ss; })
		);
}
	@foreach (CsharpMethod method in methods)
	{
	<text>///<summary>Request parameters for @method.FullName <pre>@method.Documentation</pre></summary>
	public partial class @Raw(method.RequestType + method.RequestTypeGeneric) @Raw(!method.RequestTypeUnmapped ?  "" : string.Format(" : RequestBase<{0}>", method.QueryStringParamName))
	{
	@foreach (KeyValuePair<string, ApiQueryParameters> kv in method.Url.Params)
	{
		var original = kv.Value.OriginalQueryStringParamName;
		var cased = kv.Key.ToPascalCase();
		var mm = (cased != "Type" && cased != "Index" && cased != "Script") ? cased : cased + "QueryString";
		var fieldType = kv.Value.CsharpType(kv.Key).Replace("params", "");
		var isFields = (original.Contains("fields") || original.Contains("source_include") || original.Contains("source_exclude"));
		if (isFields && fieldType.Contains("string"))
		{
			fieldType = "IList<FieldName>";
		}
		else if (original.Contains("field") && fieldType.Contains("string"))
		{
			fieldType = "FieldName";
		}
		<text>///<summary>@kv.Value.Description</summary>
		@if(!string.IsNullOrWhiteSpace(kv.Value.DeprecatedInFavorOf))
		{
		<text>[Obsolete("Scheduled to be removed in 2.0, use @kv.Value.DeprecatedInFavorOf instead")]</text>
		}
		public @Raw(fieldType) @(mm) { get { return Q@(Raw("<" + fieldType + ">"))("@original"); } set { Q("@original", value); } }
		</text>
	}
	@if (method.RequestTypeUnmapped)
	{<text>	//TODO THIS METHOD IS UNMAPPED!
	</text>
	}
	}</text>
	}
}
 