@using System.Globalization
@using System.Linq
@using System.Text.RegularExpressions
@using CodeGeneration.LowLevelClient.Domain
@using CodeGeneration.LowLevelClient 
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

///Generated File Please Do Not Edit Manually
@{
	RestApiSpec model = Model;
	<text>
namespace Elasticsearch.Net
{
	///<summary>
	///Raw operations with elasticsearch
	///</summary>
	public partial class Elasticsearch : IElasticsearch
	{
	</text>
	foreach (var kv in model.Endpoints)
	{
		var identifier = kv.Key;
		var endpoint = kv.Value;
		var methods = endpoint.GetCsharpMethods().ToList();
		foreach (var method in methods)
		{
			var url = method.Path.Split(new[] {'/'}, 2).Last();
			int i = -1;
			var patchedUrl = Regex.Replace(url, @"{\w+}", (m) => "{" + (++i).ToString(CultureInfo.InvariantCulture) +"}");
			
		<text>
		///<summary>@method.HttpMethod @method.Path
	    ///<pre>@method.Documentation</pre>	
	    ///</summary></text>
			foreach (var part in method.Parts)
			{
		<text>@Raw("///<param name=\"" + part.Name + "\">")@part.Description@Raw("</param>")</text>
			}
		<text>public @Raw(method.ReturnType) @(method.FullName)(@Raw(method.Arguments))
		{
		@foreach (ApiUrlPart part in method.Parts.Where(p=>p.Name != "body").ToList())
		{
			<text>@(part.Name).@(part.Type == "string" || part.Type == "list" ? "ThrowIfNullOrEmpty" : "ThrowIfNull")("@part.Name");</text>
		}
		@if (method.Parts.Any())
		{
	<text>		var url = "@(patchedUrl)".F(@string.Join(", ", method.Parts.Where(p=>p.Name != "body").Select(p=> "Encoded(" + p.Name +")" )));</text>
		}
		else
		{
	<text>var url = "@(url)";</text>
		}
			NameValueCollection nv = null;
			if (queryString != null)
			{
				var qs = queryString(new @(method.QueryStringParamName)());
				if (qs != null) nv = this.ToNameValueCollection(qs);
			}
		@{
			string requestMethod = method.ReturnType.StartsWith("Task<") ? "DoRequestAsync" : "DoRequest";
		}
			return this.@(requestMethod)("@method.HttpMethod", url@(method.Parts.Any(pp=>pp.Name == "body") ? ", body" : ", data: null"), queryString: nv);
		}</text>

		}
	}
	<text>
	  }
	  }
	</text>
}