@using System.Collections.Generic
@using RawClientGenerator
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Nest.Resolvers;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit @Model.Commit

namespace Nest
{
	
	@foreach (RawClientGenerator.CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
	{
	<text>
	///<summary>Query string descriptor for @method.FullName
	///<pre>
	///@method.Documentation
	///</pre>
	///</summary>
	public class @method.QueryStringParamName : FluentQueryString<@method.QueryStringParamName> 
	{
	  @foreach (KeyValuePair<string, RawClientGenerator.ApiQueryParameters> kv in method.Url.Params)
	  {
		  var mm = kv.Key;
		  var fieldType = kv.Value.CsharpType(kv.Key).Replace("params", "");
		  var setter = mm;
		  if (mm.Contains("fields") && fieldType.Contains("string"))
		  {
			  fieldType = "IEnumerable<PropertyPathMarker>";
			  setter = mm + ".Select(f=>(PropertyPathMarker)f)";
		  }
		  else if (mm.Contains("field") && fieldType.Contains("string"))
		  {
			  fieldType = "PropertyPathMarker";
		  }
		<text>
		internal @Raw(fieldType) _@(kv.Key) { get; set; }
		///<summary>@kv.Value.Description</summary>
		public @method.QueryStringParamName @(mm.ToPascalCase())(@kv.Value.CsharpType(mm) @mm)
		{
			this._@(mm) = @Raw(setter);
			this.Add("@mm", this._@mm);
			return this;
		}
		</text>
		if (mm.Contains("fields") && fieldType.Contains("PropertyPath"))
		 {
		<text>
		///<summary>@kv.Value.Description</summary>
		internal @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(@Raw("IEnumerable<Expression<Func<T, object>>> ") @mm)
			where T : class
		{
			this._@(mm) = @mm@Raw(".Select(e=>(PropertyPathMarker)e)");
			this.Add("@mm", this._@mm);
			return this;
		}
		</text>
		 }
		 else if (mm.Contains("field") && fieldType.Contains("PropertyPath"))
		 {
		<text>
		///<summary>@kv.Value.Description</summary>
		internal @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(@Raw("Expression<Func<T, object>>") @mm)
			where T : class
		{
			this._@(mm) = @mm;
			this.Add("@mm", this._@mm);
			return this;
		}
		</text>
		 }
			

	  }
	}
	</text>
	}
	
}
 