@using System.Collections.Generic
@using System.Linq
@using CsQuery.ExtensionMethods.Internal
@using RawClientGenerator
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Nest.Resolvers;
///This file lays the base for all the descriptors based on the query string parameters in the spec for IElasticClient.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit @Model.Commit

namespace Nest
{
	@foreach (RawClientGenerator.CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
	{
		var type = method.DescriptorType + method.DescriptorTypeGeneric;
	<text>
	///<summary>descriptor for @method.FullName
	///<pre>
	///@method.Documentation
	///</pre>
	///</summary>
	public partial class @Raw(type)
	{
		internal @method.QueryStringParamName _QueryString = new @(method.QueryStringParamName)(); 
</text>
	  foreach (KeyValuePair<string, RawClientGenerator.ApiQueryParameters> kv 
				in method.Url.Params)
	  {
			var t = @kv.Value.CsharpType(kv.Key);
			var tSuffix = (t == "bool") ? " = true" : "";
			var m = kv.Key.ToPascalCase();
			var mm = (m != "Type" && m != "Index" && m != "Script") ? m : m + "QueryString";
			var typed = !method.DescriptorTypeGeneric.IsNullOrEmpty();
		<text>
		///<summary>@kv.Value.Description</summary>
		public @Raw(type) @(mm)(@t @kv.Key@tSuffix)
		{
			this._QueryString.@(m)(@kv.Key);
			return this;
		}
		</text>
		if (mm == "Fields")
		 {
			<text>
		///<summary>@kv.Value.Description</summary>
		public @Raw(type) Fields@(Raw(typed ? "" : "<T>"))(params @Raw("Expression<Func<T, object>>[]") typedPathLookups) @Raw(typed ? "" : "where T : class")
		{
			if (!typedPathLookups.HasAny())
				return this;

			var pr = new PropertyNameResolver();
			this._QueryString.Fields(typedPathLookups.Select(pr.Resolve).ToArray());
			return this;
		}
			</text>

		 }
		  if (mm == "Field")
		 {
			<text>
		///<summary>@kv.Value.Description</summary>
		public @Raw(type) Field@(Raw(typed ? "" : "<T>"))(@Raw("Expression<Func<T, object>>") typedPathLookup) @Raw(typed ? "" : "where T : class")
		{
			typedPathLookup.ThrowIfNull("typedPathLookup");
			var pr = new PropertyNameResolver();
			this._QueryString.Field(pr.Resolve(typedPathLookup));
			return this;
		}
			</text>

		 }
	}
	<text>	
	}
	</text>
}
}
 