// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using Nest.Types.Core;
using Nest.Types.IndexLifecycleManagement;
using Nest.Types.Indices;
using Nest.Types.Ingest;
using Nest.Types.Mapping;
using Nest.Types.Snapshot;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Types.Cluster
{
	public partial class ClusterStateBlockIndex
	{
		[JsonPropertyName("aliases")]
		public IReadOnlyCollection<IndexAlias>? Aliases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("aliases_version")]
		public Types.Core.VersionNumber? AliasesVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("in_sync_allocations")]
		public Dictionary<string, IReadOnlyCollection<string>>? InSyncAllocations
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("levels")]
		public IReadOnlyCollection<string>? Levels
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings")]
		public Dictionary<string, TypeMapping>? Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mapping_version")]
		public Types.Core.VersionNumber? MappingVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_terms")]
		public Dictionary<string, int>? PrimaryTerms
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("retryable")]
		public bool? Retryable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rollover_info")]
		public Dictionary<string, RolloverConditions>? RolloverInfo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_num_shards")]
		public Types.Core.VersionNumber? RoutingNumShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings")]
		public Dictionary<IndexName, IndexSettings>? Settings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("settings_version")]
		public Types.Core.VersionNumber? SettingsVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public string? State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("system")]
		public bool? System
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timestamp_range")]
		public Dictionary<string, object>? TimestampRange
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateDeletedSnapshots
	{
		[JsonPropertyName("snapshot_deletions")]
		public IReadOnlyCollection<string> SnapshotDeletions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecycle
	{
		[JsonPropertyName("operation_mode")]
		public Types.Core.LifecycleOperationMode OperationMode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policies")]
		public Dictionary<IndexName, ClusterStateIndexLifecycleSummary> Policies
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecyclePolicy
	{
		[JsonPropertyName("phases")]
		public Types.IndexLifecycleManagement.Phases Phases
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIndexLifecycleSummary
	{
		[JsonPropertyName("headers")]
		public Types.Core.HttpHeaders Headers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modified_date")]
		public long ModifiedDate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("modified_date_string")]
		public Types.Core.DateString ModifiedDateString
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy")]
		public Types.Cluster.ClusterStateIndexLifecyclePolicy Policy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionNumber Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngest
	{
		[JsonPropertyName("pipeline")]
		public IReadOnlyCollection<ClusterStateIngestPipeline> Pipeline
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngestPipeline
	{
		[JsonPropertyName("config")]
		public Types.Cluster.ClusterStateIngestPipelineConfig Config
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Types.Core.Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateIngestPipelineConfig
	{
		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processors")]
		public IReadOnlyCollection<ProcessorContainer> Processors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadata
	{
		[JsonPropertyName("cluster_coordination")]
		public Types.Cluster.ClusterStateMetadataClusterCoordination ClusterCoordination
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid")]
		public Types.Core.Uuid ClusterUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid_committed")]
		public bool ClusterUuidCommitted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("component_template")]
		public Dictionary<string, object>? ComponentTemplate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index-graveyard")]
		public Types.Cluster.ClusterStateMetadataIndexGraveyard IndexGraveyard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_lifecycle")]
		public Types.Cluster.ClusterStateIndexLifecycle? IndexLifecycle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_template")]
		public Dictionary<string, object>? IndexTemplate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indices")]
		public Dictionary<IndexName, ClusterStateBlockIndex>? Indices
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public Types.Cluster.ClusterStateIngest? Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("repositories")]
		public Dictionary<string, string>? Repositories
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("templates")]
		public Types.Cluster.ClusterStateMetadataTemplate Templates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataClusterCoordination
	{
		[JsonPropertyName("last_accepted_config")]
		public IReadOnlyCollection<string> LastAcceptedConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_committed_config")]
		public IReadOnlyCollection<string> LastCommittedConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term")]
		public int Term
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("voting_config_exclusions")]
		public IReadOnlyCollection<VotingConfigExclusionsItem> VotingConfigExclusions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataIndexGraveyard
	{
		[JsonPropertyName("tombstones")]
		public IReadOnlyCollection<Tombstone> Tombstones
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateMetadataTemplate
	{
	}

	public partial class ClusterStateRoutingNodes
	{
		[JsonPropertyName("nodes")]
		public Dictionary<string, IReadOnlyCollection<NodeShard>> Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned")]
		public IReadOnlyCollection<NodeShard> Unassigned
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateSnapshots
	{
		[JsonPropertyName("snapshots")]
		public IReadOnlyCollection<Status> Snapshots
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ComponentTemplate
	{
		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Tombstone
	{
		[JsonPropertyName("delete_date")]
		public Types.Core.DateString? DeleteDate
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delete_date_in_millis")]
		public long DeleteDateInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public Types.Cluster.TombstoneIndex Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TombstoneIndex
	{
		[JsonPropertyName("index_name")]
		public Types.Core.Name IndexName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_uuid")]
		public Types.Core.Uuid IndexUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class VotingConfigExclusionsItem
	{
		[JsonPropertyName("node_id")]
		public Types.Core.Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Types.Core.Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AllocationDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public Types.Cluster.AllocationExplainDecision Decision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AllocationStore
	{
		[JsonPropertyName("allocation_id")]
		public string AllocationId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("found")]
		public bool Found
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("in_sync")]
		public bool InSync
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_size_in_bytes")]
		public long MatchingSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matching_sync_id")]
		public bool MatchingSyncId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store_exception")]
		public string StoreException
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterInfo
	{
		[JsonPropertyName("nodes")]
		public Dictionary<string, NodeDiskUsage> Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reserved_sizes")]
		public IReadOnlyCollection<ReservedSize> ReservedSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_data_set_sizes")]
		public Dictionary<string, string>? ShardDataSetSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_paths")]
		public Dictionary<string, string> ShardPaths
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard_sizes")]
		public Dictionary<string, long> ShardSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CurrentNode
	{
		[JsonPropertyName("attributes")]
		public Dictionary<string, string> Attributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Types.Core.Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public Types.Core.TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DiskUsage
	{
		[JsonPropertyName("free_bytes")]
		public long FreeBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_disk_percent")]
		public double FreeDiskPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_bytes")]
		public long TotalBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_bytes")]
		public long UsedBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_disk_percent")]
		public double UsedDiskPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeAllocationExplanation
	{
		[JsonPropertyName("deciders")]
		public IReadOnlyCollection<AllocationDecision> Deciders
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_attributes")]
		public Dictionary<string, string> NodeAttributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_decision")]
		public Types.Cluster.Decision NodeDecision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_id")]
		public Types.Core.Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Types.Core.Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public Types.Cluster.AllocationStore? Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public Types.Core.TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("weight_ranking")]
		public int WeightRanking
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeDiskUsage
	{
		[JsonPropertyName("least_available")]
		public Types.Cluster.DiskUsage LeastAvailable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("most_available")]
		public Types.Cluster.DiskUsage MostAvailable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node_name")]
		public Types.Core.Name NodeName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ReservedSize
	{
		[JsonPropertyName("node_id")]
		public Types.Core.Id NodeId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public IReadOnlyCollection<string> Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public long Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UnassignedInformation
	{
		[JsonPropertyName("allocation_status")]
		public string? AllocationStatus
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("at")]
		public Types.Core.DateString At
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("delayed")]
		public bool? Delayed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public string? Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_allocation_attempts")]
		public int? FailedAllocationAttempts
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("last_allocation_status")]
		public string? LastAllocationStatus
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public Types.Cluster.UnassignedInformationReason Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexHealthStats
	{
		[JsonPropertyName("active_primary_shards")]
		public int ActivePrimaryShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_replicas")]
		public int NumberOfReplicas
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("number_of_shards")]
		public int NumberOfShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public Dictionary<string, ShardHealthStats>? Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Types.Core.Health Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardHealthStats
	{
		[JsonPropertyName("active_shards")]
		public int ActiveShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initializing_shards")]
		public int InitializingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_active")]
		public bool PrimaryActive
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("relocating_shards")]
		public int RelocatingShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public Types.Core.Health Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_shards")]
		public int UnassignedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PendingTask
	{
		[JsonPropertyName("insert_order")]
		public int InsertOrder
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("priority")]
		public string Priority
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue")]
		public string TimeInQueue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_queue_millis")]
		public int TimeInQueueMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterRemoteInfo
	{
		[JsonPropertyName("connected")]
		public bool Connected
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("initial_connect_timeout")]
		public Types.Core.Time InitialConnectTimeout
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_connections_per_cluster")]
		public int MaxConnectionsPerCluster
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("num_nodes_connected")]
		public long NumNodesConnected
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("seeds")]
		public IReadOnlyCollection<string> Seeds
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("skip_unavailable")]
		public bool SkipUnavailable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Command
	{
		[JsonPropertyName("allocate_empty_primary")]
		public Types.Cluster.CommandAllocatePrimaryAction? AllocateEmptyPrimary { get; set; }

		[JsonPropertyName("allocate_replica")]
		public Types.Cluster.CommandAllocateReplicaAction? AllocateReplica { get; set; }

		[JsonPropertyName("allocate_stale_primary")]
		public Types.Cluster.CommandAllocatePrimaryAction? AllocateStalePrimary { get; set; }

		[JsonPropertyName("cancel")]
		public Types.Cluster.CommandCancelAction? Cancel { get; set; }

		[JsonPropertyName("move")]
		public Types.Cluster.CommandMoveAction? Move { get; set; }
	}

	public partial class CommandAllocatePrimaryAction
	{
		[JsonPropertyName("accept_data_loss")]
		public bool AcceptDataLoss { get; set; }

		[JsonPropertyName("index")]
		public Types.Core.IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandAllocateReplicaAction
	{
		[JsonPropertyName("index")]
		public Types.Core.IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandCancelAction
	{
		[JsonPropertyName("allow_primary")]
		public bool? AllowPrimary { get; set; }

		[JsonPropertyName("index")]
		public Types.Core.IndexName Index { get; set; }

		[JsonPropertyName("node")]
		public string Node { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }
	}

	public partial class CommandMoveAction
	{
		[JsonPropertyName("from_node")]
		public string FromNode { get; set; }

		[JsonPropertyName("index")]
		public Types.Core.IndexName Index { get; set; }

		[JsonPropertyName("shard")]
		public int Shard { get; set; }

		[JsonPropertyName("to_node")]
		public string ToNode { get; set; }
	}

	public partial class RerouteDecision
	{
		[JsonPropertyName("decider")]
		public string Decider
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decision")]
		public string Decision
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("explanation")]
		public string Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteExplanation
	{
		[JsonPropertyName("command")]
		public string Command
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("decisions")]
		public IReadOnlyCollection<RerouteDecision> Decisions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("parameters")]
		public Types.Cluster.RerouteParameters Parameters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteParameters
	{
		[JsonPropertyName("allow_primary")]
		public bool AllowPrimary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("from_node")]
		public Types.Core.NodeName? FromNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public Types.Core.IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public Types.Core.NodeName Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("to_node")]
		public Types.Core.NodeName? ToNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RerouteState
	{
		[JsonPropertyName("blocks")]
		public Types.Core.EmptyObject? Blocks
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cluster_uuid")]
		public Types.Core.Uuid ClusterUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("master_node")]
		public string? MasterNode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("metadata")]
		public Types.Cluster.ClusterStateMetadata? Metadata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("nodes")]
		public Dictionary<NodeName, NodeAttributes>? Nodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_nodes")]
		public Types.Cluster.ClusterStateRoutingNodes? RoutingNodes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("routing_table")]
		public Dictionary<string, EmptyObject>? RoutingTable
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("security_tokens")]
		public Dictionary<string, string>? SecurityTokens
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshot_deletions")]
		public Types.Cluster.ClusterStateDeletedSnapshots? SnapshotDeletions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("snapshots")]
		public Types.Cluster.ClusterStateSnapshots? Snapshots
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state_uuid")]
		public Types.Core.Uuid? StateUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterStateBlocks
	{
		[JsonPropertyName("indices")]
		public Dictionary<IndexName, Dictionary<string, ClusterStateBlockIndex>>? Indices
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CharFilterTypes
	{
		[JsonPropertyName("analyzer_types")]
		public IReadOnlyCollection<FieldTypes> AnalyzerTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_analyzers")]
		public IReadOnlyCollection<FieldTypes> BuiltInAnalyzers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_char_filters")]
		public IReadOnlyCollection<FieldTypes> BuiltInCharFilters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_filters")]
		public IReadOnlyCollection<FieldTypes> BuiltInFilters
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("built_in_tokenizers")]
		public IReadOnlyCollection<FieldTypes> BuiltInTokenizers
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("filter_types")]
		public IReadOnlyCollection<FieldTypes> FilterTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tokenizer_types")]
		public IReadOnlyCollection<FieldTypes> TokenizerTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterFileSystem
	{
		[JsonPropertyName("available_in_bytes")]
		public long AvailableInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndices
	{
		[JsonPropertyName("analysis")]
		public Types.Cluster.CharFilterTypes Analysis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("completion")]
		public Types.Core.CompletionStats Completion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("docs")]
		public Types.Core.DocStats Docs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fielddata")]
		public Types.Core.FielddataStats Fielddata
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mappings")]
		public Types.Cluster.FieldTypesMappings Mappings
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("query_cache")]
		public Types.Core.QueryCacheStats QueryCache
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("segments")]
		public Types.Core.SegmentsStats Segments
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public Types.Cluster.ClusterIndicesShards Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("store")]
		public Types.Core.StoreStats Store
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<IndicesVersions>? Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndicesShards
	{
		[JsonPropertyName("index")]
		public Types.Cluster.ClusterIndicesShardsIndex? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primaries")]
		public double? Primaries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replication")]
		public double? Replication
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public double? Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIndicesShardsIndex
	{
		[JsonPropertyName("primaries")]
		public Types.Cluster.ClusterShardMetrics Primaries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replication")]
		public Types.Cluster.ClusterShardMetrics Replication
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shards")]
		public Types.Cluster.ClusterShardMetrics Shards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterIngest
	{
		[JsonPropertyName("number_of_pipelines")]
		public int NumberOfPipelines
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_stats")]
		public Dictionary<string, ClusterProcessor> ProcessorStats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvm
	{
		[JsonPropertyName("max_uptime_in_millis")]
		public long MaxUptimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public Types.Cluster.ClusterJvmMemory Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("threads")]
		public long Threads
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<ClusterJvmVersion> Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvmMemory
	{
		[JsonPropertyName("heap_max_in_bytes")]
		public long HeapMaxInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("heap_used_in_bytes")]
		public long HeapUsedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterJvmVersion
	{
		[JsonPropertyName("bundled_jdk")]
		public bool BundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("using_bundled_jdk")]
		public bool UsingBundledJdk
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_name")]
		public string VmName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_vendor")]
		public string VmVendor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("vm_version")]
		public Types.Core.VersionString VmVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNetworkTypes
	{
		[JsonPropertyName("http_types")]
		public Dictionary<string, int> HttpTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_types")]
		public Dictionary<string, int> TransportTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNodeCount
	{
		[JsonPropertyName("coordinating_only")]
		public int CoordinatingOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data")]
		public int Data
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_cold")]
		public int DataCold
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_content")]
		public int DataContent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_frozen")]
		public int? DataFrozen
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_hot")]
		public int DataHot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("data_warm")]
		public int DataWarm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public int Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("master")]
		public int Master
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ml")]
		public int Ml
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remote_cluster_client")]
		public int RemoteClusterClient
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transform")]
		public int Transform
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("voting_only")]
		public int VotingOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterNodes
	{
		[JsonPropertyName("count")]
		public Types.Cluster.ClusterNodeCount Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("discovery_types")]
		public Dictionary<string, int> DiscoveryTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fs")]
		public Types.Cluster.ClusterFileSystem Fs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ingest")]
		public Types.Cluster.ClusterIngest Ingest
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("jvm")]
		public Types.Cluster.ClusterJvm Jvm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("network_types")]
		public Types.Cluster.ClusterNetworkTypes NetworkTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("os")]
		public Types.Cluster.ClusterOperatingSystem Os
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("packaging_types")]
		public IReadOnlyCollection<NodePackagingType> PackagingTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("plugins")]
		public IReadOnlyCollection<PluginStats> Plugins
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("process")]
		public Types.Cluster.ClusterProcess Process
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("versions")]
		public IReadOnlyCollection<VersionString> Versions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystem
	{
		[JsonPropertyName("allocated_processors")]
		public int AllocatedProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("architectures")]
		public IReadOnlyCollection<ClusterOperatingSystemArchitecture>? Architectures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("available_processors")]
		public int AvailableProcessors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mem")]
		public Types.Cluster.OperatingSystemMemoryInfo Mem
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("names")]
		public IReadOnlyCollection<ClusterOperatingSystemName> Names
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pretty_names")]
		public IReadOnlyCollection<ClusterOperatingSystemName> PrettyNames
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystemArchitecture
	{
		[JsonPropertyName("arch")]
		public string Arch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterOperatingSystemName
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcess
	{
		[JsonPropertyName("cpu")]
		public Types.Cluster.ClusterProcessCpu Cpu
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("open_file_descriptors")]
		public Types.Cluster.ClusterProcessOpenFileDescriptors OpenFileDescriptors
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessCpu
	{
		[JsonPropertyName("percent")]
		public int Percent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessOpenFileDescriptors
	{
		[JsonPropertyName("avg")]
		public long Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public long Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public long Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterProcessor
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("current")]
		public long Current
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed")]
		public long Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("time_in_millis")]
		public long TimeInMillis
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ClusterShardMetrics
	{
		[JsonPropertyName("avg")]
		public double Avg
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldTypes
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script_count")]
		public int? ScriptCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldTypesMappings
	{
		[JsonPropertyName("field_types")]
		public IReadOnlyCollection<FieldTypes> FieldTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("runtime_field_types")]
		public IReadOnlyCollection<RuntimeFieldTypes>? RuntimeFieldTypes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndicesVersions
	{
		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary_shard_count")]
		public int PrimaryShardCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_primary_bytes")]
		public long TotalPrimaryBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodePackagingType
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("flavor")]
		public string Flavor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class OperatingSystemMemoryInfo
	{
		[JsonPropertyName("free_in_bytes")]
		public long FreeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("free_percent")]
		public int FreePercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_in_bytes")]
		public long TotalInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_in_bytes")]
		public long UsedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("used_percent")]
		public int UsedPercent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RuntimeFieldTypes
	{
		[JsonPropertyName("chars_max")]
		public int CharsMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("chars_total")]
		public int CharsTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_max")]
		public int DocMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_total")]
		public int DocTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_count")]
		public int IndexCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public IReadOnlyCollection<string> Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_max")]
		public int LinesMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lines_total")]
		public int LinesTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("scriptless_count")]
		public int ScriptlessCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shadowed_count")]
		public int ShadowedCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_max")]
		public int SourceMax
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("source_total")]
		public int SourceTotal
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}