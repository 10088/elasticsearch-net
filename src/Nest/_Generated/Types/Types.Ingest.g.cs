// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using Nest.Types.Core;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Types.Ingest
{
	public partial class AppendProcessor : ProcessorBase
	{
		[JsonPropertyName("allow_duplicates")]
		public bool? AllowDuplicates
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public IReadOnlyCollection<object> Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class AttachmentProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indexed_chars")]
		public long? IndexedChars
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("indexed_chars_field")]
		public Types.Core.Field? IndexedCharsField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string>? Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_name")]
		public string? ResourceName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class BytesProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CircleProcessor : ProcessorBase
	{
		[JsonPropertyName("error_distance")]
		public double ErrorDistance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_type")]
		public Types.Ingest.ShapeType ShapeType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ConvertProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public Types.Ingest.ConvertType Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CsvProcessor : ProcessorBase
	{
		[JsonPropertyName("description")]
		public string? Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("empty_value")]
		public object EmptyValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("quote")]
		public string? Quote
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string? Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_fields")]
		public Types.Core.Fields TargetFields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim")]
		public bool Trim
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateIndexNameProcessor : ProcessorBase
	{
		[JsonPropertyName("date_formats")]
		public IReadOnlyCollection<string> DateFormats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date_rounding")]
		public Union<string, DateRounding> DateRounding
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_format")]
		public string IndexNameFormat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_name_prefix")]
		public string IndexNamePrefix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string Timezone
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DateProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("formats")]
		public IReadOnlyCollection<string> Formats
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("locale")]
		public string? Locale
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("timezone")]
		public string? Timezone
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DissectProcessor : ProcessorBase
	{
		[JsonPropertyName("append_separator")]
		public string AppendSeparator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DotExpanderProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("path")]
		public string? Path
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DropProcessor : ProcessorBase
	{
	}

	public partial class EnrichProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_matches")]
		public int? MaxMatches
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("policy_name")]
		public string PolicyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shape_relation")]
		public Types.Core.GeoShapeRelation? ShapeRelation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FailProcessor : ProcessorBase
	{
		[JsonPropertyName("message")]
		public string Message
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ForeachProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor")]
		public Types.Ingest.ProcessorContainer Processor
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GeoIpProcessor : ProcessorBase
	{
		[JsonPropertyName("database_file")]
		public string DatabaseFile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("first_only")]
		public bool FirstOnly
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string> Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GrokProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern_definitions")]
		public Dictionary<string, string> PatternDefinitions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("patterns")]
		public IReadOnlyCollection<string> Patterns
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trace_match")]
		public bool? TraceMatch
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class GsubProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pattern")]
		public string Pattern
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("replacement")]
		public string Replacement
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceConfig
	{
		[JsonPropertyName("regression")]
		public Types.Ingest.InferenceConfigRegression? Regression
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceConfigRegression
	{
		[JsonPropertyName("results_field")]
		public string ResultsField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InferenceProcessor : ProcessorBase
	{
		[JsonPropertyName("field_map")]
		public Dictionary<Field, object>? FieldMap
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inference_config")]
		public Types.Ingest.InferenceConfig? InferenceConfig
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("model_id")]
		public Types.Core.Id ModelId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class JoinProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class JsonProcessor : ProcessorBase
	{
		[JsonPropertyName("add_to_root")]
		public bool AddToRoot
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class KeyValueProcessor : ProcessorBase
	{
		[JsonPropertyName("exclude_keys")]
		public IReadOnlyCollection<string>? ExcludeKeys
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("field_split")]
		public string FieldSplit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("include_keys")]
		public IReadOnlyCollection<string>? IncludeKeys
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("prefix")]
		public string? Prefix
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("strip_brackets")]
		public bool? StripBrackets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_key")]
		public string? TrimKey
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim_value")]
		public string? TrimValue
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value_split")]
		public string ValueSplit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LowercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PipelineProcessor : ProcessorBase
	{
		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ProcessorBase
	{
		[JsonPropertyName("if")]
		public string? If
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("on_failure")]
		public IReadOnlyCollection<ProcessorContainer>? OnFailure
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("tag")]
		public string? Tag
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ProcessorContainer
	{
		[JsonPropertyName("append")]
		public Types.Ingest.AppendProcessor? Append
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("attachment")]
		public Types.Ingest.AttachmentProcessor? Attachment
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes")]
		public Types.Ingest.BytesProcessor? Bytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("circle")]
		public Types.Ingest.CircleProcessor? Circle
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("convert")]
		public Types.Ingest.ConvertProcessor? Convert
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("csv")]
		public Types.Ingest.CsvProcessor? Csv
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date")]
		public Types.Ingest.DateProcessor? Date
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("date_index_name")]
		public Types.Ingest.DateIndexNameProcessor? DateIndexName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dissect")]
		public Types.Ingest.DissectProcessor? Dissect
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("dot_expander")]
		public Types.Ingest.DotExpanderProcessor? DotExpander
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("drop")]
		public Types.Ingest.DropProcessor? Drop
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("enrich")]
		public Types.Ingest.EnrichProcessor? Enrich
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fail")]
		public Types.Ingest.FailProcessor? Fail
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("foreach")]
		public Types.Ingest.ForeachProcessor? Foreach
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("geoip")]
		public Types.Ingest.GeoIpProcessor? Geoip
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grok")]
		public Types.Ingest.GrokProcessor? Grok
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("gsub")]
		public Types.Ingest.GsubProcessor? Gsub
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inference")]
		public Types.Ingest.InferenceProcessor? Inference
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("join")]
		public Types.Ingest.JoinProcessor? Join
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("json")]
		public Types.Ingest.JsonProcessor? Json
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("kv")]
		public Types.Ingest.KeyValueProcessor? Kv
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lowercase")]
		public Types.Ingest.LowercaseProcessor? Lowercase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("pipeline")]
		public Types.Ingest.PipelineProcessor? Pipeline
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("remove")]
		public Types.Ingest.RemoveProcessor? Remove
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("rename")]
		public Types.Ingest.RenameProcessor? Rename
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Types.Core.Script? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set")]
		public Types.Ingest.SetProcessor? Set
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("set_security_user")]
		public Types.Ingest.SetSecurityUserProcessor? SetSecurityUser
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public Types.Ingest.SortProcessor? Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("split")]
		public Types.Ingest.SplitProcessor? Split
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("trim")]
		public Types.Ingest.TrimProcessor? Trim
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("uppercase")]
		public Types.Ingest.UppercaseProcessor? Uppercase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("urldecode")]
		public Types.Ingest.UrlDecodeProcessor? Urldecode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("user_agent")]
		public Types.Ingest.UserAgentProcessor? UserAgent
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RemoveProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Fields Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RenameProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SetProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("override")]
		public bool? Override
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public object Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SetSecurityUserProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("properties")]
		public IReadOnlyCollection<string>? Properties
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SortProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public Types.Core.SortOrder Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SplitProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("preserve_trailing")]
		public bool? PreserveTrailing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("separator")]
		public string Separator
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class TrimProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UppercaseProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UrlDecodeProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool? IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field? TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class UserAgentProcessor : ProcessorBase
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ignore_missing")]
		public bool IgnoreMissing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("options")]
		public IReadOnlyCollection<UserAgentProperty> Options
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("regex_file")]
		public string RegexFile
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("target_field")]
		public Types.Core.Field TargetField
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}