// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using Nest.Types.Analysis;
using Nest.Types.Core;
using Nest.Types.Mapping;
using Nest.Types.QueryDsl;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Types.Indices
{
	public partial class Alias
	{
		[JsonPropertyName("filter")]
		public Types.QueryDsl.QueryContainer? Filter { get; set; }

		[JsonPropertyName("index_routing")]
		public Types.Core.Routing? IndexRouting { get; set; }

		[JsonPropertyName("is_hidden")]
		public bool? IsHidden { get; set; }

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonPropertyName("routing")]
		public Types.Core.Routing? Routing { get; set; }

		[JsonPropertyName("search_routing")]
		public Types.Core.Routing? SearchRouting { get; set; }
	}

	public partial class AliasDefinition
	{
		[JsonPropertyName("filter")]
		public Types.QueryDsl.QueryContainer? Filter { get; set; }

		[JsonPropertyName("index_routing")]
		public string? IndexRouting { get; set; }

		[JsonPropertyName("is_write_index")]
		public bool? IsWriteIndex { get; set; }

		[JsonPropertyName("routing")]
		public string? Routing { get; set; }

		[JsonPropertyName("search_routing")]
		public string? SearchRouting { get; set; }
	}

	public partial class FielddataFrequencyFilter
	{
		[JsonPropertyName("max")]
		public double Max
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min")]
		public double Min
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_segment_size")]
		public int MinSegmentSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexRouting
	{
		[JsonPropertyName("allocation")]
		public Types.Indices.IndexRoutingAllocation? Allocation { get; set; }

		[JsonPropertyName("rebalance")]
		public Types.Indices.IndexRoutingRebalance? Rebalance { get; set; }
	}

	public partial class IndexRoutingAllocation
	{
		[JsonPropertyName("disk")]
		public Types.Indices.IndexRoutingAllocationDisk? Disk { get; set; }

		[JsonPropertyName("enable")]
		public Types.Indices.IndexRoutingAllocationOptions? Enable { get; set; }

		[JsonPropertyName("include")]
		public Types.Indices.IndexRoutingAllocationInclude? Include { get; set; }

		[JsonPropertyName("initial_recovery")]
		public Types.Indices.IndexRoutingAllocationInitialRecovery? InitialRecovery { get; set; }
	}

	public partial class IndexRoutingAllocationDisk
	{
		[JsonPropertyName("threshold_enabled")]
		public Union<bool, string> ThresholdEnabled { get; set; }
	}

	public partial class IndexRoutingAllocationInclude
	{
		[JsonPropertyName("_id")]
		public Types.Core.Id? Id { get; set; }

		[JsonPropertyName("_tier_preference")]
		public string? TierPreference { get; set; }
	}

	public partial class IndexRoutingAllocationInitialRecovery
	{
		[JsonPropertyName("_id")]
		public Types.Core.Id? Id { get; set; }
	}

	public partial class IndexRoutingRebalance
	{
		[JsonPropertyName("enable")]
		public Types.Indices.IndexRoutingRebalanceOptions Enable { get; set; }
	}

	public partial class IndexSettingBlocks
	{
		[JsonPropertyName("metadata")]
		public bool? Metadata { get; set; }

		[JsonPropertyName("read")]
		public bool? Read { get; set; }

		[JsonPropertyName("read_only")]
		public bool? ReadOnly { get; set; }

		[JsonPropertyName("read_only_allow_delete")]
		public bool? ReadOnlyAllowDelete { get; set; }

		[JsonPropertyName("write")]
		public Union<bool, string>? Write { get; set; }
	}

	public partial class IndexSettings
	{
		[JsonPropertyName("analysis")]
		public Types.Indices.IndexSettingsAnalysis? Analysis { get; set; }

		[JsonPropertyName("analyze.max_token_count")]
		public int? AnalyzeMaxTokenCount { get; set; }

		[JsonPropertyName("auto_expand_replicas")]
		public string? AutoExpandReplicas { get; set; }

		[JsonPropertyName("blocks")]
		public Types.Indices.IndexSettingBlocks? Blocks { get; set; }

		[JsonPropertyName("check_on_startup")]
		public Types.Indices.IndexCheckOnStartup? CheckOnStartup { get; set; }

		[JsonPropertyName("codec")]
		public string? Codec { get; set; }

		[JsonPropertyName("creation_date")]
		public Types.Core.DateString? CreationDate { get; set; }

		[JsonPropertyName("default_pipeline")]
		public Types.Core.PipelineName? DefaultPipeline { get; set; }

		[JsonPropertyName("final_pipeline")]
		public Types.Core.PipelineName? FinalPipeline { get; set; }

		[JsonPropertyName("format")]
		public Union<string, int>? Format { get; set; }

		[JsonPropertyName("gc_deletes")]
		public Types.Core.Time? GcDeletes { get; set; }

		[JsonPropertyName("hidden")]
		public Union<bool, string>? Hidden { get; set; }

		[JsonPropertyName("highlight.max_analyzed_offset")]
		public int? HighlightMaxAnalyzedOffset { get; set; }

		[JsonPropertyName("lifecycle")]
		public Types.Indices.IndexSettingsLifecycle? Lifecycle { get; set; }

		[JsonPropertyName("load_fixed_bitset_filters_eagerly")]
		public bool? LoadFixedBitsetFiltersEagerly { get; set; }

		[JsonPropertyName("max_docvalue_fields_search")]
		public int? MaxDocvalueFieldsSearch { get; set; }

		[JsonPropertyName("max_inner_result_window")]
		public int? MaxInnerResultWindow { get; set; }

		[JsonPropertyName("max_ngram_diff")]
		public int? MaxNgramDiff { get; set; }

		[JsonPropertyName("max_refresh_listeners")]
		public int? MaxRefreshListeners { get; set; }

		[JsonPropertyName("max_regex_length")]
		public int? MaxRegexLength { get; set; }

		[JsonPropertyName("max_rescore_window")]
		public int? MaxRescoreWindow { get; set; }

		[JsonPropertyName("max_result_window")]
		public int? MaxResultWindow { get; set; }

		[JsonPropertyName("max_script_fields")]
		public int? MaxScriptFields { get; set; }

		[JsonPropertyName("max_shingle_diff")]
		public int? MaxShingleDiff { get; set; }

		[JsonPropertyName("max_slices_per_scroll")]
		public int? MaxSlicesPerScroll { get; set; }

		[JsonPropertyName("max_terms_count")]
		public int? MaxTermsCount { get; set; }

		[JsonPropertyName("number_of_replicas")]
		public Union<int, string>? NumberOfReplicas { get; set; }

		[JsonPropertyName("number_of_routing_shards")]
		public int? NumberOfRoutingShards { get; set; }

		[JsonPropertyName("number_of_shards")]
		public Union<int, string>? NumberOfShards { get; set; }

		[JsonPropertyName("priority")]
		public Union<int, string>? Priority { get; set; }

		[JsonPropertyName("provided_name")]
		public Types.Core.Name? ProvidedName { get; set; }

		[JsonPropertyName("query_string.lenient")]
		public Union<bool, string>? QueryStringLenient { get; set; }

		[JsonPropertyName("refresh_interval")]
		public Types.Core.Time? RefreshInterval { get; set; }

		[JsonPropertyName("routing")]
		public Types.Indices.IndexRouting? Routing { get; set; }

		[JsonPropertyName("routing_partition_size")]
		public Union<int, string>? RoutingPartitionSize { get; set; }

		[JsonPropertyName("search.idle.after")]
		public Types.Core.Time? SearchIdleAfter { get; set; }

		[JsonPropertyName("soft_deletes.retention_lease.period")]
		public Types.Core.Time? SoftDeletesRetentionLeasePeriod { get; set; }

		[JsonPropertyName("top_metrics_max_size")]
		public int? TopMetricsMaxSize { get; set; }

		[JsonPropertyName("translog.durability")]
		public string? TranslogDurability { get; set; }

		[JsonPropertyName("uuid")]
		public Types.Core.Uuid? Uuid { get; set; }

		[JsonPropertyName("verified_before_close")]
		public Union<bool, string>? VerifiedBeforeClose { get; set; }

		[JsonPropertyName("version")]
		public Types.Indices.IndexVersioning? Version { get; set; }
	}

	public partial class IndexSettingsAnalysis
	{
		[JsonPropertyName("char_filter")]
		public Dictionary<string, CharFilter>? CharFilter { get; set; }
	}

	public partial class IndexSettingsLifecycle
	{
		[JsonPropertyName("name")]
		public Types.Core.Name Name { get; set; }
	}

	public partial class IndexState
	{
		[JsonPropertyName("aliases")]
		public Dictionary<IndexName, Alias>? Aliases { get; set; }

		[JsonPropertyName("mappings")]
		public Types.Mapping.TypeMapping? Mappings { get; set; }

		[JsonPropertyName("settings")]
		public Union<IndexSettings, IndexStatePrefixedSettings> Settings { get; set; }
	}

	public partial class IndexStatePrefixedSettings
	{
		[JsonPropertyName("index")]
		public Types.Indices.IndexSettings Index { get; set; }
	}

	public partial class IndexVersioning
	{
		[JsonPropertyName("created")]
		public Types.Core.VersionString Created { get; set; }
	}

	public partial class NumericFielddata
	{
		[JsonPropertyName("format")]
		public Types.Indices.NumericFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StringFielddata
	{
		[JsonPropertyName("format")]
		public Types.Indices.StringFielddataFormat Format
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class RolloverConditions
	{
		[JsonPropertyName("max_age")]
		public Types.Core.Time? MaxAge
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_docs")]
		public long? MaxDocs
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_primary_shard_size")]
		public Types.Core.ByteSize? MaxPrimaryShardSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_size")]
		public string? MaxSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardFileSizeInfo
	{
		[JsonPropertyName("average_size_in_bytes")]
		public long? AverageSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("count")]
		public long? Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_size_in_bytes")]
		public long? MaxSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("min_size_in_bytes")]
		public long? MinSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}