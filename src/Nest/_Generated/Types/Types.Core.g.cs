// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
// Run the following in the root of the repository:
//
// ------------------------------------------------

using Elastic.Transport.Products.Elasticsearch.Failures;
using Nest.Types.Cluster;
using Nest.Types.Indices;
using Nest.Types.QueryDsl;
using OneOf;
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

#nullable restore
namespace Nest.Types.Core
{
	public partial class Explanation
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail> Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ExplanationDetail
	{
		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("details")]
		public IReadOnlyCollection<ExplanationDetail>? Details
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public float Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PainlessExecutionPosition
	{
		[JsonPropertyName("end")]
		public int End
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("start")]
		public int Start
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldAndFormat
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field { get; set; }

		[JsonPropertyName("format")]
		public string? Format { get; set; }

		[JsonPropertyName("include_unmapped")]
		public bool? IncludeUnmapped { get; set; }
	}

	public partial class FieldCollapse
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field { get; set; }

		[JsonPropertyName("inner_hits")]
		public Union<InnerHits, IReadOnlyCollection<InnerHits>>? InnerHits { get; set; }

		[JsonPropertyName("max_concurrent_group_searches")]
		public int? MaxConcurrentGroupSearches { get; set; }
	}

	public partial class GeoDistanceSort
	{
		[JsonPropertyName("distance_type")]
		public Types.Core.GeoDistanceType? DistanceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("mode")]
		public Types.Core.SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public Types.Core.SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unit")]
		public Types.Core.DistanceUnit? Unit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class Highlight
	{
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonPropertyName("boundary_scanner")]
		public Types.Core.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonPropertyName("encoder")]
		public Types.Core.HighlighterEncoder? Encoder { get; set; }

		[JsonPropertyName("fields")]
		public Dictionary<Field, HighlightField> Fields { get; set; }

		[JsonPropertyName("fragmenter")]
		public Types.Core.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonPropertyName("highlight_query")]
		public Types.QueryDsl.QueryContainer? HighlightQuery { get; set; }

		[JsonPropertyName("max_analyzed_offset")]
		public Union<string, int>? MaxAnalyzedOffset { get; set; }

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonPropertyName("order")]
		public Types.Core.HighlighterOrder? Order { get; set; }

		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonPropertyName("tags_schema")]
		public Types.Core.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonPropertyName("type")]
		public Types.Core.HighlighterType? Type { get; set; }
	}

	public partial class HighlightField
	{
		[JsonPropertyName("boundary_chars")]
		public string? BoundaryChars { get; set; }

		[JsonPropertyName("boundary_max_scan")]
		public int? BoundaryMaxScan { get; set; }

		[JsonPropertyName("boundary_scanner")]
		public Types.Core.BoundaryScanner? BoundaryScanner { get; set; }

		[JsonPropertyName("boundary_scanner_locale")]
		public string? BoundaryScannerLocale { get; set; }

		[JsonPropertyName("field")]
		public Types.Core.Field? Field { get; set; }

		[JsonPropertyName("force_source")]
		public bool? ForceSource { get; set; }

		[JsonPropertyName("fragmenter")]
		public Types.Core.HighlighterFragmenter? Fragmenter { get; set; }

		[JsonPropertyName("fragment_offset")]
		public int? FragmentOffset { get; set; }

		[JsonPropertyName("fragment_size")]
		public int? FragmentSize { get; set; }

		[JsonPropertyName("highlight_query")]
		public Types.QueryDsl.QueryContainer? HighlightQuery { get; set; }

		[JsonPropertyName("matched_fields")]
		public Types.Core.Fields? MatchedFields { get; set; }

		[JsonPropertyName("max_fragment_length")]
		public int? MaxFragmentLength { get; set; }

		[JsonPropertyName("no_match_size")]
		public int? NoMatchSize { get; set; }

		[JsonPropertyName("number_of_fragments")]
		public int? NumberOfFragments { get; set; }

		[JsonPropertyName("order")]
		public Types.Core.HighlighterOrder? Order { get; set; }

		[JsonPropertyName("phrase_limit")]
		public int? PhraseLimit { get; set; }

		[JsonPropertyName("post_tags")]
		public IEnumerable<string>? PostTags { get; set; }

		[JsonPropertyName("pre_tags")]
		public IEnumerable<string>? PreTags { get; set; }

		[JsonPropertyName("require_field_match")]
		public bool? RequireFieldMatch { get; set; }

		[JsonPropertyName("tags_schema")]
		public Types.Core.HighlighterTagsSchema? TagsSchema { get; set; }

		[JsonPropertyName("type")]
		public Union<HighlighterType, string>? Type { get; set; }
	}

	public partial class Hit<TDocument>
	{
		[JsonPropertyName("_explanation")]
		public Types.Core.Explanation? Explanation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Dictionary<string, object>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("highlight")]
		public Dictionary<string, IReadOnlyCollection<string>>? Highlight
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_id")]
		public Types.Core.Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_ignored")]
		public IReadOnlyCollection<string>? Ignored
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_index")]
		public Types.Core.IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("inner_hits")]
		public Dictionary<string, InnerHitsResult>? InnerHits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("matched_queries")]
		public IReadOnlyCollection<string>? MatchedQueries
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public Types.Core.NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_primary_term")]
		public long? PrimaryTerm
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_routing")]
		public string? Routing
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public double? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_seq_no")]
		public Types.Core.SequenceNumber? SeqNo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_shard")]
		public string? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("sort")]
		public Types.Core.SortResults? Sort
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_source")]
		public TDocument? Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_type")]
		public Types.Core.DocType? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_version")]
		public Types.Core.VersionNumber? Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class HitsMetadata<T>
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<T>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHits
	{
		[JsonPropertyName("collapse")]
		public Types.Core.FieldCollapse? Collapse { get; set; }

		[JsonPropertyName("docvalue_fields")]
		public IEnumerable<FieldAndFormat>? DocvalueFields { get; set; }

		[JsonPropertyName("explain")]
		public bool? Explain { get; set; }

		[JsonPropertyName("fields")]
		public Types.Core.Fields? Fields { get; set; }

		[JsonPropertyName("from")]
		public int? From { get; set; }

		[JsonPropertyName("highlight")]
		public Types.Core.Highlight? Highlight { get; set; }

		[JsonPropertyName("ignore_unmapped")]
		public bool? IgnoreUnmapped { get; set; }

		[JsonPropertyName("name")]
		public Types.Core.Name? Name { get; set; }

		[JsonPropertyName("script_fields")]
		public Dictionary<Field, ScriptField>? ScriptFields { get; set; }

		[JsonPropertyName("seq_no_primary_term")]
		public bool? SeqNoPrimaryTerm { get; set; }

		[JsonPropertyName("size")]
		public int? Size { get; set; }

		[JsonPropertyName("sort")]
		public Types.Core.Sort? Sort { get; set; }

		[JsonPropertyName("_source")]
		public Union<bool, SourceFilter>? Source { get; set; }

		[JsonPropertyName("stored_field")]
		public Types.Core.Fields? StoredField { get; set; }

		[JsonPropertyName("track_scores")]
		public bool? TrackScores { get; set; }

		[JsonPropertyName("version")]
		public bool? Version { get; set; }
	}

	public partial class InnerHitsMetadata
	{
		[JsonPropertyName("hits")]
		public IReadOnlyCollection<Hit<Dictionary<string, object>>> Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_score")]
		public double? MaxScore
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public Union<TotalHits, long> Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InnerHitsResult
	{
		[JsonPropertyName("hits")]
		public Types.Core.InnerHitsMetadata Hits
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NestedIdentity
	{
		[JsonPropertyName("field")]
		public Types.Core.Field Field
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_nested")]
		public Types.Core.NestedIdentity? Nested
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("offset")]
		public int Offset
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScoreSort
	{
		[JsonPropertyName("mode")]
		public Types.Core.SortMode? Mode
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("order")]
		public Types.Core.SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptSort
	{
		[JsonPropertyName("order")]
		public Types.Core.SortOrder? Order
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public Types.Core.Script Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string? Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SortContainer
	{
		[JsonPropertyName("_doc")]
		public Types.Core.ScoreSort? Doc
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_geo_distance")]
		public Types.Core.GeoDistanceSort? GeoDistance
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_score")]
		public Types.Core.ScoreSort? Score
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("_script")]
		public Types.Core.ScriptSort? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class SourceFilter
	{
		[JsonPropertyName("exclude")]
		public Types.Core.Fields? Exclude { get; set; }

		[JsonPropertyName("excludes")]
		public Types.Core.Fields? Excludes { get; set; }

		[JsonPropertyName("include")]
		public Types.Core.Fields? Include { get; set; }

		[JsonPropertyName("includes")]
		public Types.Core.Fields? Includes { get; set; }
	}

	public partial class TotalHits
	{
		[JsonPropertyName("relation")]
		public Types.Core.TotalHitsRelation Relation
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("value")]
		public long Value
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class CompletionStats
	{
		[JsonPropertyName("fields")]
		public Dictionary<Field, FieldSizeUsage>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public Types.Core.ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class DocStats
	{
		[JsonPropertyName("count")]
		public long Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("deleted")]
		public long Deleted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class EmptyObject
	{
	}

	public partial class ErrorCause
	{
		[JsonPropertyName("bytes_limit")]
		public long? BytesLimit
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("bytes_wanted")]
		public long? BytesWanted
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("caused_by")]
		public Types.Core.ErrorCause? CausedBy
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("col")]
		public int? Col
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("column")]
		public int? Column
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failed_shards")]
		public IReadOnlyCollection<ShardFailure>? FailedShards
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("grouped")]
		public bool? Grouped
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("header")]
		public Types.Core.HttpHeaders? Header
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public Types.Core.IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_uuid")]
		public Types.Core.Uuid? IndexUuid
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lang")]
		public string? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("language")]
		public string? Language
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed_expired_feature")]
		public string? LicensedExpiredFeature
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("line")]
		public int? Line
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_buckets")]
		public int? MaxBuckets
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("phase")]
		public string? Phase
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("position")]
		public Types.Core.PainlessExecutionPosition? Position
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("processor_type")]
		public string? ProcessorType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("property_name")]
		public string? PropertyName
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public string Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_id")]
		public Types.Core.Ids? ResourceId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("resource_type")]
		public string? ResourceType
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("root_cause")]
		public IReadOnlyCollection<ErrorCause>? RootCause
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script")]
		public string? Script
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("script_stack")]
		public IReadOnlyCollection<string>? ScriptStack
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public Union<int, string>? Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stack_trace")]
		public string? StackTrace
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldMemoryUsage
	{
		[JsonPropertyName("memory_size")]
		public Types.Core.ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FieldSizeUsage
	{
		[JsonPropertyName("size")]
		public Types.Core.ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public long SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class FielddataStats
	{
		[JsonPropertyName("evictions")]
		public long? Evictions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fields")]
		public Dictionary<Field, FieldMemoryUsage>? Fields
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size")]
		public Types.Core.ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public long MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class IndexedScript : ScriptBase
	{
		[JsonPropertyName("id")]
		public Types.Core.Id Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class InlineScript : ScriptBase
	{
		[JsonPropertyName("source")]
		public string Source
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class LatLon
	{
		[JsonPropertyName("lat")]
		public double Lat
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("lon")]
		public double Lon
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeAttributes
	{
		[JsonPropertyName("attributes")]
		public Dictionary<string, string> Attributes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("ephemeral_id")]
		public Types.Core.Id EphemeralId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("id")]
		public Types.Core.Id? Id
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.NodeName Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("roles")]
		public Types.Core.NodeRoles? Roles
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("transport_address")]
		public Types.Core.TransportAddress TransportAddress
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeShard
	{
		[JsonPropertyName("allocation_id")]
		public Dictionary<string, Id>? AllocationId
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index")]
		public Types.Core.IndexName Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public Types.Core.NodeName? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("primary")]
		public bool Primary
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("recovery_source")]
		public Dictionary<string, Id>? RecoverySource
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("state")]
		public Types.Indices.ShardRoutingState State
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("unassigned_info")]
		public Types.Cluster.UnassignedInformation? UnassignedInfo
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class NodeStatistics
	{
		[JsonPropertyName("failed")]
		public int Failed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("failures")]
		public IReadOnlyCollection<ErrorCause>? Failures
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("successful")]
		public int Successful
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total")]
		public int Total
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class PluginStats
	{
		[JsonPropertyName("classname")]
		public string Classname
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("description")]
		public string Description
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("elasticsearch_version")]
		public Types.Core.VersionString ElasticsearchVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("extended_plugins")]
		public IReadOnlyCollection<string> ExtendedPlugins
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("has_native_controller")]
		public bool HasNativeController
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("java_version")]
		public Types.Core.VersionString JavaVersion
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("licensed")]
		public bool Licensed
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("name")]
		public Types.Core.Name Name
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("type")]
		public string Type
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version")]
		public Types.Core.VersionString Version
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class QueryCacheStats
	{
		[JsonPropertyName("cache_count")]
		public int CacheCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("cache_size")]
		public int CacheSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("evictions")]
		public int Evictions
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("hit_count")]
		public int HitCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size")]
		public Types.Core.ByteSize? MemorySize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_size_in_bytes")]
		public int MemorySizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("miss_count")]
		public int MissCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_count")]
		public int TotalCount
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptBase
	{
		[JsonPropertyName("lang")]
		public Types.Core.ScriptLanguage? Lang
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("params")]
		public Dictionary<string, object>? Params
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ScriptField
	{
		[JsonPropertyName("ignore_failure")]
		public bool? IgnoreFailure { get; set; }

		[JsonPropertyName("script")]
		public Types.Core.Script Script { get; set; }
	}

	public partial class SegmentsStats
	{
		[JsonPropertyName("count")]
		public int Count
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory")]
		public Types.Core.ByteSize? DocValuesMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("doc_values_memory_in_bytes")]
		public int DocValuesMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("file_sizes")]
		public Dictionary<string, ShardFileSizeInfo> FileSizes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set")]
		public Types.Core.ByteSize? FixedBitSet
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("fixed_bit_set_memory_in_bytes")]
		public int FixedBitSetMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_max_memory_in_bytes")]
		public int? IndexWriterMaxMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory")]
		public Types.Core.ByteSize? IndexWriterMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("index_writer_memory_in_bytes")]
		public int IndexWriterMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("max_unsafe_auto_id_timestamp")]
		public int MaxUnsafeAutoIdTimestamp
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory")]
		public Types.Core.ByteSize? Memory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("memory_in_bytes")]
		public int MemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory")]
		public Types.Core.ByteSize? NormsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("norms_memory_in_bytes")]
		public int NormsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory")]
		public Types.Core.ByteSize? PointsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("points_memory_in_bytes")]
		public int PointsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_fields_memory_in_bytes")]
		public int StoredFieldsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("stored_memory")]
		public Types.Core.ByteSize? StoredMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory")]
		public Types.Core.ByteSize? TermsMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("terms_memory_in_bytes")]
		public int TermsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectors_memory_in_bytes")]
		public int TermVectorsMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("term_vectory_memory")]
		public Types.Core.ByteSize? TermVectoryMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory")]
		public Types.Core.ByteSize? VersionMapMemory
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("version_map_memory_in_bytes")]
		public int VersionMapMemoryInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class ShardFailure
	{
		[JsonPropertyName("index")]
		public Types.Core.IndexName? Index
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("node")]
		public string? Node
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reason")]
		public Types.Core.ErrorCause Reason
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("shard")]
		public int Shard
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("status")]
		public string? Status
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}

	public partial class StoreStats
	{
		[JsonPropertyName("reserved")]
		public Types.Core.ByteSize? Reserved
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("reserved_in_bytes")]
		public int ReservedInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size")]
		public Types.Core.ByteSize? Size
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("size_in_bytes")]
		public int SizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_data_set_size")]
		public Types.Core.ByteSize? TotalDataSetSize
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}

		[JsonPropertyName("total_data_set_size_in_bytes")]
		public int? TotalDataSetSizeInBytes
		{
			get;
#if NET5_0
			init;
#else
			internal set;
#endif
		}
	}
}