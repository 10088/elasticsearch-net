using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

//This file lays the base for all the descriptors based on the query string parameters in the spec for IElasticClient.
//This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
//Generated of commit 

namespace Nest
{
	
	///<summary>descriptor for Bulk <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html</pre></summary>
	public partial class BulkDescriptor 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public BulkDescriptor Consistency(Consistency consistency) => _requestParams(p=>p.Consistency(consistency));

		///<summary>Refresh the index after performing the operation</summary>
		public BulkDescriptor Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public BulkDescriptor Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Explicit operation timeout</summary>
		public BulkDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Default document type for items which don&#39;t provide one</summary>
		public BulkDescriptor TypeQueryString(string type) => _requestParams(p=>p.Type(type));

		///<summary>Default comma-separated list of fields to return in the response for updates</summary>
		public BulkDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>Default comma-separated list of fields to return in the response for updates</summary>
		public BulkDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>The URL-encoded request definition</summary>
		public BulkDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public BulkDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatAliases <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html</pre></summary>
	public partial class CatAliasesDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatAliasesDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatAliasesDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatAliasesDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatAliasesDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatAliasesDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatAliasesDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatAliasesDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatAllocation <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html</pre></summary>
	public partial class CatAllocationDescriptor 
	{
		///<summary>The unit in which to display byte values</summary>
		public CatAllocationDescriptor Bytes(Bytes bytes) => _requestParams(p=>p.Bytes(bytes));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatAllocationDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatAllocationDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatAllocationDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatAllocationDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatAllocationDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatAllocationDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatAllocationDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatCount <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html</pre></summary>
	public partial class CatCountDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatCountDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatCountDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatCountDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatCountDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatCountDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatCountDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatCountDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatFielddata <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</pre></summary>
	public partial class CatFielddataDescriptor 
	{
		///<summary>The unit in which to display byte values</summary>
		public CatFielddataDescriptor Bytes(Bytes bytes) => _requestParams(p=>p.Bytes(bytes));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatFielddataDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatFielddataDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatFielddataDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatFielddataDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatFielddataDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>A comma-separated list of fields to return in the output</summary>
		public CatFielddataDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return in the output</summary>
		public CatFielddataDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>The URL-encoded request definition</summary>
		public CatFielddataDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatFielddataDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatHealth <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html</pre></summary>
	public partial class CatHealthDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatHealthDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatHealthDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatHealthDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatHealthDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Set to false to disable timestamping</summary>
		public CatHealthDescriptor Ts(bool ts = true) => _requestParams(p=>p.Ts(ts));

		///<summary>Verbose mode. Display column headers</summary>
		public CatHealthDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatHealthDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatHealthDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatHelp <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html</pre></summary>
	public partial class CatHelpDescriptor  : BasePathDescriptor<CatHelpDescriptor,CatHelpRequestParameters>
	{
		///<summary>Return help information</summary>
		public CatHelpDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>The URL-encoded request definition</summary>
		public CatHelpDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatHelpDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatHelpRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		} 
	
	}
	
	///<summary>descriptor for CatIndices <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html</pre></summary>
	public partial class CatIndicesDescriptor 
	{
		///<summary>The unit in which to display byte values</summary>
		public CatIndicesDescriptor Bytes(Bytes bytes) => _requestParams(p=>p.Bytes(bytes));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatIndicesDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatIndicesDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatIndicesDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatIndicesDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Set to true to return stats only for primary shards</summary>
		public CatIndicesDescriptor Pri(bool pri = true) => _requestParams(p=>p.Pri(pri));

		///<summary>Verbose mode. Display column headers</summary>
		public CatIndicesDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatIndicesDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatIndicesDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatMaster <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html</pre></summary>
	public partial class CatMasterDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatMasterDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatMasterDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatMasterDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatMasterDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatMasterDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatMasterDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatMasterDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatNodeattrs <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html</pre></summary>
	public partial class CatNodeattrsDescriptor  : BasePathDescriptor<CatNodeattrsDescriptor,CatNodeattrsRequestParameters>
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatNodeattrsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatNodeattrsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatNodeattrsDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatNodeattrsDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatNodeattrsDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatNodeattrsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatNodeattrsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatNodeattrsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		} 
	
	}
	
	///<summary>descriptor for CatNodes <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html</pre></summary>
	public partial class CatNodesDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatNodesDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatNodesDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatNodesDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatNodesDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatNodesDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatNodesDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatNodesDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatPendingTasks <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html</pre></summary>
	public partial class CatPendingTasksDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatPendingTasksDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatPendingTasksDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatPendingTasksDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatPendingTasksDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatPendingTasksDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatPendingTasksDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatPendingTasksDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatPlugins <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</pre></summary>
	public partial class CatPluginsDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatPluginsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatPluginsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatPluginsDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatPluginsDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatPluginsDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatPluginsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatPluginsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatRecovery <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html</pre></summary>
	public partial class CatRecoveryDescriptor 
	{
		///<summary>The unit in which to display byte values</summary>
		public CatRecoveryDescriptor Bytes(Bytes bytes) => _requestParams(p=>p.Bytes(bytes));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatRecoveryDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatRecoveryDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatRecoveryDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatRecoveryDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatRecoveryDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatRecoveryDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatSegments <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</pre></summary>
	public partial class CatSegmentsDescriptor 
	{
		///<summary>Comma-separated list of column names to display</summary>
		public CatSegmentsDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatSegmentsDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatSegmentsDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatSegmentsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatSegmentsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatShards <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html</pre></summary>
	public partial class CatShardsDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatShardsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatShardsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatShardsDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatShardsDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatShardsDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>The URL-encoded request definition</summary>
		public CatShardsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatShardsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CatThreadPool <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</pre></summary>
	public partial class CatThreadPoolDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public CatThreadPoolDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public CatThreadPoolDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Comma-separated list of column names to display</summary>
		public CatThreadPoolDescriptor H(params string[] h) => _requestParams(p=>p.H(h));

		///<summary>Return help information</summary>
		public CatThreadPoolDescriptor Help(bool help = true) => _requestParams(p=>p.Help(help));

		///<summary>Verbose mode. Display column headers</summary>
		public CatThreadPoolDescriptor V(bool v = true) => _requestParams(p=>p.V(v));

		///<summary>Enables displaying the complete node ids</summary>
		public CatThreadPoolDescriptor FullId(bool full_id = true) => _requestParams(p=>p.FullId(full_id));

		///<summary>The URL-encoded request definition</summary>
		public CatThreadPoolDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CatThreadPoolDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClearScroll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html</pre></summary>
	public partial class ClearScrollDescriptor 
	{
		///<summary>The URL-encoded request definition</summary>
		public ClearScrollDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClearScrollDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterGetSettings <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html</pre></summary>
	public partial class ClusterGetSettingsDescriptor 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterGetSettingsDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterGetSettingsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public ClusterGetSettingsDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>The URL-encoded request definition</summary>
		public ClusterGetSettingsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterGetSettingsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterHealth <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html</pre></summary>
	public partial class ClusterHealthDescriptor 
	{
		///<summary>Specify the level of detail for returned information</summary>
		public ClusterHealthDescriptor Level(Level level) => _requestParams(p=>p.Level(level));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterHealthDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterHealthDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public ClusterHealthDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Wait until the specified number of shards is active</summary>
		public ClusterHealthDescriptor WaitForActiveShards(long wait_for_active_shards) => _requestParams(p=>p.WaitForActiveShards(wait_for_active_shards));

		///<summary>Wait until the specified number of nodes is available</summary>
		public ClusterHealthDescriptor WaitForNodes(string wait_for_nodes) => _requestParams(p=>p.WaitForNodes(wait_for_nodes));

		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public ClusterHealthDescriptor WaitForRelocatingShards(long wait_for_relocating_shards) => _requestParams(p=>p.WaitForRelocatingShards(wait_for_relocating_shards));

		///<summary>Wait until cluster is in a specific state</summary>
		public ClusterHealthDescriptor WaitForStatus(WaitForStatus wait_for_status) => _requestParams(p=>p.WaitForStatus(wait_for_status));

		///<summary>The URL-encoded request definition</summary>
		public ClusterHealthDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterHealthDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterPendingTasks <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html</pre></summary>
	public partial class ClusterPendingTasksDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterPendingTasksDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Specify timeout for connection to master</summary>
		public ClusterPendingTasksDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public ClusterPendingTasksDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterPendingTasksDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterPutSettings <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html</pre></summary>
	public partial class ClusterSettingsDescriptor 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterSettingsDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterSettingsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public ClusterSettingsDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>The URL-encoded request definition</summary>
		public ClusterSettingsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterSettingsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterReroute <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html</pre></summary>
	public partial class ClusterRerouteDescriptor 
	{
		///<summary>Simulate the operation only and return the resulting state</summary>
		public ClusterRerouteDescriptor DryRun(bool dry_run = true) => _requestParams(p=>p.DryRun(dry_run));

		///<summary>Return an explanation of why the commands can or cannot be executed</summary>
		public ClusterRerouteDescriptor Explain(bool explain = true) => _requestParams(p=>p.Explain(explain));

		///<summary>Limit the information returned to the specified metrics. Defaults to all but metadata</summary>
		public ClusterRerouteDescriptor Metric(params string[] metric) => _requestParams(p=>p.Metric(metric));

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterRerouteDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public ClusterRerouteDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>The URL-encoded request definition</summary>
		public ClusterRerouteDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterRerouteDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterState <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html</pre></summary>
	public partial class ClusterStateDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterStateDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Specify timeout for connection to master</summary>
		public ClusterStateDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterStateDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public ClusterStateDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public ClusterStateDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ClusterStateDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public ClusterStateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterStateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ClusterStats <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html</pre></summary>
	public partial class ClusterStatsDescriptor 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public ClusterStatsDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public ClusterStatsDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public ClusterStatsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClusterStatsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Count <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html</pre></summary>
	public partial class CountDescriptor<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public CountDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public CountDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public CountDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public CountDescriptor<T> MinScore(double min_score) => _requestParams(p=>p.MinScore(min_score));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value</summary>
		public CountDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Query in the Lucene query string syntax</summary>
		public CountDescriptor<T> Q(string q) => _requestParams(p=>p.Q(q));

		///<summary>The analyzer to use for the query string</summary>
		public CountDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public CountDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true) => _requestParams(p=>p.AnalyzeWildcard(analyze_wildcard));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public CountDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public CountDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public CountDescriptor<T> Lenient(bool lenient = true) => _requestParams(p=>p.Lenient(lenient));

		///<summary>Specify whether query terms should be lowercased</summary>
		public CountDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true) => _requestParams(p=>p.LowercaseExpandedTerms(lowercase_expanded_terms));

		///<summary>The URL-encoded request definition</summary>
		public CountDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CountDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for CountPercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class PercolateCountDescriptor<T> 
	{
		///<summary>A comma-separated list of specific routing values</summary>
		public PercolateCountDescriptor<T> Routing(params string[] routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public PercolateCountDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public PercolateCountDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public PercolateCountDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public PercolateCountDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The index to count percolate the document into. Defaults to index.</summary>
		public PercolateCountDescriptor<T> PercolateIndex(string percolate_index) => _requestParams(p=>p.PercolateIndex(percolate_index));

		///<summary>The type to count percolate document into. Defaults to type.</summary>
		public PercolateCountDescriptor<T> PercolateType(string percolate_type) => _requestParams(p=>p.PercolateType(percolate_type));

		///<summary>Explicit version number for concurrency control</summary>
		public PercolateCountDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public PercolateCountDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public PercolateCountDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PercolateCountDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Delete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html</pre></summary>
	public partial class DeleteDescriptor<T> 
	{
		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteDescriptor<T> Consistency(Consistency consistency) => _requestParams(p=>p.Consistency(consistency));

		///<summary>ID of parent document</summary>
		public DeleteDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Refresh the index after performing the operation</summary>
		public DeleteDescriptor<T> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public DeleteDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Explicit operation timeout</summary>
		public DeleteDescriptor<T> Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Explicit version number for concurrency control</summary>
		public DeleteDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public DeleteDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public DeleteDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for DeleteByQuery <pre>https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html</pre></summary>
	public partial class DeleteByQueryDescriptor<T> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public DeleteByQueryDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public DeleteByQueryDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public DeleteByQueryDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public DeleteByQueryDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public DeleteByQueryDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public DeleteByQueryDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Query in the Lucene query string syntax</summary>
		public DeleteByQueryDescriptor<T> Q(string q) => _requestParams(p=>p.Q(q));

		///<summary>Specific routing value</summary>
		public DeleteByQueryDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public DeleteByQueryDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Explicit operation timeout</summary>
		public DeleteByQueryDescriptor<T> Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteByQueryDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for DeleteScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class DeleteScriptDescriptor 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public DeleteScriptDescriptor Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public DeleteScriptDescriptor VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public DeleteScriptDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteScriptDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for DeleteTemplate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class DeleteTemplateDescriptor 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public DeleteTemplateDescriptor Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public DeleteTemplateDescriptor VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public DeleteTemplateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteTemplateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Exists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class DocumentExistsDescriptor<T> 
	{
		///<summary>The ID of the parent document</summary>
		public DocumentExistsDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public DocumentExistsDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public DocumentExistsDescriptor<T> Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public DocumentExistsDescriptor<T> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public DocumentExistsDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>The URL-encoded request definition</summary>
		public DocumentExistsDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DocumentExistsDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for ExplainGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html</pre></summary>
	public partial class ExplainDescriptor<T> 
	{
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public ExplainDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true) => _requestParams(p=>p.AnalyzeWildcard(analyze_wildcard));

		///<summary>The analyzer for the query string query</summary>
		public ExplainDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public ExplainDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The default field for query string query (default: _all)</summary>
		public ExplainDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainDescriptor<T> Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainDescriptor<T> Fields(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ExplainDescriptor<T> Lenient(bool lenient = true) => _requestParams(p=>p.Lenient(lenient));

		///<summary>Specify whether query terms should be lowercased</summary>
		public ExplainDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true) => _requestParams(p=>p.LowercaseExpandedTerms(lowercase_expanded_terms));

		///<summary>The ID of the parent document</summary>
		public ExplainDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExplainDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Query in the Lucene query string syntax</summary>
		public ExplainDescriptor<T> Q(string q) => _requestParams(p=>p.Q(q));

		///<summary>Specific routing value</summary>
		public ExplainDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public ExplainDescriptor<T> SourceEnabled(params string[] source_enabled) => _requestParams(p=>p.SourceEnabled(source_enabled));

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainDescriptor<T> SourceExclude(params string[] source_exclude) => _requestParams(p=>p.SourceExclude(source_exclude));
			
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainDescriptor<T> SourceExclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceExclude(fields));

		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainDescriptor<T> SourceInclude(params string[] source_include) => _requestParams(p=>p.SourceInclude(source_include));
			
		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainDescriptor<T> SourceInclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceInclude(fields));

		///<summary>The URL-encoded request definition</summary>
		public ExplainDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ExplainDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for FieldStatsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</pre></summary>
	public partial class FieldStatsDescriptor 
	{
		///<summary>A comma-separated list of fields for to get field statistics for (min value, max value, and more)</summary>
		public FieldStatsDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields for to get field statistics for (min value, max value, and more)</summary>
		public FieldStatsDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Defines if field stats should be returned on a per index level or on a cluster wide level</summary>
		public FieldStatsDescriptor Level(Level level) => _requestParams(p=>p.Level(level));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public FieldStatsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public FieldStatsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public FieldStatsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public FieldStatsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public FieldStatsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Get <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class GetDescriptor<T> 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetDescriptor<T> Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetDescriptor<T> Fields(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._Fields(fields));

		///<summary>The ID of the parent document</summary>
		public GetDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetDescriptor<T> Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetDescriptor<T> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public GetDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetDescriptor<T> SourceEnabled(params string[] source_enabled) => _requestParams(p=>p.SourceEnabled(source_enabled));

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetDescriptor<T> SourceExclude(params string[] source_exclude) => _requestParams(p=>p.SourceExclude(source_exclude));
			
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetDescriptor<T> SourceExclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceExclude(fields));

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetDescriptor<T> SourceInclude(params string[] source_include) => _requestParams(p=>p.SourceInclude(source_include));
			
		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetDescriptor<T> SourceInclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceInclude(fields));

		///<summary>Explicit version number for concurrency control</summary>
		public GetDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public GetDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public GetDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for GetScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class GetScriptDescriptor 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public GetScriptDescriptor Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public GetScriptDescriptor VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public GetScriptDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetScriptDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for GetSource <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class SourceDescriptor<T> 
	{
		///<summary>The ID of the parent document</summary>
		public SourceDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SourceDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public SourceDescriptor<T> Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public SourceDescriptor<T> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public SourceDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public SourceDescriptor<T> SourceEnabled(params string[] source_enabled) => _requestParams(p=>p.SourceEnabled(source_enabled));

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SourceDescriptor<T> SourceExclude(params string[] source_exclude) => _requestParams(p=>p.SourceExclude(source_exclude));
			
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SourceDescriptor<T> SourceExclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceExclude(fields));

		///<summary>A list of fields to extract and return from the _source field</summary>
		public SourceDescriptor<T> SourceInclude(params string[] source_include) => _requestParams(p=>p.SourceInclude(source_include));
			
		///<summary>A list of fields to extract and return from the _source field</summary>
		public SourceDescriptor<T> SourceInclude(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._SourceInclude(fields));

		///<summary>Explicit version number for concurrency control</summary>
		public SourceDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public SourceDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public SourceDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SourceDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for GetTemplate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class GetTemplateDescriptor 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public GetTemplateDescriptor Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public GetTemplateDescriptor VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public GetTemplateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetTemplateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Index <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html</pre></summary>
	public partial class IndexDescriptor<T> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public IndexDescriptor<T> Consistency(Consistency consistency) => _requestParams(p=>p.Consistency(consistency));

		///<summary>Explicit operation type</summary>
		public IndexDescriptor<T> OpType(OpType op_type) => _requestParams(p=>p.OpType(op_type));

		///<summary>ID of the parent document</summary>
		public IndexDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Refresh the index after performing the operation</summary>
		public IndexDescriptor<T> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specific routing value</summary>
		public IndexDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Explicit operation timeout</summary>
		public IndexDescriptor<T> Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Explicit timestamp for the document</summary>
		public IndexDescriptor<T> Timestamp(string timestamp) => _requestParams(p=>p.Timestamp(timestamp));

		///<summary>Expiration time for the document</summary>
		public IndexDescriptor<T> Ttl(string ttl) => _requestParams(p=>p.Ttl(ttl));

		///<summary>Explicit version number for concurrency control</summary>
		public IndexDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public IndexDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public IndexDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public IndexDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesAnalyzeGetForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html</pre></summary>
	public partial class AnalyzeDescriptor 
	{
		///<summary>The name of the analyzer to use</summary>
		public AnalyzeDescriptor Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>A comma-separated list of character filters to use for the analysis</summary>
		public AnalyzeDescriptor CharFilters(params string[] char_filters) => _requestParams(p=>p.CharFilters(char_filters));

		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public AnalyzeDescriptor Field(string field) => _requestParams(p=>p.Field(field));

		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public AnalyzeDescriptor Field<T>(Expression<Func<T, object>> field) where T : class =>
			_requestParams(p=>p._Field(field));

		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public AnalyzeDescriptor Filters(params string[] filters) => _requestParams(p=>p.Filters(filters));

		///<summary>The name of the index to scope the operation</summary>
		public AnalyzeDescriptor IndexQueryString(string index) => _requestParams(p=>p.Index(index));

		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public AnalyzeDescriptor PreferLocal(bool prefer_local = true) => _requestParams(p=>p.PreferLocal(prefer_local));

		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public AnalyzeDescriptor Text(params string[] text) => _requestParams(p=>p.Text(text));

		///<summary>The name of the tokenizer to use for the analysis</summary>
		public AnalyzeDescriptor Tokenizer(string tokenizer) => _requestParams(p=>p.Tokenizer(tokenizer));

		///<summary>Format of the output</summary>
		public AnalyzeDescriptor Format(Format format) => _requestParams(p=>p.Format(format));

		///<summary>The URL-encoded request definition</summary>
		public AnalyzeDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public AnalyzeDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesClearCacheForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html</pre></summary>
	public partial class ClearCacheDescriptor 
	{
		///<summary>Clear field data</summary>
		public ClearCacheDescriptor FieldData(bool field_data = true) => _requestParams(p=>p.FieldData(field_data));

		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public ClearCacheDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public ClearCacheDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Clear query caches</summary>
		public ClearCacheDescriptor Query(bool query = true) => _requestParams(p=>p.Query(query));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public ClearCacheDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public ClearCacheDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ClearCacheDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>A comma-separated list of index name to limit the operation</summary>
		public ClearCacheDescriptor IndexQueryString(params string[] index) => _requestParams(p=>p.Index(index));

		///<summary>Clear the recycler cache</summary>
		public ClearCacheDescriptor Recycler(bool recycler = true) => _requestParams(p=>p.Recycler(recycler));

		///<summary>Clear request cache</summary>
		public ClearCacheDescriptor Request(bool request = true) => _requestParams(p=>p.Request(request));

		///<summary>The URL-encoded request definition</summary>
		public ClearCacheDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ClearCacheDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesClose <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html</pre></summary>
	public partial class CloseIndexDescriptor 
	{
		///<summary>Explicit operation timeout</summary>
		public CloseIndexDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public CloseIndexDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public CloseIndexDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public CloseIndexDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public CloseIndexDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public CloseIndexDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CloseIndexDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesCreate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html</pre></summary>
	public partial class CreateIndexDescriptor 
	{
		///<summary>Explicit operation timeout</summary>
		public CreateIndexDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public CreateIndexDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether to update the mapping for all fields with the same name across all types or not</summary>
		public CreateIndexDescriptor UpdateAllTypes(bool update_all_types = true) => _requestParams(p=>p.UpdateAllTypes(update_all_types));

		///<summary>The URL-encoded request definition</summary>
		public CreateIndexDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CreateIndexDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesDelete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html</pre></summary>
	public partial class DeleteIndexDescriptor 
	{
		///<summary>Explicit operation timeout</summary>
		public DeleteIndexDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public DeleteIndexDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public DeleteIndexDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteIndexDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesDeleteAlias <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class DeleteAliasDescriptor<T> 
	{
		///<summary>Explicit timestamp for the document</summary>
		public DeleteAliasDescriptor<T> Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public DeleteAliasDescriptor<T> MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public DeleteAliasDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteAliasDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesDeleteWarmer <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class DeleteWarmerDescriptor 
	{
		///<summary>Specify timeout for connection to master</summary>
		public DeleteWarmerDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public DeleteWarmerDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteWarmerDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesExists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html</pre></summary>
	public partial class IndexExistsDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndexExistsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndexExistsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndexExistsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public IndexExistsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public IndexExistsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public IndexExistsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesExistsAliasForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class AliasExistsDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public AliasExistsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public AliasExistsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public AliasExistsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public AliasExistsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public AliasExistsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public AliasExistsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesExistsTemplateForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html</pre></summary>
	public partial class TemplateExistsDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public TemplateExistsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public TemplateExistsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public TemplateExistsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public TemplateExistsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesExistsType <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html</pre></summary>
	public partial class TypeExistsDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public TypeExistsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public TypeExistsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public TypeExistsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public TypeExistsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public TypeExistsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public TypeExistsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesFlushForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html</pre></summary>
	public partial class FlushDescriptor 
	{
		///<summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
		public FlushDescriptor Force(bool force = true) => _requestParams(p=>p.Force(force));

		///<summary>If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.</summary>
		public FlushDescriptor WaitIfOngoing(bool wait_if_ongoing = true) => _requestParams(p=>p.WaitIfOngoing(wait_if_ongoing));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public FlushDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public FlushDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public FlushDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public FlushDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public FlushDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesFlushSyncedForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</pre></summary>
	public partial class SyncedFlushDescriptor 
	{
		///<summary>The URL-encoded request definition</summary>
		public SyncedFlushDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SyncedFlushDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html</pre></summary>
	public partial class GetIndexDescriptor 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetIndexDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Ignore unavailable indexes (default: false)</summary>
		public GetIndexDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Ignore if a wildcard expression resolves to no concrete indices (default: false)</summary>
		public GetIndexDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether wildcard expressions should get expanded to open or closed indices (default: open)</summary>
		public GetIndexDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return settings in flat format (default: false)</summary>
		public GetIndexDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Whether to return version and creation date values in human-readable format.</summary>
		public GetIndexDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public GetIndexDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetIndexDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetAliasForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class GetAliasDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetAliasDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetAliasDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetAliasDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetAliasDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetAliasDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetAliasDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetAliasesForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class GetAliasesDescriptor 
	{
		///<summary>Explicit operation timeout</summary>
		public GetAliasesDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetAliasesDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetAliasesDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetAliasesDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetFieldMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html</pre></summary>
	public partial class GetFieldMappingDescriptor<T> 
	{
		///<summary>Whether the default mapping values should be returned as well</summary>
		public GetFieldMappingDescriptor<T> IncludeDefaults(bool include_defaults = true) => _requestParams(p=>p.IncludeDefaults(include_defaults));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetFieldMappingDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetFieldMappingDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetFieldMappingDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetFieldMappingDescriptor<T> Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetFieldMappingDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetFieldMappingDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html</pre></summary>
	public partial class GetMappingDescriptor<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetMappingDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetMappingDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetMappingDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetMappingDescriptor<T> Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetMappingDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetMappingDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetSettingsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html</pre></summary>
	public partial class GetIndexSettingsDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetIndexSettingsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetIndexSettingsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetIndexSettingsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return settings in flat format (default: false)</summary>
		public GetIndexSettingsDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetIndexSettingsDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Whether to return version and creation date values in human-readable format.</summary>
		public GetIndexSettingsDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public GetIndexSettingsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetIndexSettingsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetUpgradeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</pre></summary>
	public partial class UpgradeStatusDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public UpgradeStatusDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public UpgradeStatusDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public UpgradeStatusDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public UpgradeStatusDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public UpgradeStatusDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public UpgradeStatusDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesGetWarmerForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class GetWarmerDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public GetWarmerDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public GetWarmerDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public GetWarmerDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetWarmerDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetWarmerDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetWarmerDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesOpen <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html</pre></summary>
	public partial class OpenIndexDescriptor 
	{
		///<summary>Explicit operation timeout</summary>
		public OpenIndexDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public OpenIndexDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public OpenIndexDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public OpenIndexDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public OpenIndexDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public OpenIndexDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public OpenIndexDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesOptimizeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-optimize.html</pre></summary>
	public partial class OptimizeDescriptor 
	{
		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public OptimizeDescriptor Flush(bool flush = true) => _requestParams(p=>p.Flush(flush));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public OptimizeDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public OptimizeDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public OptimizeDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public OptimizeDescriptor MaxNumSegments(long max_num_segments) => _requestParams(p=>p.MaxNumSegments(max_num_segments));

		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public OptimizeDescriptor OnlyExpungeDeletes(bool only_expunge_deletes = true) => _requestParams(p=>p.OnlyExpungeDeletes(only_expunge_deletes));

		///<summary>TODO: ?</summary>
		public OptimizeDescriptor OperationThreading(string operation_threading) => _requestParams(p=>p.OperationThreading(operation_threading));

		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public OptimizeDescriptor WaitForMerge(bool wait_for_merge = true) => _requestParams(p=>p.WaitForMerge(wait_for_merge));

		///<summary>The URL-encoded request definition</summary>
		public OptimizeDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public OptimizeDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesPutAlias <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class PutAliasDescriptor 
	{
		///<summary>Explicit timestamp for the document</summary>
		public PutAliasDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public PutAliasDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public PutAliasDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PutAliasDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesPutMapping <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html</pre></summary>
	public partial class PutMappingDescriptor  : BasePathDescriptor<PutMappingDescriptor,PutMappingRequestParameters>
	{
		///<summary>Explicit operation timeout</summary>
		public PutMappingDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public PutMappingDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public PutMappingDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public PutMappingDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public PutMappingDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Whether to update the mapping for all fields with the same name across all types or not</summary>
		public PutMappingDescriptor UpdateAllTypes(bool update_all_types = true) => _requestParams(p=>p.UpdateAllTypes(update_all_types));

		///<summary>The URL-encoded request definition</summary>
		public PutMappingDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PutMappingDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<PutMappingRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		} 
	
	}
	
	///<summary>descriptor for IndicesPutSettingsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html</pre></summary>
	public partial class UpdateSettingsDescriptor 
	{
		///<summary>Specify timeout for connection to master</summary>
		public UpdateSettingsDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public UpdateSettingsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public UpdateSettingsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public UpdateSettingsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Return settings in flat format (default: false)</summary>
		public UpdateSettingsDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>The URL-encoded request definition</summary>
		public UpdateSettingsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public UpdateSettingsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesPutTemplateForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html</pre></summary>
	public partial class PutTemplateDescriptor 
	{
		///<summary>Whether the index template should only be added if new or can also replace an existing one</summary>
		public PutTemplateDescriptor Create(bool create = true) => _requestParams(p=>p.Create(create));

		///<summary>Explicit operation timeout</summary>
		public PutTemplateDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public PutTemplateDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Return settings in flat format (default: false)</summary>
		public PutTemplateDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>The URL-encoded request definition</summary>
		public PutTemplateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PutTemplateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesPutWarmerForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class PutWarmerDescriptor 
	{
		///<summary>Specify timeout for connection to master</summary>
		public PutWarmerDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
		public PutWarmerDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
		public PutWarmerDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
		public PutWarmerDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Specify whether the request to be warmed should use the request cache, defaults to index level setting</summary>
		public PutWarmerDescriptor RequestCache(bool request_cache = true) => _requestParams(p=>p.RequestCache(request_cache));

		///<summary>The URL-encoded request definition</summary>
		public PutWarmerDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PutWarmerDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesRecoveryForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</pre></summary>
	public partial class RecoveryStatusDescriptor 
	{
		///<summary>Whether to display detailed information about shard recovery</summary>
		public RecoveryStatusDescriptor Detailed(bool detailed = true) => _requestParams(p=>p.Detailed(detailed));

		///<summary>Display only those recoveries that are currently on-going</summary>
		public RecoveryStatusDescriptor ActiveOnly(bool active_only = true) => _requestParams(p=>p.ActiveOnly(active_only));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public RecoveryStatusDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public RecoveryStatusDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public RecoveryStatusDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesRefreshForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html</pre></summary>
	public partial class RefreshDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public RefreshDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public RefreshDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public RefreshDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Force a refresh even if not required</summary>
		public RefreshDescriptor Force(bool force = true) => _requestParams(p=>p.Force(force));

		///<summary>TODO: ?</summary>
		public RefreshDescriptor OperationThreading(string operation_threading) => _requestParams(p=>p.OperationThreading(operation_threading));

		///<summary>The URL-encoded request definition</summary>
		public RefreshDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public RefreshDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesSegmentsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html</pre></summary>
	public partial class SegmentsDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SegmentsDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SegmentsDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SegmentsDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public SegmentsDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>TODO: ?</summary>
		public SegmentsDescriptor OperationThreading(string operation_threading) => _requestParams(p=>p.OperationThreading(operation_threading));

		///<summary>The URL-encoded request definition</summary>
		public SegmentsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SegmentsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesShardStoresForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html</pre></summary>
	public partial class IndicesShardStoresDescriptor  : BasePathDescriptor<IndicesShardStoresDescriptor,IndicesShardStoresRequestParameters>
	{
		///<summary>A comma-separated list of statuses used to filter on shards to get store information for</summary>
		public IndicesShardStoresDescriptor Status(params string[] status) => _requestParams(p=>p.Status(status));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public IndicesShardStoresDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public IndicesShardStoresDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public IndicesShardStoresDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>TODO: ?</summary>
		public IndicesShardStoresDescriptor OperationThreading(string operation_threading) => _requestParams(p=>p.OperationThreading(operation_threading));

		///<summary>The URL-encoded request definition</summary>
		public IndicesShardStoresDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public IndicesShardStoresDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesShardStoresRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		} 
	
	}
	
	///<summary>descriptor for IndicesStatsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html</pre></summary>
	public partial class IndicesStatsDescriptor 
	{
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor CompletionFields(params string[] completion_fields) => _requestParams(p=>p.CompletionFields(completion_fields));
			
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor CompletionFields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._CompletionFields(fields));

		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor FielddataFields(params string[] fielddata_fields) => _requestParams(p=>p.FielddataFields(fielddata_fields));
			
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor FielddataFields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._FielddataFields(fields));

		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IndicesStatsDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public IndicesStatsDescriptor Groups(params string[] groups) => _requestParams(p=>p.Groups(groups));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public IndicesStatsDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>Return stats aggregated at cluster, index or shard level</summary>
		public IndicesStatsDescriptor Level(Level level) => _requestParams(p=>p.Level(level));

		///<summary>The URL-encoded request definition</summary>
		public IndicesStatsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public IndicesStatsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesUpdateAliasesForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class BulkAliasDescriptor 
	{
		///<summary>Request timeout</summary>
		public BulkAliasDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Specify timeout for connection to master</summary>
		public BulkAliasDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public BulkAliasDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public BulkAliasDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesUpgradeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</pre></summary>
	public partial class UpgradeDescriptor 
	{
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public UpgradeDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public UpgradeDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public UpgradeDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Specify whether the request should block until the all segments are upgraded (default: false)</summary>
		public UpgradeDescriptor WaitForCompletion(bool wait_for_completion = true) => _requestParams(p=>p.WaitForCompletion(wait_for_completion));

		///<summary>If true, only ancient (an older Lucene major release) segments will be upgraded</summary>
		public UpgradeDescriptor OnlyAncientSegments(bool only_ancient_segments = true) => _requestParams(p=>p.OnlyAncientSegments(only_ancient_segments));

		///<summary>The URL-encoded request definition</summary>
		public UpgradeDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public UpgradeDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for IndicesValidateQueryGetForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html</pre></summary>
	public partial class ValidateQueryDescriptor<T> 
	{
		///<summary>Return detailed information about the error</summary>
		public ValidateQueryDescriptor<T> Explain(bool explain = true) => _requestParams(p=>p.Explain(explain));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public ValidateQueryDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public ValidateQueryDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ValidateQueryDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>TODO: ?</summary>
		public ValidateQueryDescriptor<T> OperationThreading(string operation_threading) => _requestParams(p=>p.OperationThreading(operation_threading));

		///<summary>Query in the Lucene query string syntax</summary>
		public ValidateQueryDescriptor<T> Q(string q) => _requestParams(p=>p.Q(q));

		///<summary>The analyzer to use for the query string</summary>
		public ValidateQueryDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public ValidateQueryDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true) => _requestParams(p=>p.AnalyzeWildcard(analyze_wildcard));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public ValidateQueryDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public ValidateQueryDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ValidateQueryDescriptor<T> Lenient(bool lenient = true) => _requestParams(p=>p.Lenient(lenient));

		///<summary>Specify whether query terms should be lowercased</summary>
		public ValidateQueryDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true) => _requestParams(p=>p.LowercaseExpandedTerms(lowercase_expanded_terms));

		///<summary>Provide a more detailed explanation showing the actual Lucene query that will be executed.</summary>
		public ValidateQueryDescriptor<T> Rewrite(bool rewrite = true) => _requestParams(p=>p.Rewrite(rewrite));

		///<summary>The URL-encoded request definition</summary>
		public ValidateQueryDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ValidateQueryDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Info <pre>http://www.elastic.co/guide/</pre></summary>
	public partial class InfoDescriptor 
	{
		///<summary>The URL-encoded request definition</summary>
		public InfoDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public InfoDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for MgetGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html</pre></summary>
	public partial class MultiGetDescriptor 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public MultiGetDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public MultiGetDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public MultiGetDescriptor Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public MultiGetDescriptor Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public MultiGetDescriptor Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public MultiGetDescriptor SourceEnabled(params string[] source_enabled) => _requestParams(p=>p.SourceEnabled(source_enabled));

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MultiGetDescriptor SourceExclude(params string[] source_exclude) => _requestParams(p=>p.SourceExclude(source_exclude));
			
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MultiGetDescriptor SourceExclude<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._SourceExclude(fields));

		///<summary>A list of fields to extract and return from the _source field</summary>
		public MultiGetDescriptor SourceInclude(params string[] source_include) => _requestParams(p=>p.SourceInclude(source_include));
			
		///<summary>A list of fields to extract and return from the _source field</summary>
		public MultiGetDescriptor SourceInclude<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._SourceInclude(fields));

		///<summary>The URL-encoded request definition</summary>
		public MultiGetDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public MultiGetDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for MpercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class MultiPercolateDescriptor 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public MultiPercolateDescriptor IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public MultiPercolateDescriptor AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public MultiPercolateDescriptor ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public MultiPercolateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public MultiPercolateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for MsearchGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html</pre></summary>
	public partial class MultiSearchDescriptor 
	{
		///<summary>Search operation type</summary>
		public MultiSearchDescriptor SearchType(SearchType search_type) => _requestParams(p=>p.SearchType(search_type));

		///<summary>The URL-encoded request definition</summary>
		public MultiSearchDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public MultiSearchDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for MtermvectorsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html</pre></summary>
	public partial class MultiTermVectorsDescriptor<T> 
	{
		///<summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> TermStatistics(bool term_statistics = true) => _requestParams(p=>p.TermStatistics(term_statistics));

		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> FieldStatistics(bool field_statistics = true) => _requestParams(p=>p.FieldStatistics(field_statistics));

		///<summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Fields(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Offsets(bool offsets = true) => _requestParams(p=>p.Offsets(offsets));

		///<summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Positions(bool positions = true) => _requestParams(p=>p.Positions(positions));

		///<summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Payloads(bool payloads = true) => _requestParams(p=>p.Payloads(payloads));

		///<summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public MultiTermVectorsDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specifies if requests are real-time as opposed to near-real-time (default: true).</summary>
		public MultiTermVectorsDescriptor<T> Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Explicit version number for concurrency control</summary>
		public MultiTermVectorsDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public MultiTermVectorsDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public MultiTermVectorsDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public MultiTermVectorsDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for NodesHotThreadsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html</pre></summary>
	public partial class NodesHotThreadsDescriptor 
	{
		///<summary>The interval for the second sampling of threads</summary>
		public NodesHotThreadsDescriptor Interval(string interval) => _requestParams(p=>p.Interval(interval));

		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public NodesHotThreadsDescriptor Snapshots(long snapshots) => _requestParams(p=>p.Snapshots(snapshots));

		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public NodesHotThreadsDescriptor Threads(long threads) => _requestParams(p=>p.Threads(threads));

		///<summary>Don&#39;t show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)</summary>
		public NodesHotThreadsDescriptor IgnoreIdleThreads(bool ignore_idle_threads = true) => _requestParams(p=>p.IgnoreIdleThreads(ignore_idle_threads));

		///<summary>The type to sample (default: cpu)</summary>
		public NodesHotThreadsDescriptor ThreadType(ThreadType thread_type) => _requestParams(p=>p.ThreadType(thread_type));

		///<summary>The URL-encoded request definition</summary>
		public NodesHotThreadsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public NodesHotThreadsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for NodesInfoForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html</pre></summary>
	public partial class NodesInfoDescriptor 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public NodesInfoDescriptor FlatSettings(bool flat_settings = true) => _requestParams(p=>p.FlatSettings(flat_settings));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public NodesInfoDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>The URL-encoded request definition</summary>
		public NodesInfoDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public NodesInfoDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for NodesStatsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html</pre></summary>
	public partial class NodesStatsDescriptor 
	{
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor CompletionFields(params string[] completion_fields) => _requestParams(p=>p.CompletionFields(completion_fields));
			
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor CompletionFields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._CompletionFields(fields));

		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor FielddataFields(params string[] fielddata_fields) => _requestParams(p=>p.FielddataFields(fielddata_fields));
			
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor FielddataFields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._FielddataFields(fields));

		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public NodesStatsDescriptor Fields<T>(params Expression<Func<T, object>>[] fields) where T : class =>
			_requestParams(p=>p._Fields(fields));

		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public NodesStatsDescriptor Groups(bool groups = true) => _requestParams(p=>p.Groups(groups));

		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public NodesStatsDescriptor Human(bool human = true) => _requestParams(p=>p.Human(human));

		///<summary>Return indices stats aggregated at node, index or shard level</summary>
		public NodesStatsDescriptor Level(Level level) => _requestParams(p=>p.Level(level));

		///<summary>A comma-separated list of document types for the `indexing` index metric</summary>
		public NodesStatsDescriptor Types(params string[] types) => _requestParams(p=>p.Types(types));

		///<summary>The URL-encoded request definition</summary>
		public NodesStatsDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public NodesStatsDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for PercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class PercolateDescriptor<T> 
	{
		///<summary>A comma-separated list of specific routing values</summary>
		public PercolateDescriptor<T> Routing(params string[] routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public PercolateDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public PercolateDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public PercolateDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public PercolateDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The index to percolate the document into. Defaults to index.</summary>
		public PercolateDescriptor<T> PercolateIndex(string percolate_index) => _requestParams(p=>p.PercolateIndex(percolate_index));

		///<summary>The type to percolate document into. Defaults to type.</summary>
		public PercolateDescriptor<T> PercolateType(string percolate_type) => _requestParams(p=>p.PercolateType(percolate_type));

		///<summary>The routing value to use when percolating the existing document.</summary>
		public PercolateDescriptor<T> PercolateRouting(string percolate_routing) => _requestParams(p=>p.PercolateRouting(percolate_routing));

		///<summary>Which shard to prefer when executing the percolate request.</summary>
		public PercolateDescriptor<T> PercolatePreference(string percolate_preference) => _requestParams(p=>p.PercolatePreference(percolate_preference));

		///<summary>Return an array of matching query IDs instead of objects</summary>
		public PercolateDescriptor<T> PercolateFormat(PercolateFormat percolate_format) => _requestParams(p=>p.PercolateFormat(percolate_format));

		///<summary>Explicit version number for concurrency control</summary>
		public PercolateDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public PercolateDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public PercolateDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PercolateDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Ping <pre>http://www.elastic.co/guide/</pre></summary>
	public partial class PingDescriptor 
	{
		///<summary>The URL-encoded request definition</summary>
		public PingDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PingDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for PutScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class PutScriptDescriptor 
	{
		///<summary>Explicit operation type</summary>
		public PutScriptDescriptor OpType(OpType op_type) => _requestParams(p=>p.OpType(op_type));

		///<summary>Explicit version number for concurrency control</summary>
		public PutScriptDescriptor Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public PutScriptDescriptor VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public PutScriptDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public PutScriptDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for RenderSearchTemplateGet <pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class RenderSearchTemplateDescriptor  : BasePathDescriptor<RenderSearchTemplateDescriptor,RenderSearchTemplateRequestParameters>
	{
		///<summary>The URL-encoded request definition</summary>
		public RenderSearchTemplateDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public RenderSearchTemplateDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));

		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<RenderSearchTemplateRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		} 
	
	}
	
	///<summary>descriptor for ScrollGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html</pre></summary>
	public partial class ScrollDescriptor<T> 
	{
		///<summary>The URL-encoded request definition</summary>
		public ScrollDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public ScrollDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SearchGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html</pre></summary>
	public partial class SearchDescriptor<T> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public SearchDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true) => _requestParams(p=>p.AnalyzeWildcard(analyze_wildcard));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SearchDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SearchDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SearchDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchDescriptor<T> Lenient(bool lenient = true) => _requestParams(p=>p.Lenient(lenient));

		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true) => _requestParams(p=>p.LowercaseExpandedTerms(lowercase_expanded_terms));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>A comma-separated list of specific routing values</summary>
		public SearchDescriptor<T> Routing(params string[] routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchDescriptor<T> Scroll(string scroll) => _requestParams(p=>p.Scroll(scroll));

		///<summary>Search operation type</summary>
		public SearchDescriptor<T> SearchType(SearchType search_type) => _requestParams(p=>p.SearchType(search_type));

		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public SearchDescriptor<T> Stats(params string[] stats) => _requestParams(p=>p.Stats(stats));

		///<summary>Specify which field to use for suggestions</summary>
		public SearchDescriptor<T> SuggestField(string suggest_field) => _requestParams(p=>p.SuggestField(suggest_field));

		///<summary>Specify which field to use for suggestions</summary>
		public SearchDescriptor<T> SuggestField(Expression<Func<T, object>> field)  =>
			_requestParams(p=>p._SuggestField(field));

		///<summary>Specify suggest mode</summary>
		public SearchDescriptor<T> SuggestMode(SuggestMode suggest_mode) => _requestParams(p=>p.SuggestMode(suggest_mode));

		///<summary>How many suggestions to return in response</summary>
		public SearchDescriptor<T> SuggestSize(long suggest_size) => _requestParams(p=>p.SuggestSize(suggest_size));

		///<summary>The source text for which the suggestions should be returned</summary>
		public SearchDescriptor<T> SuggestText(string suggest_text) => _requestParams(p=>p.SuggestText(suggest_text));

		///<summary>Specify if request cache should be used for this request or not, defaults to index level setting</summary>
		public SearchDescriptor<T> RequestCache(bool request_cache = true) => _requestParams(p=>p.RequestCache(request_cache));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SearchDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SearchExists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</pre></summary>
	public partial class SearchExistsDescriptor<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SearchExistsDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SearchExistsDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SearchExistsDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public SearchExistsDescriptor<T> MinScore(double min_score) => _requestParams(p=>p.MinScore(min_score));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchExistsDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value</summary>
		public SearchExistsDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Query in the Lucene query string syntax</summary>
		public SearchExistsDescriptor<T> Q(string q) => _requestParams(p=>p.Q(q));

		///<summary>The analyzer to use for the query string</summary>
		public SearchExistsDescriptor<T> Analyzer(string analyzer) => _requestParams(p=>p.Analyzer(analyzer));

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchExistsDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true) => _requestParams(p=>p.AnalyzeWildcard(analyze_wildcard));

		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchExistsDescriptor<T> DefaultOperator(DefaultOperator default_operator) => _requestParams(p=>p.DefaultOperator(default_operator));

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchExistsDescriptor<T> Df(string df) => _requestParams(p=>p.Df(df));

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchExistsDescriptor<T> Lenient(bool lenient = true) => _requestParams(p=>p.Lenient(lenient));

		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchExistsDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true) => _requestParams(p=>p.LowercaseExpandedTerms(lowercase_expanded_terms));

		///<summary>The URL-encoded request definition</summary>
		public SearchExistsDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SearchExistsDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SearchShardsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</pre></summary>
	public partial class SearchShardsDescriptor<T> 
	{
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchShardsDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value</summary>
		public SearchShardsDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public SearchShardsDescriptor<T> Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SearchShardsDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SearchShardsDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SearchShardsDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>The URL-encoded request definition</summary>
		public SearchShardsDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SearchShardsDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SearchTemplateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</pre></summary>
	public partial class SearchTemplateDescriptor<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SearchTemplateDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SearchTemplateDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SearchTemplateDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchTemplateDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>A comma-separated list of specific routing values</summary>
		public SearchTemplateDescriptor<T> Routing(params string[] routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchTemplateDescriptor<T> Scroll(string scroll) => _requestParams(p=>p.Scroll(scroll));

		///<summary>Search operation type</summary>
		public SearchTemplateDescriptor<T> SearchType(SearchType search_type) => _requestParams(p=>p.SearchType(search_type));

		///<summary>The URL-encoded request definition</summary>
		public SearchTemplateDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SearchTemplateDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotCreate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class SnapshotDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Should this request wait until the operation has completed before returning</summary>
		public SnapshotDescriptor WaitForCompletion(bool wait_for_completion = true) => _requestParams(p=>p.WaitForCompletion(wait_for_completion));

		///<summary>The URL-encoded request definition</summary>
		public SnapshotDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SnapshotDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotCreateRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class CreateRepositoryDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public CreateRepositoryDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public CreateRepositoryDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Whether to verify the repository after creation</summary>
		public CreateRepositoryDescriptor Verify(bool verify = true) => _requestParams(p=>p.Verify(verify));

		///<summary>The URL-encoded request definition</summary>
		public CreateRepositoryDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public CreateRepositoryDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotDelete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class DeleteSnapshotDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public DeleteSnapshotDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public DeleteSnapshotDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteSnapshotDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotDeleteRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class DeleteRepositoryDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public DeleteRepositoryDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public DeleteRepositoryDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>The URL-encoded request definition</summary>
		public DeleteRepositoryDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public DeleteRepositoryDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class GetSnapshotDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public GetSnapshotDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public GetSnapshotDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetSnapshotDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotGetRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class GetRepositoryDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public GetRepositoryDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public GetRepositoryDescriptor Local(bool local = true) => _requestParams(p=>p.Local(local));

		///<summary>The URL-encoded request definition</summary>
		public GetRepositoryDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public GetRepositoryDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotRestore <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class RestoreDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public RestoreDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Should this request wait until the operation has completed before returning</summary>
		public RestoreDescriptor WaitForCompletion(bool wait_for_completion = true) => _requestParams(p=>p.WaitForCompletion(wait_for_completion));

		///<summary>The URL-encoded request definition</summary>
		public RestoreDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public RestoreDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotStatus <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class SnapshotStatusDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public SnapshotStatusDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>The URL-encoded request definition</summary>
		public SnapshotStatusDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SnapshotStatusDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for SnapshotVerifyRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class VerifyRepositoryDescriptor 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public VerifyRepositoryDescriptor MasterTimeout(string master_timeout) => _requestParams(p=>p.MasterTimeout(master_timeout));

		///<summary>Explicit operation timeout</summary>
		public VerifyRepositoryDescriptor Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>The URL-encoded request definition</summary>
		public VerifyRepositoryDescriptor Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public VerifyRepositoryDescriptor FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Suggest <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-suggesters.html</pre></summary>
	public partial class SuggestDescriptor<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public SuggestDescriptor<T> IgnoreUnavailable(bool ignore_unavailable = true) => _requestParams(p=>p.IgnoreUnavailable(ignore_unavailable));

		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public SuggestDescriptor<T> AllowNoIndices(bool allow_no_indices = true) => _requestParams(p=>p.AllowNoIndices(allow_no_indices));

		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public SuggestDescriptor<T> ExpandWildcards(ExpandWildcards expand_wildcards) => _requestParams(p=>p.ExpandWildcards(expand_wildcards));

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SuggestDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value</summary>
		public SuggestDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>The URL-encoded request definition</summary>
		public SuggestDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public SuggestDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for TermvectorsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html</pre></summary>
	public partial class TermVectorsDescriptor<T> 
	{
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public TermVectorsDescriptor<T> TermStatistics(bool term_statistics = true) => _requestParams(p=>p.TermStatistics(term_statistics));

		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public TermVectorsDescriptor<T> FieldStatistics(bool field_statistics = true) => _requestParams(p=>p.FieldStatistics(field_statistics));

		///<summary>Specifies if distributed frequencies should be returned instead shard frequencies.</summary>
		public TermVectorsDescriptor<T> Dfs(bool dfs = true) => _requestParams(p=>p.Dfs(dfs));

		///<summary>A comma-separated list of fields to return.</summary>
		public TermVectorsDescriptor<T> Fields(params string[] fields) => _requestParams(p=>p.Fields(fields));
			
		///<summary>A comma-separated list of fields to return.</summary>
		public TermVectorsDescriptor<T> Fields(params Expression<Func<T, object>>[] fields)  =>
			_requestParams(p=>p._Fields(fields));

		///<summary>Specifies if term offsets should be returned.</summary>
		public TermVectorsDescriptor<T> Offsets(bool offsets = true) => _requestParams(p=>p.Offsets(offsets));

		///<summary>Specifies if term positions should be returned.</summary>
		public TermVectorsDescriptor<T> Positions(bool positions = true) => _requestParams(p=>p.Positions(positions));

		///<summary>Specifies if term payloads should be returned.</summary>
		public TermVectorsDescriptor<T> Payloads(bool payloads = true) => _requestParams(p=>p.Payloads(payloads));

		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public TermVectorsDescriptor<T> Preference(string preference) => _requestParams(p=>p.Preference(preference));

		///<summary>Specific routing value.</summary>
		public TermVectorsDescriptor<T> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>Parent id of documents.</summary>
		public TermVectorsDescriptor<T> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Specifies if request is real-time as opposed to near-real-time (default: true).</summary>
		public TermVectorsDescriptor<T> Realtime(bool realtime = true) => _requestParams(p=>p.Realtime(realtime));

		///<summary>Explicit version number for concurrency control</summary>
		public TermVectorsDescriptor<T> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public TermVectorsDescriptor<T> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public TermVectorsDescriptor<T> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public TermVectorsDescriptor<T> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
	
	///<summary>descriptor for Update <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html</pre></summary>
	public partial class UpdateDescriptor<TDocument,TPartialDocument> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Consistency(Consistency consistency) => _requestParams(p=>p.Consistency(consistency));

		///<summary>The script language (default: groovy)</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Lang(string lang) => _requestParams(p=>p.Lang(lang));

		///<summary>ID of the parent document. Is is only used for routing and when for the upsert request</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Parent(string parent) => _requestParams(p=>p.Parent(parent));

		///<summary>Refresh the index after performing the operation</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Refresh(bool refresh = true) => _requestParams(p=>p.Refresh(refresh));

		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> RetryOnConflict(long retry_on_conflict) => _requestParams(p=>p.RetryOnConflict(retry_on_conflict));

		///<summary>Specific routing value</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Routing(string routing) => _requestParams(p=>p.Routing(routing));

		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> ScriptQueryString(string script) => _requestParams(p=>p.Script(script));

		///<summary>The id of a stored script</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> ScriptId(string script_id) => _requestParams(p=>p.ScriptId(script_id));

		///<summary>True if the script referenced in script or script_id should be called to perform inserts - defaults to false</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> ScriptedUpsert(bool scripted_upsert = true) => _requestParams(p=>p.ScriptedUpsert(scripted_upsert));

		///<summary>Explicit operation timeout</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Timeout(string timeout) => _requestParams(p=>p.Timeout(timeout));

		///<summary>Explicit timestamp for the document</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Timestamp(string timestamp) => _requestParams(p=>p.Timestamp(timestamp));

		///<summary>Expiration time for the document</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Ttl(string ttl) => _requestParams(p=>p.Ttl(ttl));

		///<summary>Explicit version number for concurrency control</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Version(long version) => _requestParams(p=>p.Version(version));

		///<summary>Specific version type</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> VersionType(VersionType version_type) => _requestParams(p=>p.VersionType(version_type));

		///<summary>The URL-encoded request definition</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> Source(string source) => _requestParams(p=>p.Source(source));

		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public UpdateDescriptor<TDocument,TPartialDocument> FilterPath(string filter_path) => _requestParams(p=>p.FilterPath(filter_path));
	
	}
}