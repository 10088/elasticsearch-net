
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;

//This file contains all the typed querystring parameters that are generated of the client spec.
//This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
//Generated of commit 

namespace Nest
{

	///<summary>Request parameters for Bulk <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html</pre></summary>
	public partial class BulkRequest 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency { get { return Q<Consistency>("consistency"); } set { Q("consistency", value); } }
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Default document type for items which don&#39;t provide one</summary>
		public string TypeQueryString { get { return Q<string>("type"); } set { Q("type", value); } }
		
		///<summary>Default comma-separated list of fields to return in the response for updates</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatAliases <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html</pre></summary>
	public partial class CatAliasesRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatAllocation <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html</pre></summary>
	public partial class CatAllocationRequest 
	{
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes { get { return Q<Bytes>("bytes"); } set { Q("bytes", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatCount <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html</pre></summary>
	public partial class CatCountRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatFielddata <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</pre></summary>
	public partial class CatFielddataRequest 
	{
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes { get { return Q<Bytes>("bytes"); } set { Q("bytes", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>A comma-separated list of fields to return in the output</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatHealth <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html</pre></summary>
	public partial class CatHealthRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Set to false to disable timestamping</summary>
		public bool Ts { get { return Q<bool>("ts"); } set { Q("ts", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatHelp <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html</pre></summary>
	public partial class CatHelpRequest  : BasePathRequest<CatHelpRequestParameters>
	{
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatHelpRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}
	
	}
	///<summary>Request parameters for CatIndices <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html</pre></summary>
	public partial class CatIndicesRequest 
	{
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes { get { return Q<Bytes>("bytes"); } set { Q("bytes", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Set to true to return stats only for primary shards</summary>
		public bool Pri { get { return Q<bool>("pri"); } set { Q("pri", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatMaster <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html</pre></summary>
	public partial class CatMasterRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatNodeattrs <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html</pre></summary>
	public partial class CatNodeattrsRequest  : BasePathRequest<CatNodeattrsRequestParameters>
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<CatNodeattrsRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}
	
	}
	///<summary>Request parameters for CatNodes <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html</pre></summary>
	public partial class CatNodesRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatPendingTasks <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html</pre></summary>
	public partial class CatPendingTasksRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatPlugins <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</pre></summary>
	public partial class CatPluginsRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatRecovery <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html</pre></summary>
	public partial class CatRecoveryRequest 
	{
		///<summary>The unit in which to display byte values</summary>
		public Bytes Bytes { get { return Q<Bytes>("bytes"); } set { Q("bytes", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatSegments <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</pre></summary>
	public partial class CatSegmentsRequest 
	{
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatShards <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html</pre></summary>
	public partial class CatShardsRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CatThreadPool <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</pre></summary>
	public partial class CatThreadPoolRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Comma-separated list of column names to display</summary>
		public  string[] H { get { return Q< string[]>("h"); } set { Q("h", value); } }
		
		///<summary>Return help information</summary>
		public bool Help { get { return Q<bool>("help"); } set { Q("help", value); } }
		
		///<summary>Verbose mode. Display column headers</summary>
		public bool V { get { return Q<bool>("v"); } set { Q("v", value); } }
		
		///<summary>Enables displaying the complete node ids</summary>
		public bool FullId { get { return Q<bool>("full_id"); } set { Q("full_id", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClearScroll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html</pre></summary>
	public partial class ClearScrollRequest 
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterGetSettings <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html</pre></summary>
	public partial class ClusterGetSettingsRequest 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterHealth <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html</pre></summary>
	public partial class ClusterHealthRequest 
	{
		///<summary>Specify the level of detail for returned information</summary>
		public Level Level { get { return Q<Level>("level"); } set { Q("level", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Wait until the specified number of shards is active</summary>
		public long WaitForActiveShards { get { return Q<long>("wait_for_active_shards"); } set { Q("wait_for_active_shards", value); } }
		
		///<summary>Wait until the specified number of nodes is available</summary>
		public string WaitForNodes { get { return Q<string>("wait_for_nodes"); } set { Q("wait_for_nodes", value); } }
		
		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public long WaitForRelocatingShards { get { return Q<long>("wait_for_relocating_shards"); } set { Q("wait_for_relocating_shards", value); } }
		
		///<summary>Wait until cluster is in a specific state</summary>
		public WaitForStatus WaitForStatus { get { return Q<WaitForStatus>("wait_for_status"); } set { Q("wait_for_status", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterPendingTasks <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html</pre></summary>
	public partial class ClusterPendingTasksRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterPutSettings <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html</pre></summary>
	public partial class ClusterSettingsRequest 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterReroute <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html</pre></summary>
	public partial class ClusterRerouteRequest 
	{
		///<summary>Simulate the operation only and return the resulting state</summary>
		public bool DryRun { get { return Q<bool>("dry_run"); } set { Q("dry_run", value); } }
		
		///<summary>Return an explanation of why the commands can or cannot be executed</summary>
		public bool Explain { get { return Q<bool>("explain"); } set { Q("explain", value); } }
		
		///<summary>Limit the information returned to the specified metrics. Defaults to all but metadata</summary>
		public  string[] Metric { get { return Q< string[]>("metric"); } set { Q("metric", value); } }
		
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterState <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html</pre></summary>
	public partial class ClusterStateRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ClusterStats <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html</pre></summary>
	public partial class ClusterStatsRequest 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Count <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html</pre></summary>
	public partial class CountRequest<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore { get { return Q<double>("min_score"); } set { Q("min_score", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for CountPercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class PercolateCountRequest<TDocument> 
	{
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The index to count percolate the document into. Defaults to index.</summary>
		public string PercolateIndex { get { return Q<string>("percolate_index"); } set { Q("percolate_index", value); } }
		
		///<summary>The type to count percolate document into. Defaults to type.</summary>
		public string PercolateType { get { return Q<string>("percolate_type"); } set { Q("percolate_type", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Delete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html</pre></summary>
	public partial class DeleteRequest<T> 
	{
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency { get { return Q<Consistency>("consistency"); } set { Q("consistency", value); } }
		
		///<summary>ID of parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for DeleteByQuery <pre>https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html</pre></summary>
	public partial class DeleteByQueryRequest<T> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for DeleteScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class DeleteScriptRequest 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for DeleteTemplate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class DeleteTemplateRequest 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Exists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class DocumentExistsRequest<T> 
	{
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ExplainGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html</pre></summary>
	public partial class ExplainRequest<T> 
	{
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The analyzer for the query string query</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The default field for query string query (default: _all)</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for FieldStatsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</pre></summary>
	public partial class FieldStatsRequest 
	{
		///<summary>A comma-separated list of fields for to get field statistics for (min value, max value, and more)</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Defines if field stats should be returned on a per index level or on a cluster wide level</summary>
		public Level Level { get { return Q<Level>("level"); } set { Q("level", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Get <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class GetRequest<T> 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for GetScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class GetScriptRequest 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for GetSource <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class SourceRequest<T> 
	{
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for GetTemplate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class GetTemplateRequest 
	{
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Index <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html</pre></summary>
	public partial class IndexRequest<TDocument> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency { get { return Q<Consistency>("consistency"); } set { Q("consistency", value); } }
		
		///<summary>Explicit operation type</summary>
		public OpType OpType { get { return Q<OpType>("op_type"); } set { Q("op_type", value); } }
		
		///<summary>ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timestamp { get { return Q<string>("timestamp"); } set { Q("timestamp", value); } }
		
		///<summary>Expiration time for the document</summary>
		public string Ttl { get { return Q<string>("ttl"); } set { Q("ttl", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesAnalyzeGetForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html</pre></summary>
	public partial class AnalyzeRequest 
	{
		///<summary>The name of the analyzer to use</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>A comma-separated list of character filters to use for the analysis</summary>
		public  string[] CharFilters { get { return Q< string[]>("char_filters"); } set { Q("char_filters", value); } }
		
		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public FieldName Field { get { return Q<FieldName>("field"); } set { Q("field", value); } }
		
		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public  string[] Filters { get { return Q< string[]>("filters"); } set { Q("filters", value); } }
		
		///<summary>The name of the index to scope the operation</summary>
		public string IndexQueryString { get { return Q<string>("index"); } set { Q("index", value); } }
		
		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public bool PreferLocal { get { return Q<bool>("prefer_local"); } set { Q("prefer_local", value); } }
		
		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public  string[] Text { get { return Q< string[]>("text"); } set { Q("text", value); } }
		
		///<summary>The name of the tokenizer to use for the analysis</summary>
		public string Tokenizer { get { return Q<string>("tokenizer"); } set { Q("tokenizer", value); } }
		
		///<summary>Format of the output</summary>
		public Format Format { get { return Q<Format>("format"); } set { Q("format", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesClearCacheForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html</pre></summary>
	public partial class ClearCacheRequest 
	{
		///<summary>Clear field data</summary>
		public bool FieldData { get { return Q<bool>("field_data"); } set { Q("field_data", value); } }
		
		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Clear query caches</summary>
		public bool Query { get { return Q<bool>("query"); } set { Q("query", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>A comma-separated list of index name to limit the operation</summary>
		public  string[] IndexQueryString { get { return Q< string[]>("index"); } set { Q("index", value); } }
		
		///<summary>Clear the recycler cache</summary>
		public bool Recycler { get { return Q<bool>("recycler"); } set { Q("recycler", value); } }
		
		///<summary>Clear request cache</summary>
		public bool Request { get { return Q<bool>("request"); } set { Q("request", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesClose <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html</pre></summary>
	public partial class CloseIndexRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesCreate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html</pre></summary>
	public partial class CreateIndexRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether to update the mapping for all fields with the same name across all types or not</summary>
		public bool UpdateAllTypes { get { return Q<bool>("update_all_types"); } set { Q("update_all_types", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesDelete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html</pre></summary>
	public partial class DeleteIndexRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesDeleteAlias <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class DeleteAliasRequest 
	{
		///<summary>Explicit timestamp for the document</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesDeleteWarmer <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class DeleteWarmerRequest 
	{
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesExists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html</pre></summary>
	public partial class IndexExistsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesExistsAliasForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class AliasExistsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesExistsTemplateForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html</pre></summary>
	public partial class TemplateExistsRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesExistsType <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html</pre></summary>
	public partial class TypeExistsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesFlushForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html</pre></summary>
	public partial class FlushRequest 
	{
		///<summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
		public bool Force { get { return Q<bool>("force"); } set { Q("force", value); } }
		
		///<summary>If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.</summary>
		public bool WaitIfOngoing { get { return Q<bool>("wait_if_ongoing"); } set { Q("wait_if_ongoing", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesFlushSyncedForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</pre></summary>
	public partial class SyncedFlushRequest 
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html</pre></summary>
	public partial class GetIndexRequest 
	{
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Ignore unavailable indexes (default: false)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Ignore if a wildcard expression resolves to no concrete indices (default: false)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether wildcard expressions should get expanded to open or closed indices (default: open)</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Whether to return version and creation date values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetAliasForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class GetAliasRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetAliasesForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class GetAliasesRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetFieldMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html</pre></summary>
	public partial class GetFieldMappingRequest<T> 
	{
		///<summary>Whether the default mapping values should be returned as well</summary>
		public bool IncludeDefaults { get { return Q<bool>("include_defaults"); } set { Q("include_defaults", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html</pre></summary>
	public partial class GetMappingRequest<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetSettingsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html</pre></summary>
	public partial class GetIndexSettingsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Whether to return version and creation date values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetUpgradeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</pre></summary>
	public partial class UpgradeStatusRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetWarmerForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class GetWarmerRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesOpen <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html</pre></summary>
	public partial class OpenIndexRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesOptimizeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-optimize.html</pre></summary>
	public partial class OptimizeRequest 
	{
		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public bool Flush { get { return Q<bool>("flush"); } set { Q("flush", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public long MaxNumSegments { get { return Q<long>("max_num_segments"); } set { Q("max_num_segments", value); } }
		
		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public bool OnlyExpungeDeletes { get { return Q<bool>("only_expunge_deletes"); } set { Q("only_expunge_deletes", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public bool WaitForMerge { get { return Q<bool>("wait_for_merge"); } set { Q("wait_for_merge", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutAlias <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class PutAliasRequest 
	{
		///<summary>Explicit timestamp for the document</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutMapping <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html</pre></summary>
	public partial class PutMappingRequest<T> 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Whether to update the mapping for all fields with the same name across all types or not</summary>
		public bool UpdateAllTypes { get { return Q<bool>("update_all_types"); } set { Q("update_all_types", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutSettingsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html</pre></summary>
	public partial class UpdateSettingsRequest 
	{
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutTemplateForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html</pre></summary>
	public partial class PutTemplateRequest 
	{
		///<summary>Whether the index template should only be added if new or can also replace an existing one</summary>
		public bool Create { get { return Q<bool>("create"); } set { Q("create", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutWarmerForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html</pre></summary>
	public partial class PutWarmerRequest 
	{
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify whether the request to be warmed should use the request cache, defaults to index level setting</summary>
		public bool RequestCache { get { return Q<bool>("request_cache"); } set { Q("request_cache", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesRecoveryForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</pre></summary>
	public partial class RecoveryStatusRequest 
	{
		///<summary>Whether to display detailed information about shard recovery</summary>
		public bool Detailed { get { return Q<bool>("detailed"); } set { Q("detailed", value); } }
		
		///<summary>Display only those recoveries that are currently on-going</summary>
		public bool ActiveOnly { get { return Q<bool>("active_only"); } set { Q("active_only", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesRefreshForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html</pre></summary>
	public partial class RefreshRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Force a refresh even if not required</summary>
		public bool Force { get { return Q<bool>("force"); } set { Q("force", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesSegmentsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html</pre></summary>
	public partial class SegmentsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesShardStoresForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html</pre></summary>
	public partial class IndicesShardStoresRequest  : BasePathRequest<IndicesShardStoresRequestParameters>
	{
		///<summary>A comma-separated list of statuses used to filter on shards to get store information for</summary>
		public  string[] Status { get { return Q< string[]>("status"); } set { Q("status", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<IndicesShardStoresRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}
	
	}
	///<summary>Request parameters for IndicesStatsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html</pre></summary>
	public partial class IndicesStatsRequest 
	{
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IList<FieldName> CompletionFields { get { return Q<IList<FieldName>>("completion_fields"); } set { Q("completion_fields", value); } }
		
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IList<FieldName> FielddataFields { get { return Q<IList<FieldName>>("fielddata_fields"); } set { Q("fielddata_fields", value); } }
		
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public  string[] Groups { get { return Q< string[]>("groups"); } set { Q("groups", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>Return stats aggregated at cluster, index or shard level</summary>
		public Level Level { get { return Q<Level>("level"); } set { Q("level", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesUpdateAliasesForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html</pre></summary>
	public partial class BulkAliasRequest 
	{
		///<summary>Request timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesUpgradeForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</pre></summary>
	public partial class UpgradeRequest 
	{
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Specify whether the request should block until the all segments are upgraded (default: false)</summary>
		public bool WaitForCompletion { get { return Q<bool>("wait_for_completion"); } set { Q("wait_for_completion", value); } }
		
		///<summary>If true, only ancient (an older Lucene major release) segments will be upgraded</summary>
		public bool OnlyAncientSegments { get { return Q<bool>("only_ancient_segments"); } set { Q("only_ancient_segments", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesValidateQueryGetForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html</pre></summary>
	public partial class ValidateQueryRequest<T> 
	{
		///<summary>Return detailed information about the error</summary>
		public bool Explain { get { return Q<bool>("explain"); } set { Q("explain", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>Provide a more detailed explanation showing the actual Lucene query that will be executed.</summary>
		public bool Rewrite { get { return Q<bool>("rewrite"); } set { Q("rewrite", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Info <pre>http://www.elastic.co/guide/</pre></summary>
	public partial class InfoRequest 
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for MgetGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html</pre></summary>
	public partial class MultiGetRequest 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for MpercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class MultiPercolateRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for MsearchGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html</pre></summary>
	public partial class MultiSearchRequest 
	{
		///<summary>Search operation type</summary>
		public SearchType SearchType { get { return Q<SearchType>("search_type"); } set { Q("search_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for MtermvectorsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html</pre></summary>
	public partial class MultiTermVectorsRequest 
	{
		///<summary>Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool TermStatistics { get { return Q<bool>("term_statistics"); } set { Q("term_statistics", value); } }
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool FieldStatistics { get { return Q<bool>("field_statistics"); } set { Q("field_statistics", value); } }
		
		///<summary>A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Offsets { get { return Q<bool>("offsets"); } set { Q("offsets", value); } }
		
		///<summary>Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Positions { get { return Q<bool>("positions"); } set { Q("positions", value); } }
		
		///<summary>Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public bool Payloads { get { return Q<bool>("payloads"); } set { Q("payloads", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Parent id of documents. Applies to all returned documents unless otherwise specified in body &quot;params&quot; or &quot;docs&quot;.</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specifies if requests are real-time as opposed to near-real-time (default: true).</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for NodesHotThreadsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html</pre></summary>
	public partial class NodesHotThreadsRequest 
	{
		///<summary>The interval for the second sampling of threads</summary>
		public string Interval { get { return Q<string>("interval"); } set { Q("interval", value); } }
		
		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public long Snapshots { get { return Q<long>("snapshots"); } set { Q("snapshots", value); } }
		
		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public long Threads { get { return Q<long>("threads"); } set { Q("threads", value); } }
		
		///<summary>Don&#39;t show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)</summary>
		public bool IgnoreIdleThreads { get { return Q<bool>("ignore_idle_threads"); } set { Q("ignore_idle_threads", value); } }
		
		///<summary>The type to sample (default: cpu)</summary>
		public ThreadType ThreadType { get { return Q<ThreadType>("type"); } set { Q("type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for NodesInfoForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html</pre></summary>
	public partial class NodesInfoRequest 
	{
		///<summary>Return settings in flat format (default: false)</summary>
		public bool FlatSettings { get { return Q<bool>("flat_settings"); } set { Q("flat_settings", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for NodesStatsForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html</pre></summary>
	public partial class NodesStatsRequest 
	{
		///<summary>A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)</summary>
		public IList<FieldName> CompletionFields { get { return Q<IList<FieldName>>("completion_fields"); } set { Q("completion_fields", value); } }
		
		///<summary>A comma-separated list of fields for `fielddata` index metric (supports wildcards)</summary>
		public IList<FieldName> FielddataFields { get { return Q<IList<FieldName>>("fielddata_fields"); } set { Q("fielddata_fields", value); } }
		
		///<summary>A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>A comma-separated list of search groups for `search` index metric</summary>
		public bool Groups { get { return Q<bool>("groups"); } set { Q("groups", value); } }
		
		///<summary>Whether to return time and byte values in human-readable format.</summary>
		public bool Human { get { return Q<bool>("human"); } set { Q("human", value); } }
		
		///<summary>Return indices stats aggregated at node, index or shard level</summary>
		public Level Level { get { return Q<Level>("level"); } set { Q("level", value); } }
		
		///<summary>A comma-separated list of document types for the `indexing` index metric</summary>
		public  string[] Types { get { return Q< string[]>("types"); } set { Q("types", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for PercolateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html</pre></summary>
	public partial class PercolateRequest<TDocument> 
	{
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The index to percolate the document into. Defaults to index.</summary>
		public string PercolateIndex { get { return Q<string>("percolate_index"); } set { Q("percolate_index", value); } }
		
		///<summary>The type to percolate document into. Defaults to type.</summary>
		public string PercolateType { get { return Q<string>("percolate_type"); } set { Q("percolate_type", value); } }
		
		///<summary>The routing value to use when percolating the existing document.</summary>
		public string PercolateRouting { get { return Q<string>("percolate_routing"); } set { Q("percolate_routing", value); } }
		
		///<summary>Which shard to prefer when executing the percolate request.</summary>
		public string PercolatePreference { get { return Q<string>("percolate_preference"); } set { Q("percolate_preference", value); } }
		
		///<summary>Return an array of matching query IDs instead of objects</summary>
		public PercolateFormat PercolateFormat { get { return Q<PercolateFormat>("percolate_format"); } set { Q("percolate_format", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Ping <pre>http://www.elastic.co/guide/</pre></summary>
	public partial class PingRequest 
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for PutScript <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</pre></summary>
	public partial class PutScriptRequest 
	{
		///<summary>Explicit operation type</summary>
		public OpType OpType { get { return Q<OpType>("op_type"); } set { Q("op_type", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for RenderSearchTemplateGet <pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html</pre></summary>
	public partial class RenderSearchTemplateRequest  : BasePathRequest<RenderSearchTemplateRequestParameters>
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		protected override void UpdatePathInfo(IConnectionSettingsValues settings, ElasticsearchPathInfo<RenderSearchTemplateRequestParameters> pathInfo)
		{
			throw new NotImplementedException();
		}
	
	}
	///<summary>Request parameters for ScrollGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html</pre></summary>
	public partial class ScrollRequest 
	{
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html</pre></summary>
	public partial class SearchRequest<T> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll { get { return Q<string>("scroll"); } set { Q("scroll", value); } }
		
		///<summary>Search operation type</summary>
		public SearchType SearchType { get { return Q<SearchType>("search_type"); } set { Q("search_type", value); } }
		
		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public  string[] Stats { get { return Q< string[]>("stats"); } set { Q("stats", value); } }
		
		///<summary>Specify which field to use for suggestions</summary>
		public FieldName SuggestField { get { return Q<FieldName>("suggest_field"); } set { Q("suggest_field", value); } }
		
		///<summary>Specify suggest mode</summary>
		public SuggestMode SuggestMode { get { return Q<SuggestMode>("suggest_mode"); } set { Q("suggest_mode", value); } }
		
		///<summary>How many suggestions to return in response</summary>
		public long SuggestSize { get { return Q<long>("suggest_size"); } set { Q("suggest_size", value); } }
		
		///<summary>The source text for which the suggestions should be returned</summary>
		public string SuggestText { get { return Q<string>("suggest_text"); } set { Q("suggest_text", value); } }
		
		///<summary>Specify if request cache should be used for this request or not, defaults to index level setting</summary>
		public bool RequestCache { get { return Q<bool>("request_cache"); } set { Q("request_cache", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchExists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</pre></summary>
	public partial class SearchExistsRequest<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore { get { return Q<double>("min_score"); } set { Q("min_score", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchShardsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</pre></summary>
	public partial class SearchShardsRequest<T> 
	{
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchTemplateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</pre></summary>
	public partial class SearchTemplateRequest<T> 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll { get { return Q<string>("scroll"); } set { Q("scroll", value); } }
		
		///<summary>Search operation type</summary>
		public SearchType SearchType { get { return Q<SearchType>("search_type"); } set { Q("search_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotCreate <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class SnapshotRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public bool WaitForCompletion { get { return Q<bool>("wait_for_completion"); } set { Q("wait_for_completion", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotCreateRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class CreateRepositoryRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Whether to verify the repository after creation</summary>
		public bool Verify { get { return Q<bool>("verify"); } set { Q("verify", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotDelete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class DeleteSnapshotRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotDeleteRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class DeleteRepositoryRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class GetSnapshotRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotGetRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class GetRepositoryRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotRestore <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class RestoreRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Should this request wait until the operation has completed before returning</summary>
		public bool WaitForCompletion { get { return Q<bool>("wait_for_completion"); } set { Q("wait_for_completion", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotStatus <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class SnapshotStatusRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SnapshotVerifyRepository <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</pre></summary>
	public partial class VerifyRepositoryRequest 
	{
		///<summary>Explicit operation timeout for connection to master node</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Suggest <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-suggesters.html</pre></summary>
	public partial class SuggestRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for TermvectorsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html</pre></summary>
	public partial class TermVectorsRequest<T> 
	{
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public bool TermStatistics { get { return Q<bool>("term_statistics"); } set { Q("term_statistics", value); } }
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public bool FieldStatistics { get { return Q<bool>("field_statistics"); } set { Q("field_statistics", value); } }
		
		///<summary>Specifies if distributed frequencies should be returned instead shard frequencies.</summary>
		public bool Dfs { get { return Q<bool>("dfs"); } set { Q("dfs", value); } }
		
		///<summary>A comma-separated list of fields to return.</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specifies if term offsets should be returned.</summary>
		public bool Offsets { get { return Q<bool>("offsets"); } set { Q("offsets", value); } }
		
		///<summary>Specifies if term positions should be returned.</summary>
		public bool Positions { get { return Q<bool>("positions"); } set { Q("positions", value); } }
		
		///<summary>Specifies if term payloads should be returned.</summary>
		public bool Payloads { get { return Q<bool>("payloads"); } set { Q("payloads", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value.</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Parent id of documents.</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specifies if request is real-time as opposed to near-real-time (default: true).</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Update <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html</pre></summary>
	public partial class UpdateRequest<TDocument,TPartialDocument> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public Consistency Consistency { get { return Q<Consistency>("consistency"); } set { Q("consistency", value); } }
		
		///<summary>The script language (default: groovy)</summary>
		public string Lang { get { return Q<string>("lang"); } set { Q("lang", value); } }
		
		///<summary>ID of the parent document. Is is only used for routing and when for the upsert request</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public long RetryOnConflict { get { return Q<long>("retry_on_conflict"); } set { Q("retry_on_conflict", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public string ScriptQueryString { get { return Q<string>("script"); } set { Q("script", value); } }
		
		///<summary>The id of a stored script</summary>
		public string ScriptId { get { return Q<string>("script_id"); } set { Q("script_id", value); } }
		
		///<summary>True if the script referenced in script or script_id should be called to perform inserts - defaults to false</summary>
		public bool ScriptedUpsert { get { return Q<bool>("scripted_upsert"); } set { Q("scripted_upsert", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Explicit timestamp for the document</summary>
		public string Timestamp { get { return Q<string>("timestamp"); } set { Q("timestamp", value); } }
		
		///<summary>Expiration time for the document</summary>
		public string Ttl { get { return Q<string>("ttl"); } set { Q("ttl", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Count <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html</pre></summary>
	public partial class CountRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore { get { return Q<double>("min_score"); } set { Q("min_score", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Delete <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html</pre></summary>
	public partial class DeleteRequest 
	{
		///<summary>Specific write consistency setting for the operation</summary>
		public Consistency Consistency { get { return Q<Consistency>("consistency"); } set { Q("consistency", value); } }
		
		///<summary>ID of parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Refresh the index after performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for DeleteByQuery <pre>https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html</pre></summary>
	public partial class DeleteByQueryRequest 
	{
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Exists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class DocumentExistsRequest 
	{
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for ExplainGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html</pre></summary>
	public partial class ExplainRequest 
	{
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The analyzer for the query string query</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The default field for query string query (default: _all)</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for Get <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class GetRequest 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for GetSource <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html</pre></summary>
	public partial class SourceRequest 
	{
		///<summary>The ID of the parent document</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public bool Refresh { get { return Q<bool>("refresh"); } set { Q("refresh", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public  string[] SourceEnabled { get { return Q< string[]>("_source"); } set { Q("_source", value); } }
		
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public IList<FieldName> SourceExclude { get { return Q<IList<FieldName>>("_source_exclude"); } set { Q("_source_exclude", value); } }
		
		///<summary>A list of fields to extract and return from the _source field</summary>
		public IList<FieldName> SourceInclude { get { return Q<IList<FieldName>>("_source_include"); } set { Q("_source_include", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetFieldMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html</pre></summary>
	public partial class GetFieldMappingRequest 
	{
		///<summary>Whether the default mapping values should be returned as well</summary>
		public bool IncludeDefaults { get { return Q<bool>("include_defaults"); } set { Q("include_defaults", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesGetMappingForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html</pre></summary>
	public partial class GetMappingRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesPutMapping <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html</pre></summary>
	public partial class PutMappingRequest 
	{
		///<summary>Explicit operation timeout</summary>
		public string Timeout { get { return Q<string>("timeout"); } set { Q("timeout", value); } }
		
		///<summary>Specify timeout for connection to master</summary>
		public string MasterTimeout { get { return Q<string>("master_timeout"); } set { Q("master_timeout", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Whether to update the mapping for all fields with the same name across all types or not</summary>
		public bool UpdateAllTypes { get { return Q<bool>("update_all_types"); } set { Q("update_all_types", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for IndicesValidateQueryGetForAll <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html</pre></summary>
	public partial class ValidateQueryRequest 
	{
		///<summary>Return detailed information about the error</summary>
		public bool Explain { get { return Q<bool>("explain"); } set { Q("explain", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>TODO: ?</summary>
		public string OperationThreading { get { return Q<string>("operation_threading"); } set { Q("operation_threading", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>Provide a more detailed explanation showing the actual Lucene query that will be executed.</summary>
		public bool Rewrite { get { return Q<bool>("rewrite"); } set { Q("rewrite", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html</pre></summary>
	public partial class SearchRequest 
	{
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll { get { return Q<string>("scroll"); } set { Q("scroll", value); } }
		
		///<summary>Search operation type</summary>
		public SearchType SearchType { get { return Q<SearchType>("search_type"); } set { Q("search_type", value); } }
		
		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public  string[] Stats { get { return Q< string[]>("stats"); } set { Q("stats", value); } }
		
		///<summary>Specify which field to use for suggestions</summary>
		public FieldName SuggestField { get { return Q<FieldName>("suggest_field"); } set { Q("suggest_field", value); } }
		
		///<summary>Specify suggest mode</summary>
		public SuggestMode SuggestMode { get { return Q<SuggestMode>("suggest_mode"); } set { Q("suggest_mode", value); } }
		
		///<summary>How many suggestions to return in response</summary>
		public long SuggestSize { get { return Q<long>("suggest_size"); } set { Q("suggest_size", value); } }
		
		///<summary>The source text for which the suggestions should be returned</summary>
		public string SuggestText { get { return Q<string>("suggest_text"); } set { Q("suggest_text", value); } }
		
		///<summary>Specify if request cache should be used for this request or not, defaults to index level setting</summary>
		public bool RequestCache { get { return Q<bool>("request_cache"); } set { Q("request_cache", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchExists <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</pre></summary>
	public partial class SearchExistsRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public double MinScore { get { return Q<double>("min_score"); } set { Q("min_score", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Query in the Lucene query string syntax</summary>
		public string Q { get { return Q<string>("q"); } set { Q("q", value); } }
		
		///<summary>The analyzer to use for the query string</summary>
		public string Analyzer { get { return Q<string>("analyzer"); } set { Q("analyzer", value); } }
		
		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public bool AnalyzeWildcard { get { return Q<bool>("analyze_wildcard"); } set { Q("analyze_wildcard", value); } }
		
		///<summary>The default operator for query string query (AND or OR)</summary>
		public DefaultOperator DefaultOperator { get { return Q<DefaultOperator>("default_operator"); } set { Q("default_operator", value); } }
		
		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public string Df { get { return Q<string>("df"); } set { Q("df", value); } }
		
		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public bool Lenient { get { return Q<bool>("lenient"); } set { Q("lenient", value); } }
		
		///<summary>Specify whether query terms should be lowercased</summary>
		public bool LowercaseExpandedTerms { get { return Q<bool>("lowercase_expanded_terms"); } set { Q("lowercase_expanded_terms", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchShardsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</pre></summary>
	public partial class SearchShardsRequest 
	{
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public bool Local { get { return Q<bool>("local"); } set { Q("local", value); } }
		
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for SearchTemplateGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</pre></summary>
	public partial class SearchTemplateRequest 
	{
		///<summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
		public bool IgnoreUnavailable { get { return Q<bool>("ignore_unavailable"); } set { Q("ignore_unavailable", value); } }
		
		///<summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
		public bool AllowNoIndices { get { return Q<bool>("allow_no_indices"); } set { Q("allow_no_indices", value); } }
		
		///<summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
		public ExpandWildcards ExpandWildcards { get { return Q<ExpandWildcards>("expand_wildcards"); } set { Q("expand_wildcards", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>A comma-separated list of specific routing values</summary>
		public  string[] Routing { get { return Q< string[]>("routing"); } set { Q("routing", value); } }
		
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public string Scroll { get { return Q<string>("scroll"); } set { Q("scroll", value); } }
		
		///<summary>Search operation type</summary>
		public SearchType SearchType { get { return Q<SearchType>("search_type"); } set { Q("search_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
	///<summary>Request parameters for TermvectorsGet <pre>http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html</pre></summary>
	public partial class TermVectorsRequest 
	{
		///<summary>Specifies if total term frequency and document frequency should be returned.</summary>
		public bool TermStatistics { get { return Q<bool>("term_statistics"); } set { Q("term_statistics", value); } }
		
		///<summary>Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.</summary>
		public bool FieldStatistics { get { return Q<bool>("field_statistics"); } set { Q("field_statistics", value); } }
		
		///<summary>Specifies if distributed frequencies should be returned instead shard frequencies.</summary>
		public bool Dfs { get { return Q<bool>("dfs"); } set { Q("dfs", value); } }
		
		///<summary>A comma-separated list of fields to return.</summary>
		public IList<FieldName> Fields { get { return Q<IList<FieldName>>("fields"); } set { Q("fields", value); } }
		
		///<summary>Specifies if term offsets should be returned.</summary>
		public bool Offsets { get { return Q<bool>("offsets"); } set { Q("offsets", value); } }
		
		///<summary>Specifies if term positions should be returned.</summary>
		public bool Positions { get { return Q<bool>("positions"); } set { Q("positions", value); } }
		
		///<summary>Specifies if term payloads should be returned.</summary>
		public bool Payloads { get { return Q<bool>("payloads"); } set { Q("payloads", value); } }
		
		///<summary>Specify the node or shard the operation should be performed on (default: random).</summary>
		public string Preference { get { return Q<string>("preference"); } set { Q("preference", value); } }
		
		///<summary>Specific routing value.</summary>
		public string Routing { get { return Q<string>("routing"); } set { Q("routing", value); } }
		
		///<summary>Parent id of documents.</summary>
		public string Parent { get { return Q<string>("parent"); } set { Q("parent", value); } }
		
		///<summary>Specifies if request is real-time as opposed to near-real-time (default: true).</summary>
		public bool Realtime { get { return Q<bool>("realtime"); } set { Q("realtime", value); } }
		
		///<summary>Explicit version number for concurrency control</summary>
		public long Version { get { return Q<long>("version"); } set { Q("version", value); } }
		
		///<summary>Specific version type</summary>
		public VersionType VersionType { get { return Q<VersionType>("version_type"); } set { Q("version_type", value); } }
		
		///<summary>The URL-encoded request definition</summary>
		public string Source { get { return Q<string>("source"); } set { Q("source", value); } }
		
		///<summary>Comma separated list of filters used to reduce the response returned by Elasticsearch</summary>
		public string FilterPath { get { return Q<string>("filter_path"); } set { Q("filter_path", value); } }
		
		}
}
 