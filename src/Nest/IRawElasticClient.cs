using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

///Generated File Please Do Not Edit Manually
namespace Nest
{
	///<summary>
	///Raw operations with elasticsearch
	///<pre>
	///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
	///</pre>
	///<pre>
	///Generated of commit 38b6771b55
	///</pre>
	///</summary>
	public interface IRawElasticClient
	{
		///<summary>POST /_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_bulk
		///<pre>http://elasticsearch.org/guide/reference/api/bulk/</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		ConnectionStatus ClearScrollDelete(string scroll_id, NameValueCollection queryString = null);
		
		///<summary>DELETE /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		Task<ConnectionStatus> ClearScrollDeleteAsync(string scroll_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/settings
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/</pre>	
		///</summary>
		ConnectionStatus ClusterGetSettingsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/settings
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterGetSettingsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/health
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-health/</pre>	
		///</summary>
		ConnectionStatus ClusterHealthGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/health
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-health/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterHealthGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/health/{index}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-health/</pre>	
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		ConnectionStatus ClusterHealthGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/health/{index}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-health/</pre>	
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		Task<ConnectionStatus> ClusterHealthGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/hotthreads
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/</pre>	
		///</summary>
		ConnectionStatus ClusterNodeHotThreadsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/hotthreads
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeHotThreadsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/hotthreads
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeHotThreadsGet(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/hotthreads
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeHotThreadsGetAsync(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/</pre>	
		///</summary>
		ConnectionStatus ClusterNodeInfoGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeInfoGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeInfoGet(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeInfoGetAsync(string node_id, NameValueCollection queryString = null);
		
		///<summary>POST /_shutdown
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/</pre>	
		///</summary>
		ConnectionStatus ClusterNodeShutdownPost(NameValueCollection queryString = null);
		
		///<summary>POST /_shutdown
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeShutdownPostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /_cluster/nodes/{node_id}/_shutdown
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		ConnectionStatus ClusterNodeShutdownPost(string node_id, NameValueCollection queryString = null);
		
		///<summary>POST /_cluster/nodes/{node_id}/_shutdown
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		Task<ConnectionStatus> ClusterNodeShutdownPostAsync(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		ConnectionStatus ClusterNodeStatsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeStatsGet(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a certain metric family</param>
		ConnectionStatus ClusterNodeStatsGet(MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a certain metric family</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/{node_id}/stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a certain metric family</param>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeStatsGet(MetricFamilyOptions metric_family, string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/{node_id}/stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a certain metric family</param>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(MetricFamilyOptions metric_family, string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/stats/indices/{metric}/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `indices` metric family (supports wildcards)</param>
		///<param name="metric">Limit the information returned for `indices` family to a specific metric</param>
		ConnectionStatus ClusterNodeStatsGet(string fields, MetricOptions metric, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/stats/indices/{metric}/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `indices` metric family (supports wildcards)</param>
		///<param name="metric">Limit the information returned for `indices` family to a specific metric</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(string fields, MetricOptions metric, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/{node_id}/stats/indices/{metric}/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `indices` metric family (supports wildcards)</param>
		///<param name="metric">Limit the information returned for `indices` family to a specific metric</param>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeStatsGet(string fields, MetricOptions metric, string node_id, NameValueCollection queryString = null);
		
		///<summary>GET /_nodes/{node_id}/stats/indices/{metric}/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `indices` metric family (supports wildcards)</param>
		///<param name="metric">Limit the information returned for `indices` family to a specific metric</param>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(string fields, MetricOptions metric, string node_id, NameValueCollection queryString = null);
		
		///<summary>PUT /_cluster/settings
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/</pre>	
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		ConnectionStatus ClusterPutSettingsPut(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_cluster/settings
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/</pre>	
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		Task<ConnectionStatus> ClusterPutSettingsPutAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_cluster/reroute
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-reroute/</pre>	
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		ConnectionStatus ClusterReroutePost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_cluster/reroute
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-reroute/</pre>	
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		Task<ConnectionStatus> ClusterReroutePostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/state
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-state/</pre>	
		///</summary>
		ConnectionStatus ClusterStateGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cluster/state
		///<pre>http://elasticsearch.org/guide/reference/api/admin-cluster-state/</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterStateGetAsync(NameValueCollection queryString = null);
		
		///<summary>POST /_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_count
		///<pre>http://elasticsearch.org/guide/reference/api/count/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus CreatePost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> CreatePostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_create
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus CreatePost(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_create
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> CreatePostAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus CreatePut(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> CreatePutAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}/_create
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus CreatePut(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}/_create
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> CreatePutAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/delete/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		ConnectionStatus DeleteDelete(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/delete/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		Task<ConnectionStatus> DeleteDeleteAsync(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_query
		///<pre>http://www.elasticsearch.org/guide/reference/api/delete-by-query/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation</param>
		ConnectionStatus DeleteByQueryDelete(string index, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_query
		///<pre>http://www.elasticsearch.org/guide/reference/api/delete-by-query/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation</param>
		Task<ConnectionStatus> DeleteByQueryDeleteAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_query
		///<pre>http://www.elasticsearch.org/guide/reference/api/delete-by-query/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation</param>
		ConnectionStatus DeleteByQueryDelete(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_query
		///<pre>http://www.elasticsearch.org/guide/reference/api/delete-by-query/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation</param>
		Task<ConnectionStatus> DeleteByQueryDeleteAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		ConnectionStatus ExistsHead(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		Task<ConnectionStatus> ExistsHeadAsync(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_explain
		///<pre>http://elasticsearch.org/guide/reference/api/explain/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The query definition using the Query DSL</param>
		ConnectionStatus ExplainGet(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_explain
		///<pre>http://elasticsearch.org/guide/reference/api/explain/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The query definition using the Query DSL</param>
		Task<ConnectionStatus> ExplainGetAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_explain
		///<pre>http://elasticsearch.org/guide/reference/api/explain/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The query definition using the Query DSL</param>
		ConnectionStatus ExplainPost(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_explain
		///<pre>http://elasticsearch.org/guide/reference/api/explain/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The query definition using the Query DSL</param>
		Task<ConnectionStatus> ExplainPostAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		ConnectionStatus GetGet(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		Task<ConnectionStatus> GetGetAsync(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_source
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		ConnectionStatus GetSourceGet(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_source
		///<pre>http://elasticsearch.org/guide/reference/api/get/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		Task<ConnectionStatus> GetSourceGetAsync(string id, string index, string type, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPost(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPostAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPut(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPutAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPut(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}
		///<pre>http://elasticsearch.org/guide/reference/api/index_/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPutAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzeGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzeGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzeGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzeGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzePost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzePostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzePost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzePostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		ConnectionStatus IndicesClearCachePost(NameValueCollection queryString = null);
		
		///<summary>POST /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesClearCachePostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		ConnectionStatus IndicesClearCachePost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		Task<ConnectionStatus> IndicesClearCachePostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		ConnectionStatus IndicesClearCacheGet(NameValueCollection queryString = null);
		
		///<summary>GET /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesClearCacheGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		ConnectionStatus IndicesClearCacheGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		Task<ConnectionStatus> IndicesClearCacheGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_close
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		ConnectionStatus IndicesClosePost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_close
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		Task<ConnectionStatus> IndicesClosePostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		ConnectionStatus IndicesCreatePut(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		Task<ConnectionStatus> IndicesCreatePutAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		ConnectionStatus IndicesCreatePost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		Task<ConnectionStatus> IndicesCreatePostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>DELETE /
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/</pre>	
		///</summary>
		ConnectionStatus IndicesDeleteDelete(NameValueCollection queryString = null);
		
		///<summary>DELETE /
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesDeleteDeleteAsync(NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or empty string to delete all indices</param>
		ConnectionStatus IndicesDeleteDelete(string index, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or empty string to delete all indices</param>
		Task<ConnectionStatus> IndicesDeleteDeleteAsync(string index, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be deleted</param>
		ConnectionStatus IndicesDeleteAliasDelete(string index, string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be deleted</param>
		Task<ConnectionStatus> IndicesDeleteAliasDeleteAsync(string index, string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` for all indices</param>
		///<param name="type">The name of the document type to delete</param>
		ConnectionStatus IndicesDeleteMappingDelete(string index, string type, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` for all indices</param>
		///<param name="type">The name of the document type to delete</param>
		Task<ConnectionStatus> IndicesDeleteMappingDeleteAsync(string index, string type, NameValueCollection queryString = null);
		
		///<summary>DELETE /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		ConnectionStatus IndicesDeleteTemplateDelete(string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		Task<ConnectionStatus> IndicesDeleteTemplateDeleteAsync(string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesDeleteWarmerDelete(string index, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesDeleteWarmerDeleteAsync(string index, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		ConnectionStatus IndicesDeleteWarmerDelete(string index, string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		Task<ConnectionStatus> IndicesDeleteWarmerDeleteAsync(string index, string name, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		///<param name="type">A comma-separated list of document types to register warmer for; use `_all` or empty string to perform the operation on all types</param>
		ConnectionStatus IndicesDeleteWarmerDelete(string index, string name, string type, NameValueCollection queryString = null);
		
		///<summary>DELETE /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		///<param name="type">A comma-separated list of document types to register warmer for; use `_all` or empty string to perform the operation on all types</param>
		Task<ConnectionStatus> IndicesDeleteWarmerDeleteAsync(string index, string name, string type, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-indices-exists/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		ConnectionStatus IndicesExistsHead(string index, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-indices-exists/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		Task<ConnectionStatus> IndicesExistsHeadAsync(string index, NameValueCollection queryString = null);
		
		///<summary>HEAD /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesExistsAliasHead(string name, NameValueCollection queryString = null);
		
		///<summary>HEAD /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesExistsAliasHeadAsync(string name, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesExistsAliasHead(string index, string name, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesExistsAliasHeadAsync(string index, string name, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		ConnectionStatus IndicesExistsTypeHead(string index, string type, NameValueCollection queryString = null);
		
		///<summary>HEAD /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		Task<ConnectionStatus> IndicesExistsTypeHeadAsync(string index, string type, NameValueCollection queryString = null);
		
		///<summary>POST /_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		ConnectionStatus IndicesFlushPost(NameValueCollection queryString = null);
		
		///<summary>POST /_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesFlushPostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesFlushPost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesFlushPostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		ConnectionStatus IndicesFlushGet(NameValueCollection queryString = null);
		
		///<summary>GET /_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesFlushGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesFlushGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesFlushGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesGetAliasGet(string name, NameValueCollection queryString = null);
		
		///<summary>GET /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesGetAliasGetAsync(string name, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesGetAliasGet(string index, string name, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesGetAliasGetAsync(string index, string name, NameValueCollection queryString = null);
		
		///<summary>GET /_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		ConnectionStatus IndicesGetAliasesGet(NameValueCollection queryString = null);
		
		///<summary>GET /_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetAliasesGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		ConnectionStatus IndicesGetAliasesGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		Task<ConnectionStatus> IndicesGetAliasesGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		ConnectionStatus IndicesGetMappingGet(NameValueCollection queryString = null);
		
		///<summary>GET /_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetMappingGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		ConnectionStatus IndicesGetMappingGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		Task<ConnectionStatus> IndicesGetMappingGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		ConnectionStatus IndicesGetMappingGet(string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		Task<ConnectionStatus> IndicesGetMappingGetAsync(string index, string type, NameValueCollection queryString = null);
		
		///<summary>GET /_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/</pre>	
		///</summary>
		ConnectionStatus IndicesGetSettingsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetSettingsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesGetSettingsGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesGetSettingsGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_template
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		ConnectionStatus IndicesGetTemplateGet(NameValueCollection queryString = null);
		
		///<summary>GET /_template
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetTemplateGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		ConnectionStatus IndicesGetTemplateGet(string name, NameValueCollection queryString = null);
		
		///<summary>GET /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		Task<ConnectionStatus> IndicesGetTemplateGetAsync(string name, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		ConnectionStatus IndicesGetWarmerGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesGetWarmerGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		ConnectionStatus IndicesGetWarmerGet(string index, string name, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		Task<ConnectionStatus> IndicesGetWarmerGetAsync(string index, string name, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		ConnectionStatus IndicesGetWarmerGet(string index, string name, string type, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		Task<ConnectionStatus> IndicesGetWarmerGetAsync(string index, string name, string type, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_open
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		ConnectionStatus IndicesOpenPost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_open
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		Task<ConnectionStatus> IndicesOpenPostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>POST /_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		ConnectionStatus IndicesOptimizePost(NameValueCollection queryString = null);
		
		///<summary>POST /_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesOptimizePostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesOptimizePost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesOptimizePostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		ConnectionStatus IndicesOptimizeGet(NameValueCollection queryString = null);
		
		///<summary>GET /_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesOptimizeGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesOptimizeGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesOptimizeGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndexPutAliasPut(string index, string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndexPutAliasPutAsync(string index, string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndicesPutAliasPut(string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndicesPutAliasPutAsync(string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_alias
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndexPutAliasPut(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_alias
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndexPutAliasPutAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_alias
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndicesPutAliasPut(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_alias
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndicesPutAliasPutAsync(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		ConnectionStatus IndicesPutMappingPut(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		Task<ConnectionStatus> IndicesPutMappingPutAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		ConnectionStatus IndicesPutMappingPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		Task<ConnectionStatus> IndicesPutMappingPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/</pre>	
		///</summary>
		///<param name="body">The index settings to be updated</param>
		ConnectionStatus IndicesPutSettingsPut(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/</pre>	
		///</summary>
		///<param name="body">The index settings to be updated</param>
		Task<ConnectionStatus> IndicesPutSettingsPutAsync(object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		ConnectionStatus IndicesPutSettingsPut(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		Task<ConnectionStatus> IndicesPutSettingsPutAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		ConnectionStatus IndicesPutTemplatePut(string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		Task<ConnectionStatus> IndicesPutTemplatePutAsync(string name, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		ConnectionStatus IndicesPutTemplatePost(string name, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		Task<ConnectionStatus> IndicesPutTemplatePostAsync(string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		ConnectionStatus IndicesPutWarmerPut(string index, string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		Task<ConnectionStatus> IndicesPutWarmerPutAsync(string index, string name, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		ConnectionStatus IndicesPutWarmerPut(string index, string name, string type, object body, NameValueCollection queryString = null);
		
		///<summary>PUT /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		Task<ConnectionStatus> IndicesPutWarmerPutAsync(string index, string name, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		ConnectionStatus IndicesRefreshPost(NameValueCollection queryString = null);
		
		///<summary>POST /_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesRefreshPostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesRefreshPost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesRefreshPostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		ConnectionStatus IndicesRefreshGet(NameValueCollection queryString = null);
		
		///<summary>GET /_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesRefreshGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesRefreshGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesRefreshGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_segments
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-segments/</pre>	
		///</summary>
		ConnectionStatus IndicesSegmentsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_segments
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-segments/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesSegmentsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_segments
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-segments/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesSegmentsGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_segments
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-segments/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesSegmentsGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>POST /_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/</pre>	
		///</summary>
		ConnectionStatus IndicesSnapshotIndexPost(NameValueCollection queryString = null);
		
		///<summary>POST /_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesSnapshotIndexPostAsync(NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesSnapshotIndexPost(string index, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesSnapshotIndexPostAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET /_stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		ConnectionStatus IndicesStatsGet(NameValueCollection queryString = null);
		
		///<summary>GET /_stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesStatsGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndexStatsGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndexStatsGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>GET _stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a specific metric</param>
		ConnectionStatus IndicesStatsGet(MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET _stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="metric_family">Limit the information returned to a specific metric</param>
		Task<ConnectionStatus> IndicesStatsGetAsync(MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric_family">Limit the information returned to a specific metric</param>
		ConnectionStatus IndexStatsGet(string index, MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/{metric_family}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric_family">Limit the information returned to a specific metric</param>
		Task<ConnectionStatus> IndexStatsGetAsync(string index, MetricFamilyOptions metric_family, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/indexing/{indexing_types}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="indexing_types">A comma-separated list of document types to include in the `indexing` statistics</param>
		ConnectionStatus IndicesIndexingStatsGet(string indexing_types, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/indexing/{indexing_types}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="indexing_types">A comma-separated list of document types to include in the `indexing` statistics</param>
		Task<ConnectionStatus> IndicesIndexingStatsGetAsync(string indexing_types, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/search/{search_groups}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="search_groups">A comma-separated list of search groups to include in the `search` statistics</param>
		ConnectionStatus IndicesSearchStatsGet(string search_groups, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/search/{search_groups}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="search_groups">A comma-separated list of search groups to include in the `search` statistics</param>
		Task<ConnectionStatus> IndicesSearchStatsGetAsync(string search_groups, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/search/{search_groups}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="search_groups">A comma-separated list of search groups to include in the `search` statistics</param>
		ConnectionStatus IndexSearchStatsGet(string index, string search_groups, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/search/{search_groups}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="search_groups">A comma-separated list of search groups to include in the `search` statistics</param>
		Task<ConnectionStatus> IndexSearchStatsGetAsync(string index, string search_groups, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/fielddata/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `search` statistics</param>
		ConnectionStatus IndicesFieldDataStatsGet(string fields, NameValueCollection queryString = null);
		
		///<summary>GET /_stats/fielddata/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `search` statistics</param>
		Task<ConnectionStatus> IndicesFieldDataStatsGetAsync(string fields, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/fielddata/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `search` statistics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndexFieldDataStatsGet(string fields, string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_stats/fielddata/{fields}
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-stats/</pre>	
		///</summary>
		///<param name="fields">A comma-separated list of fields to return detailed information for, when returning the `search` statistics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndexFieldDataStatsGetAsync(string fields, string index, NameValueCollection queryString = null);
		
		///<summary>GET /_status
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-status/</pre>	
		///</summary>
		ConnectionStatus IndicesStatusGet(NameValueCollection queryString = null);
		
		///<summary>GET /_status
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-status/</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesStatusGetAsync(NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_status
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-status/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesStatusGet(string index, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_status
		///<pre>http://elasticsearch.org/guide/reference/api/admin-indices-status/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesStatusGetAsync(string index, NameValueCollection queryString = null);
		
		///<summary>POST /_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		ConnectionStatus IndicesUpdateAliasesPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_aliases
		///<pre>http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/</pre>	
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		Task<ConnectionStatus> IndicesUpdateAliasesPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/reference/api/validate/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /
		///<pre>http://elasticsearch.org/guide/</pre>	
		///</summary>
		ConnectionStatus InfoGet(NameValueCollection queryString = null);
		
		///<summary>GET /
		///<pre>http://elasticsearch.org/guide/</pre>	
		///</summary>
		Task<ConnectionStatus> InfoGetAsync(NameValueCollection queryString = null);
		
		///<summary>HEAD /
		///<pre>http://elasticsearch.org/guide/</pre>	
		///</summary>
		ConnectionStatus InfoHead(NameValueCollection queryString = null);
		
		///<summary>HEAD /
		///<pre>http://elasticsearch.org/guide/</pre>	
		///</summary>
		Task<ConnectionStatus> InfoHeadAsync(NameValueCollection queryString = null);
		
		///<summary>GET /_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_mget
		///<pre>http://elasticsearch.org/guide/reference/api/multi-get/</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_mlt
		///<pre>http://elasticsearch.org/guide/reference/api/more-like-this/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="body">A specific search request definition</param>
		ConnectionStatus MltGet(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_mlt
		///<pre>http://elasticsearch.org/guide/reference/api/more-like-this/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="body">A specific search request definition</param>
		Task<ConnectionStatus> MltGetAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_mlt
		///<pre>http://elasticsearch.org/guide/reference/api/more-like-this/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="body">A specific search request definition</param>
		ConnectionStatus MltPost(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_mlt
		///<pre>http://elasticsearch.org/guide/reference/api/more-like-this/</pre>	
		///</summary>
		///<param name="id">The document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="body">A specific search request definition</param>
		Task<ConnectionStatus> MltPostAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/reference/api/multi-search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_percolate
		///<pre>http://elasticsearch.org/guide/reference/api/percolate/</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		ConnectionStatus PercolateGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_percolate
		///<pre>http://elasticsearch.org/guide/reference/api/percolate/</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		Task<ConnectionStatus> PercolateGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_percolate
		///<pre>http://elasticsearch.org/guide/reference/api/percolate/</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		ConnectionStatus PercolatePost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_percolate
		///<pre>http://elasticsearch.org/guide/reference/api/percolate/</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		Task<ConnectionStatus> PercolatePostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollGet(string scroll_id, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollGetAsync(string scroll_id, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollPost(string scroll_id, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/scroll/</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollPostAsync(string scroll_id, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchGet(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchGetAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/reference/api/search/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestPost(object body, NameValueCollection queryString = null);
		
		///<summary>POST /_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestPostAsync(object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestPost(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestPostAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestGet(object body, NameValueCollection queryString = null);
		
		///<summary>GET /_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestGetAsync(object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestGet(string index, object body, NameValueCollection queryString = null);
		
		///<summary>GET /{index}/_suggest
		///<pre>http://elasticsearch.org/guide/reference/api/search/suggest/</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestGetAsync(string index, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_update
		///<pre>http://elasticsearch.org/guide/reference/api/update/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		ConnectionStatus UpdatePost(string id, string index, string type, object body, NameValueCollection queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_update
		///<pre>http://elasticsearch.org/guide/reference/api/update/</pre>	
		///</summary>
		///<param name="id">Document ID</param>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		Task<ConnectionStatus> UpdatePostAsync(string id, string index, string type, object body, NameValueCollection queryString = null);
		
	}
}