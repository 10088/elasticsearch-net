using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

///This file contains all the typed querystring parameters that are generated of the client spec.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 394e3e45e8

namespace Nest
{
	
	
	///<summary>Query string descriptor for BulkPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/bulk/
	///</pre>
	///</summary>
	public class BulkQueryString : FluentQueryString<BulkQueryString> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public BulkQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public BulkQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Explicitely set the replication type</summary>
		public BulkQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Default document type for items which don&#39;t provide one</summary>
		public BulkQueryString Type(string type)
		{
			this.Add("type", this.CreateString(type));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public BulkQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterHealthGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-health/
	///</pre>
	///</summary>
	public class ClusterHealthQueryString : FluentQueryString<ClusterHealthQueryString> 
	{
		///<summary>Specify the level of detail for returned information</summary>
		public ClusterHealthQueryString Level(LevelOptions level)
		{
			this.Add("level", this.CreateString(level));
			return this;
		}

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterHealthQueryString Local(bool local)
		{
			this.Add("local", this.CreateString(local));
			return this;
		}

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterHealthQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public ClusterHealthQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Wait until the specified number of shards is active</summary>
		public ClusterHealthQueryString WaitForActiveShards(int wait_for_active_shards)
		{
			this.Add("wait_for_active_shards", this.CreateString(wait_for_active_shards));
			return this;
		}

		///<summary>Wait until the specified number of nodes is available</summary>
		public ClusterHealthQueryString WaitForNodes(string wait_for_nodes)
		{
			this.Add("wait_for_nodes", this.CreateString(wait_for_nodes));
			return this;
		}

		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public ClusterHealthQueryString WaitForRelocatingShards(int wait_for_relocating_shards)
		{
			this.Add("wait_for_relocating_shards", this.CreateString(wait_for_relocating_shards));
			return this;
		}

		///<summary>Wait until cluster is in a specific state</summary>
		public ClusterHealthQueryString WaitForStatus(WaitForStatusOptions wait_for_status)
		{
			this.Add("wait_for_status", this.CreateString(wait_for_status));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterNodeHotThreadsGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/
	///</pre>
	///</summary>
	public class ClusterNodeHotThreadsQueryString : FluentQueryString<ClusterNodeHotThreadsQueryString> 
	{
		///<summary>The interval for the second sampling of threads</summary>
		public ClusterNodeHotThreadsQueryString Interval(string interval)
		{
			this.Add("interval", this.CreateString(interval));
			return this;
		}

		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public ClusterNodeHotThreadsQueryString Snapshots(int snapshots)
		{
			this.Add("snapshots", this.CreateString(snapshots));
			return this;
		}

		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public ClusterNodeHotThreadsQueryString Threads(int threads)
		{
			this.Add("threads", this.CreateString(threads));
			return this;
		}

		///<summary>The type to sample (default: cpu)</summary>
		public ClusterNodeHotThreadsQueryString Type(TypeOptions type)
		{
			this.Add("type", this.CreateString(type));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterNodeInfoGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/
	///</pre>
	///</summary>
	public class ClusterNodeInfoQueryString : FluentQueryString<ClusterNodeInfoQueryString> 
	{
		///<summary>Return all available information</summary>
		public ClusterNodeInfoQueryString All(bool all)
		{
			this.Add("all", this.CreateString(all));
			return this;
		}

		///<summary>Reset the default settings</summary>
		public ClusterNodeInfoQueryString Clear(bool clear)
		{
			this.Add("clear", this.CreateString(clear));
			return this;
		}

		///<summary>Return information about HTTP</summary>
		public ClusterNodeInfoQueryString Http(bool http)
		{
			this.Add("http", this.CreateString(http));
			return this;
		}

		///<summary>Return information about the JVM</summary>
		public ClusterNodeInfoQueryString Jvm(bool jvm)
		{
			this.Add("jvm", this.CreateString(jvm));
			return this;
		}

		///<summary>Return information about network</summary>
		public ClusterNodeInfoQueryString Network(bool network)
		{
			this.Add("network", this.CreateString(network));
			return this;
		}

		///<summary>Return information about the operating system</summary>
		public ClusterNodeInfoQueryString Os(bool os)
		{
			this.Add("os", this.CreateString(os));
			return this;
		}

		///<summary>Return information about plugins</summary>
		public ClusterNodeInfoQueryString Plugin(bool plugin)
		{
			this.Add("plugin", this.CreateString(plugin));
			return this;
		}

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeInfoQueryString Process(bool process)
		{
			this.Add("process", this.CreateString(process));
			return this;
		}

		///<summary>Return information about node settings</summary>
		public ClusterNodeInfoQueryString Settings(bool settings)
		{
			this.Add("settings", this.CreateString(settings));
			return this;
		}

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeInfoQueryString ThreadPool(bool thread_pool)
		{
			this.Add("thread_pool", this.CreateString(thread_pool));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public ClusterNodeInfoQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Return information about transport</summary>
		public ClusterNodeInfoQueryString Transport(bool transport)
		{
			this.Add("transport", this.CreateString(transport));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterNodeShutdownPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/
	///</pre>
	///</summary>
	public class ClusterNodeShutdownQueryString : FluentQueryString<ClusterNodeShutdownQueryString> 
	{
		///<summary>Set the delay for the operation (default: 1s)</summary>
		public ClusterNodeShutdownQueryString Delay(string delay)
		{
			this.Add("delay", this.CreateString(delay));
			return this;
		}

		///<summary>Exit the JVM as well (default: true)</summary>
		public ClusterNodeShutdownQueryString Exit(bool exit)
		{
			this.Add("exit", this.CreateString(exit));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterNodeStatsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/
	///</pre>
	///</summary>
	public class ClusterNodeStatsQueryString : FluentQueryString<ClusterNodeStatsQueryString> 
	{
		///<summary>Return all available information</summary>
		public ClusterNodeStatsQueryString All(bool all)
		{
			this.Add("all", this.CreateString(all));
			return this;
		}

		///<summary>Reset the default level of detail</summary>
		public ClusterNodeStatsQueryString Clear(bool clear)
		{
			this.Add("clear", this.CreateString(clear));
			return this;
		}

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public ClusterNodeStatsQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Return information about the filesystem</summary>
		public ClusterNodeStatsQueryString Fs(bool fs)
		{
			this.Add("fs", this.CreateString(fs));
			return this;
		}

		///<summary>Return information about HTTP</summary>
		public ClusterNodeStatsQueryString Http(bool http)
		{
			this.Add("http", this.CreateString(http));
			return this;
		}

		///<summary>Return information about indices</summary>
		public ClusterNodeStatsQueryString Indices(bool indices)
		{
			this.Add("indices", this.CreateString(indices));
			return this;
		}

		///<summary>Return information about the JVM</summary>
		public ClusterNodeStatsQueryString Jvm(bool jvm)
		{
			this.Add("jvm", this.CreateString(jvm));
			return this;
		}

		///<summary>Return information about network</summary>
		public ClusterNodeStatsQueryString Network(bool network)
		{
			this.Add("network", this.CreateString(network));
			return this;
		}

		///<summary>Return information about the operating system</summary>
		public ClusterNodeStatsQueryString Os(bool os)
		{
			this.Add("os", this.CreateString(os));
			return this;
		}

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeStatsQueryString Process(bool process)
		{
			this.Add("process", this.CreateString(process));
			return this;
		}

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeStatsQueryString ThreadPool(bool thread_pool)
		{
			this.Add("thread_pool", this.CreateString(thread_pool));
			return this;
		}

		///<summary>Return information about transport</summary>
		public ClusterNodeStatsQueryString Transport(bool transport)
		{
			this.Add("transport", this.CreateString(transport));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterReroutePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-reroute/
	///</pre>
	///</summary>
	public class ClusterRerouteQueryString : FluentQueryString<ClusterRerouteQueryString> 
	{
		///<summary>Simulate the operation only and return the resulting state</summary>
		public ClusterRerouteQueryString DryRun(bool dry_run)
		{
			this.Add("dry_run", this.CreateString(dry_run));
			return this;
		}

		///<summary>Don&#39;t return cluster state metadata (default: false)</summary>
		public ClusterRerouteQueryString FilterMetadata(bool filter_metadata)
		{
			this.Add("filter_metadata", this.CreateString(filter_metadata));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ClusterStateGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-state/
	///</pre>
	///</summary>
	public class ClusterStateQueryString : FluentQueryString<ClusterStateQueryString> 
	{
		///<summary>Do not return information about blocks</summary>
		public ClusterStateQueryString FilterBlocks(bool filter_blocks)
		{
			this.Add("filter_blocks", this.CreateString(filter_blocks));
			return this;
		}

		///<summary>Do not return information about index templates</summary>
		public ClusterStateQueryString FilterIndexTemplates(bool filter_index_templates)
		{
			this.Add("filter_index_templates", this.CreateString(filter_index_templates));
			return this;
		}

		///<summary>Limit returned metadata information to specific indices</summary>
		public ClusterStateQueryString FilterIndices(params string[] filter_indices)
		{
			this.Add("filter_indices", this.CreateString(filter_indices));
			return this;
		}

		///<summary>Do not return information about indices metadata</summary>
		public ClusterStateQueryString FilterMetadata(bool filter_metadata)
		{
			this.Add("filter_metadata", this.CreateString(filter_metadata));
			return this;
		}

		///<summary>Do not return information about nodes</summary>
		public ClusterStateQueryString FilterNodes(bool filter_nodes)
		{
			this.Add("filter_nodes", this.CreateString(filter_nodes));
			return this;
		}

		///<summary>Do not return information about shard allocation (`routing_table` and `routing_nodes`)</summary>
		public ClusterStateQueryString FilterRoutingTable(bool filter_routing_table)
		{
			this.Add("filter_routing_table", this.CreateString(filter_routing_table));
			return this;
		}

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterStateQueryString Local(bool local)
		{
			this.Add("local", this.CreateString(local));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public ClusterStateQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for CountPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/count/
	///</pre>
	///</summary>
	public class CountQueryString : FluentQueryString<CountQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public CountQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public CountQueryString MinScore(int min_score)
		{
			this.Add("min_score", this.CreateString(min_score));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specific routing value</summary>
		public CountQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public CountQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for CreatePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/index_/
	///</pre>
	///</summary>
	public class CreateQueryString : FluentQueryString<CreateQueryString> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public CreateQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>Specific document ID (when the POST method is used)</summary>
		public CreateQueryString Id(string id)
		{
			this.Add("id", this.CreateString(id));
			return this;
		}

		///<summary>ID of the parent document</summary>
		public CreateQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Percolator queries to execute while indexing the document</summary>
		public CreateQueryString Percolate(string percolate)
		{
			this.Add("percolate", this.CreateString(percolate));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public CreateQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific replication type</summary>
		public CreateQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Specific routing value</summary>
		public CreateQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public CreateQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Explicit timestamp for the document</summary>
		public CreateQueryString Timestamp(string timestamp)
		{
			this.Add("timestamp", this.CreateString(timestamp));
			return this;
		}

		///<summary>Expiration time for the document</summary>
		public CreateQueryString Ttl(string ttl)
		{
			this.Add("ttl", this.CreateString(ttl));
			return this;
		}

		///<summary>Explicit version number for concurrency control</summary>
		public CreateQueryString Version(int version)
		{
			this.Add("version", this.CreateString(version));
			return this;
		}

		///<summary>Specific version type</summary>
		public CreateQueryString VersionType(VersionTypeOptions version_type)
		{
			this.Add("version_type", this.CreateString(version_type));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for Delete
	///<pre>
	///http://elasticsearch.org/guide/reference/api/delete/
	///</pre>
	///</summary>
	public class DeleteQueryString : FluentQueryString<DeleteQueryString> 
	{
		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>ID of parent document</summary>
		public DeleteQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public DeleteQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific replication type</summary>
		public DeleteQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Specific routing value</summary>
		public DeleteQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public DeleteQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Explicit version number for concurrency control</summary>
		public DeleteQueryString Version(int version)
		{
			this.Add("version", this.CreateString(version));
			return this;
		}

		///<summary>Specific version type</summary>
		public DeleteQueryString VersionType(VersionTypeOptions version_type)
		{
			this.Add("version_type", this.CreateString(version_type));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/delete-by-query/
	///</pre>
	///</summary>
	public class DeleteByQueryQueryString : FluentQueryString<DeleteByQueryQueryString> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public DeleteByQueryQueryString Analyzer(string analyzer)
		{
			this.Add("analyzer", this.CreateString(analyzer));
			return this;
		}

		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteByQueryQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>The default operator for query string query (AND or OR)</summary>
		public DeleteByQueryQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.Add("default_operator", this.CreateString(default_operator));
			return this;
		}

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public DeleteByQueryQueryString Df(string df)
		{
			this.Add("df", this.CreateString(df));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public DeleteByQueryQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Specific replication type</summary>
		public DeleteByQueryQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Query in the Lucene query string syntax</summary>
		public DeleteByQueryQueryString Q(string q)
		{
			this.Add("q", this.CreateString(q));
			return this;
		}

		///<summary>Specific routing value</summary>
		public DeleteByQueryQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public DeleteByQueryQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public DeleteByQueryQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ExistsHead
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public class ExistsQueryString : FluentQueryString<ExistsQueryString> 
	{
		///<summary>The ID of the parent document</summary>
		public ExistsQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExistsQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public ExistsQueryString Realtime(bool realtime)
		{
			this.Add("realtime", this.CreateString(realtime));
			return this;
		}

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public ExistsQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific routing value</summary>
		public ExistsQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ExplainGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/explain/
	///</pre>
	///</summary>
	public class ExplainQueryString : FluentQueryString<ExplainQueryString> 
	{
		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public ExplainQueryString AnalyzeWildcard(bool analyze_wildcard)
		{
			this.Add("analyze_wildcard", this.CreateString(analyze_wildcard));
			return this;
		}

		///<summary>The analyzer for the query string query</summary>
		public ExplainQueryString Analyzer(string analyzer)
		{
			this.Add("analyzer", this.CreateString(analyzer));
			return this;
		}

		///<summary>The default operator for query string query (AND or OR)</summary>
		public ExplainQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.Add("default_operator", this.CreateString(default_operator));
			return this;
		}

		///<summary>The default field for query string query (default: _all)</summary>
		public ExplainQueryString Df(string df)
		{
			this.Add("df", this.CreateString(df));
			return this;
		}

		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ExplainQueryString Lenient(bool lenient)
		{
			this.Add("lenient", this.CreateString(lenient));
			return this;
		}

		///<summary>Specify whether query terms should be lowercased</summary>
		public ExplainQueryString LowercaseExpandedTerms(bool lowercase_expanded_terms)
		{
			this.Add("lowercase_expanded_terms", this.CreateString(lowercase_expanded_terms));
			return this;
		}

		///<summary>The ID of the parent document</summary>
		public ExplainQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExplainQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Query in the Lucene query string syntax</summary>
		public ExplainQueryString Q(string q)
		{
			this.Add("q", this.CreateString(q));
			return this;
		}

		///<summary>Specific routing value</summary>
		public ExplainQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ExplainQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public ExplainQueryString Source(params string[] _source)
		{
			this.Add("_source", this.CreateString(_source));
			return this;
		}

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainQueryString SourceExclude(params string[] _source_exclude)
		{
			this.Add("_source_exclude", this.CreateString(_source_exclude));
			return this;
		}

		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainQueryString SourceInclude(params string[] _source_include)
		{
			this.Add("_source_include", this.CreateString(_source_include));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for Get
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public class GetQueryString : FluentQueryString<GetQueryString> 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>The ID of the parent document</summary>
		public GetQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetQueryString Realtime(bool realtime)
		{
			this.Add("realtime", this.CreateString(realtime));
			return this;
		}

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific routing value</summary>
		public GetQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetQueryString Source(params string[] _source)
		{
			this.Add("_source", this.CreateString(_source));
			return this;
		}

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetQueryString SourceExclude(params string[] _source_exclude)
		{
			this.Add("_source_exclude", this.CreateString(_source_exclude));
			return this;
		}

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetQueryString SourceInclude(params string[] _source_include)
		{
			this.Add("_source_include", this.CreateString(_source_include));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for GetSource
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public class GetSourceQueryString : FluentQueryString<GetSourceQueryString> 
	{
		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetSourceQueryString Exclude(params string[] exclude)
		{
			this.Add("exclude", this.CreateString(exclude));
			return this;
		}

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetSourceQueryString Include(params string[] include)
		{
			this.Add("include", this.CreateString(include));
			return this;
		}

		///<summary>The ID of the parent document</summary>
		public GetSourceQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetSourceQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetSourceQueryString Realtime(bool realtime)
		{
			this.Add("realtime", this.CreateString(realtime));
			return this;
		}

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetSourceQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific routing value</summary>
		public GetSourceQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndexPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/index_/
	///</pre>
	///</summary>
	public class IndexQueryString : FluentQueryString<IndexQueryString> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public IndexQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>Explicit operation type</summary>
		public IndexQueryString OpType(OpTypeOptions op_type)
		{
			this.Add("op_type", this.CreateString(op_type));
			return this;
		}

		///<summary>ID of the parent document</summary>
		public IndexQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Percolator queries to execute while indexing the document</summary>
		public IndexQueryString Percolate(string percolate)
		{
			this.Add("percolate", this.CreateString(percolate));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public IndexQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific replication type</summary>
		public IndexQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Specific routing value</summary>
		public IndexQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public IndexQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Explicit timestamp for the document</summary>
		public IndexQueryString Timestamp(string timestamp)
		{
			this.Add("timestamp", this.CreateString(timestamp));
			return this;
		}

		///<summary>Expiration time for the document</summary>
		public IndexQueryString Ttl(string ttl)
		{
			this.Add("ttl", this.CreateString(ttl));
			return this;
		}

		///<summary>Explicit version number for concurrency control</summary>
		public IndexQueryString Version(int version)
		{
			this.Add("version", this.CreateString(version));
			return this;
		}

		///<summary>Specific version type</summary>
		public IndexQueryString VersionType(VersionTypeOptions version_type)
		{
			this.Add("version_type", this.CreateString(version_type));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesAnalyzeGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/
	///</pre>
	///</summary>
	public class IndicesAnalyzeQueryString : FluentQueryString<IndicesAnalyzeQueryString> 
	{
		///<summary>The name of the analyzer to use</summary>
		public IndicesAnalyzeQueryString Analyzer(string analyzer)
		{
			this.Add("analyzer", this.CreateString(analyzer));
			return this;
		}

		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public IndicesAnalyzeQueryString Field(string field)
		{
			this.Add("field", this.CreateString(field));
			return this;
		}

		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public IndicesAnalyzeQueryString Filters(params string[] filters)
		{
			this.Add("filters", this.CreateString(filters));
			return this;
		}

		///<summary>The name of the index to scope the operation</summary>
		public IndicesAnalyzeQueryString Index(string index)
		{
			this.Add("index", this.CreateString(index));
			return this;
		}

		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public IndicesAnalyzeQueryString PreferLocal(bool prefer_local)
		{
			this.Add("prefer_local", this.CreateString(prefer_local));
			return this;
		}

		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public IndicesAnalyzeQueryString Text(string text)
		{
			this.Add("text", this.CreateString(text));
			return this;
		}

		///<summary>The name of the tokenizer to use for the analysis</summary>
		public IndicesAnalyzeQueryString Tokenizer(string tokenizer)
		{
			this.Add("tokenizer", this.CreateString(tokenizer));
			return this;
		}

		///<summary>Format of the output</summary>
		public IndicesAnalyzeQueryString Format(FormatOptions format)
		{
			this.Add("format", this.CreateString(format));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesClearCachePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/
	///</pre>
	///</summary>
	public class IndicesClearCacheQueryString : FluentQueryString<IndicesClearCacheQueryString> 
	{
		///<summary>Clear field data</summary>
		public IndicesClearCacheQueryString FieldData(bool field_data)
		{
			this.Add("field_data", this.CreateString(field_data));
			return this;
		}

		///<summary>Clear field data</summary>
		public IndicesClearCacheQueryString Fielddata(bool fielddata)
		{
			this.Add("fielddata", this.CreateString(fielddata));
			return this;
		}

		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public IndicesClearCacheQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Clear filter caches</summary>
		public IndicesClearCacheQueryString Filter(bool filter)
		{
			this.Add("filter", this.CreateString(filter));
			return this;
		}

		///<summary>Clear filter caches</summary>
		public IndicesClearCacheQueryString FilterCache(bool filter_cache)
		{
			this.Add("filter_cache", this.CreateString(filter_cache));
			return this;
		}

		///<summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
		public IndicesClearCacheQueryString FilterKeys(bool filter_keys)
		{
			this.Add("filter_keys", this.CreateString(filter_keys));
			return this;
		}

		///<summary>Clear ID caches for parent/child</summary>
		public IndicesClearCacheQueryString Id(bool id)
		{
			this.Add("id", this.CreateString(id));
			return this;
		}

		///<summary>Clear ID caches for parent/child</summary>
		public IndicesClearCacheQueryString IdCache(bool id_cache)
		{
			this.Add("id_cache", this.CreateString(id_cache));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesClearCacheQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>A comma-separated list of index name to limit the operation</summary>
		public IndicesClearCacheQueryString Index(params string[] index)
		{
			this.Add("index", this.CreateString(index));
			return this;
		}

		///<summary>Clear the recycler cache</summary>
		public IndicesClearCacheQueryString Recycler(bool recycler)
		{
			this.Add("recycler", this.CreateString(recycler));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesClosePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/
	///</pre>
	///</summary>
	public class IndicesCloseQueryString : FluentQueryString<IndicesCloseQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesCloseQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesCloseQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesCreatePut
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/
	///</pre>
	///</summary>
	public class IndicesCreateQueryString : FluentQueryString<IndicesCreateQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesCreateQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesCreateQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesDelete
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/
	///</pre>
	///</summary>
	public class IndicesDeleteQueryString : FluentQueryString<IndicesDeleteQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesDeleteQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesDeleteAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesDeleteAliasQueryString : FluentQueryString<IndicesDeleteAliasQueryString> 
	{
		///<summary>Explicit timestamp for the document</summary>
		public IndicesDeleteAliasQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteAliasQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/
	///</pre>
	///</summary>
	public class IndicesDeleteMappingQueryString : FluentQueryString<IndicesDeleteMappingQueryString> 
	{
		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteMappingQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesDeleteTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/
	///</pre>
	///</summary>
	public class IndicesDeleteTemplateQueryString : FluentQueryString<IndicesDeleteTemplateQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesDeleteTemplateQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteTemplateQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesDeleteWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/
	///</pre>
	///</summary>
	public class IndicesDeleteWarmerQueryString : FluentQueryString<IndicesDeleteWarmerQueryString> 
	{
		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteWarmerQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesExistsAliasHead
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesExistsAliasQueryString : FluentQueryString<IndicesExistsAliasQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsAliasQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesExistsTypeHead
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/
	///</pre>
	///</summary>
	public class IndicesExistsTypeQueryString : FluentQueryString<IndicesExistsTypeQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsTypeQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesFlushPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/
	///</pre>
	///</summary>
	public class IndicesFlushQueryString : FluentQueryString<IndicesFlushQueryString> 
	{
		///<summary>TODO: ?</summary>
		public IndicesFlushQueryString Force(bool force)
		{
			this.Add("force", this.CreateString(force));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesFlushQueryString Full(bool full)
		{
			this.Add("full", this.CreateString(full));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesFlushQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public IndicesFlushQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesGetAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesGetAliasQueryString : FluentQueryString<IndicesGetAliasQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesGetAliasQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesGetAliases
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesGetAliasesQueryString : FluentQueryString<IndicesGetAliasesQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesGetAliasesQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesGetFieldMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html
	///</pre>
	///</summary>
	public class IndicesGetFieldMappingQueryString : FluentQueryString<IndicesGetFieldMappingQueryString> 
	{
		///<summary>Whether the default mapping values should be returned as well</summary>
		public IndicesGetFieldMappingQueryString IncludeDefaults(bool include_defaults)
		{
			this.Add("include_defaults", this.CreateString(include_defaults));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesOpenPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/
	///</pre>
	///</summary>
	public class IndicesOpenQueryString : FluentQueryString<IndicesOpenQueryString> 
	{
		///<summary>Explicit operation timeout</summary>
		public IndicesOpenQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesOpenQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesOptimizePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/
	///</pre>
	///</summary>
	public class IndicesOptimizeQueryString : FluentQueryString<IndicesOptimizeQueryString> 
	{
		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public IndicesOptimizeQueryString Flush(bool flush)
		{
			this.Add("flush", this.CreateString(flush));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesOptimizeQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public IndicesOptimizeQueryString MaxNumSegments(int max_num_segments)
		{
			this.Add("max_num_segments", this.CreateString(max_num_segments));
			return this;
		}

		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public IndicesOptimizeQueryString OnlyExpungeDeletes(bool only_expunge_deletes)
		{
			this.Add("only_expunge_deletes", this.CreateString(only_expunge_deletes));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesOptimizeQueryString OperationThreading(string operation_threading)
		{
			this.Add("operation_threading", this.CreateString(operation_threading));
			return this;
		}

		///<summary>Specify whether the index should be refreshed after performing the operation (default: true)</summary>
		public IndicesOptimizeQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public IndicesOptimizeQueryString WaitForMerge(bool wait_for_merge)
		{
			this.Add("wait_for_merge", this.CreateString(wait_for_merge));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndexPutAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesPutAliasQueryString : FluentQueryString<IndicesPutAliasQueryString> 
	{
		///<summary>Explicit timestamp for the document</summary>
		public IndicesPutAliasQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutAliasQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/
	///</pre>
	///</summary>
	public class IndicesPutMappingQueryString : FluentQueryString<IndicesPutMappingQueryString> 
	{
		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public IndicesPutMappingQueryString IgnoreConflicts(bool ignore_conflicts)
		{
			this.Add("ignore_conflicts", this.CreateString(ignore_conflicts));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public IndicesPutMappingQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutMappingQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/
	///</pre>
	///</summary>
	public class IndicesPutSettingsQueryString : FluentQueryString<IndicesPutSettingsQueryString> 
	{
		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutSettingsQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesPutTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/
	///</pre>
	///</summary>
	public class IndicesPutTemplateQueryString : FluentQueryString<IndicesPutTemplateQueryString> 
	{
		///<summary>The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)</summary>
		public IndicesPutTemplateQueryString Order(int order)
		{
			this.Add("order", this.CreateString(order));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public IndicesPutTemplateQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutTemplateQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesPutWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/
	///</pre>
	///</summary>
	public class IndicesPutWarmerQueryString : FluentQueryString<IndicesPutWarmerQueryString> 
	{
		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutWarmerQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesRefreshPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/
	///</pre>
	///</summary>
	public class IndicesRefreshQueryString : FluentQueryString<IndicesRefreshQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesRefreshQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesRefreshQueryString OperationThreading(string operation_threading)
		{
			this.Add("operation_threading", this.CreateString(operation_threading));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesSegmentsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-segments/
	///</pre>
	///</summary>
	public class IndicesSegmentsQueryString : FluentQueryString<IndicesSegmentsQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesSegmentsQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesSegmentsQueryString OperationThreading(string operation_threading)
		{
			this.Add("operation_threading", this.CreateString(operation_threading));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesSnapshotIndexPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/
	///</pre>
	///</summary>
	public class IndicesSnapshotIndexQueryString : FluentQueryString<IndicesSnapshotIndexQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesSnapshotIndexQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesStatsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-stats/
	///</pre>
	///</summary>
	public class IndicesStatsQueryString : FluentQueryString<IndicesStatsQueryString> 
	{
		///<summary>Return all available information</summary>
		public IndicesStatsQueryString All(bool all)
		{
			this.Add("all", this.CreateString(all));
			return this;
		}

		///<summary>Reset the default level of detail</summary>
		public IndicesStatsQueryString Clear(bool clear)
		{
			this.Add("clear", this.CreateString(clear));
			return this;
		}

		///<summary>Return information about completion suggester stats</summary>
		public IndicesStatsQueryString Completion(bool completion)
		{
			this.Add("completion", this.CreateString(completion));
			return this;
		}

		///<summary>A comma-separated list of fields for `completion` metric (supports wildcards)</summary>
		public IndicesStatsQueryString CompletionFields(params string[] completion_fields)
		{
			this.Add("completion_fields", this.CreateString(completion_fields));
			return this;
		}

		///<summary>Return information about indexed and deleted documents</summary>
		public IndicesStatsQueryString Docs(bool docs)
		{
			this.Add("docs", this.CreateString(docs));
			return this;
		}

		///<summary>Return information about field data</summary>
		public IndicesStatsQueryString Fielddata(bool fielddata)
		{
			this.Add("fielddata", this.CreateString(fielddata));
			return this;
		}

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public IndicesStatsQueryString FielddataFields(params string[] fielddata_fields)
		{
			this.Add("fielddata_fields", this.CreateString(fielddata_fields));
			return this;
		}

		///<summary>A comma-separated list of fields for `fielddata` and `completion` metric (supports wildcards)</summary>
		public IndicesStatsQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Return information about filter cache</summary>
		public IndicesStatsQueryString FilterCache(bool filter_cache)
		{
			this.Add("filter_cache", this.CreateString(filter_cache));
			return this;
		}

		///<summary>Return information about flush operations</summary>
		public IndicesStatsQueryString Flush(bool flush)
		{
			this.Add("flush", this.CreateString(flush));
			return this;
		}

		///<summary>Return information about get operations</summary>
		public IndicesStatsQueryString Get(bool get)
		{
			this.Add("get", this.CreateString(get));
			return this;
		}

		///<summary>A comma-separated list of search groups for `search` statistics</summary>
		public IndicesStatsQueryString Groups(bool groups)
		{
			this.Add("groups", this.CreateString(groups));
			return this;
		}

		///<summary>Return information about ID cache</summary>
		public IndicesStatsQueryString IdCache(bool id_cache)
		{
			this.Add("id_cache", this.CreateString(id_cache));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatsQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Return information about indexing operations</summary>
		public IndicesStatsQueryString Indexing(bool indexing)
		{
			this.Add("indexing", this.CreateString(indexing));
			return this;
		}

		///<summary>Return information about merge operations</summary>
		public IndicesStatsQueryString Merge(bool merge)
		{
			this.Add("merge", this.CreateString(merge));
			return this;
		}

		///<summary>Return information about refresh operations</summary>
		public IndicesStatsQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Return information about search operations; use the `groups` parameter to include information for specific search groups</summary>
		public IndicesStatsQueryString Search(bool search)
		{
			this.Add("search", this.CreateString(search));
			return this;
		}

		///<summary>Return information about the size of the index</summary>
		public IndicesStatsQueryString Store(bool store)
		{
			this.Add("store", this.CreateString(store));
			return this;
		}

		///<summary>Return information about warmers</summary>
		public IndicesStatsQueryString Warmer(bool warmer)
		{
			this.Add("warmer", this.CreateString(warmer));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesStatusGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-status/
	///</pre>
	///</summary>
	public class IndicesStatusQueryString : FluentQueryString<IndicesStatusQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatusQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesStatusQueryString OperationThreading(string operation_threading)
		{
			this.Add("operation_threading", this.CreateString(operation_threading));
			return this;
		}

		///<summary>Return information about shard recovery</summary>
		public IndicesStatusQueryString Recovery(bool recovery)
		{
			this.Add("recovery", this.CreateString(recovery));
			return this;
		}

		///<summary>TODO: ?</summary>
		public IndicesStatusQueryString Snapshot(bool snapshot)
		{
			this.Add("snapshot", this.CreateString(snapshot));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesUpdateAliasesPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public class IndicesUpdateAliasesQueryString : FluentQueryString<IndicesUpdateAliasesQueryString> 
	{
		///<summary>Request timeout</summary>
		public IndicesUpdateAliasesQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify timeout for connection to master</summary>
		public IndicesUpdateAliasesQueryString MasterTimeout(string master_timeout)
		{
			this.Add("master_timeout", this.CreateString(master_timeout));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for IndicesValidateQueryGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/validate/
	///</pre>
	///</summary>
	public class ValidateQueryQueryString : FluentQueryString<ValidateQueryQueryString> 
	{
		///<summary>Return detailed information about the error</summary>
		public ValidateQueryQueryString Explain(bool explain)
		{
			this.Add("explain", this.CreateString(explain));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public ValidateQueryQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>TODO: ?</summary>
		public ValidateQueryQueryString OperationThreading(string operation_threading)
		{
			this.Add("operation_threading", this.CreateString(operation_threading));
			return this;
		}

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ValidateQueryQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

		///<summary>Query in the Lucene query string syntax</summary>
		public ValidateQueryQueryString Q(string q)
		{
			this.Add("q", this.CreateString(q));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for MgetGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/multi-get/
	///</pre>
	///</summary>
	public class MgetQueryString : FluentQueryString<MgetQueryString> 
	{
		///<summary>A comma-separated list of fields to return in the response</summary>
		public MgetQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public MgetQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public MgetQueryString Realtime(bool realtime)
		{
			this.Add("realtime", this.CreateString(realtime));
			return this;
		}

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public MgetQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public MgetQueryString Source(params string[] _source)
		{
			this.Add("_source", this.CreateString(_source));
			return this;
		}

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MgetQueryString SourceExclude(params string[] _source_exclude)
		{
			this.Add("_source_exclude", this.CreateString(_source_exclude));
			return this;
		}

		///<summary>A list of fields to extract and return from the _source field</summary>
		public MgetQueryString SourceInclude(params string[] _source_include)
		{
			this.Add("_source_include", this.CreateString(_source_include));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for MltGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/more-like-this/
	///</pre>
	///</summary>
	public class MltQueryString : FluentQueryString<MltQueryString> 
	{
		///<summary>The boost factor</summary>
		public MltQueryString BoostTerms(int boost_terms)
		{
			this.Add("boost_terms", this.CreateString(boost_terms));
			return this;
		}

		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public MltQueryString MaxDocFreq(int max_doc_freq)
		{
			this.Add("max_doc_freq", this.CreateString(max_doc_freq));
			return this;
		}

		///<summary>The maximum query terms to be included in the generated query</summary>
		public MltQueryString MaxQueryTerms(int max_query_terms)
		{
			this.Add("max_query_terms", this.CreateString(max_query_terms));
			return this;
		}

		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public MltQueryString MaxWordLen(int max_word_len)
		{
			this.Add("max_word_len", this.CreateString(max_word_len));
			return this;
		}

		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public MltQueryString MinDocFreq(int min_doc_freq)
		{
			this.Add("min_doc_freq", this.CreateString(min_doc_freq));
			return this;
		}

		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public MltQueryString MinTermFreq(int min_term_freq)
		{
			this.Add("min_term_freq", this.CreateString(min_term_freq));
			return this;
		}

		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public MltQueryString MinWordLen(int min_word_len)
		{
			this.Add("min_word_len", this.CreateString(min_word_len));
			return this;
		}

		///<summary>Specific fields to perform the query against</summary>
		public MltQueryString MltFields(params string[] mlt_fields)
		{
			this.Add("mlt_fields", this.CreateString(mlt_fields));
			return this;
		}

		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public MltQueryString PercentTermsToMatch(int percent_terms_to_match)
		{
			this.Add("percent_terms_to_match", this.CreateString(percent_terms_to_match));
			return this;
		}

		///<summary>Specific routing value</summary>
		public MltQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The offset from which to return results</summary>
		public MltQueryString SearchFrom(int search_from)
		{
			this.Add("search_from", this.CreateString(search_from));
			return this;
		}

		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public MltQueryString SearchIndices(params string[] search_indices)
		{
			this.Add("search_indices", this.CreateString(search_indices));
			return this;
		}

		///<summary>The search query hint</summary>
		public MltQueryString SearchQueryHint(string search_query_hint)
		{
			this.Add("search_query_hint", this.CreateString(search_query_hint));
			return this;
		}

		///<summary>A scroll search request definition</summary>
		public MltQueryString SearchScroll(string search_scroll)
		{
			this.Add("search_scroll", this.CreateString(search_scroll));
			return this;
		}

		///<summary>The number of documents to return (default: 10)</summary>
		public MltQueryString SearchSize(int search_size)
		{
			this.Add("search_size", this.CreateString(search_size));
			return this;
		}

		///<summary>A specific search request definition (instead of using the request body)</summary>
		public MltQueryString SearchSource(string search_source)
		{
			this.Add("search_source", this.CreateString(search_source));
			return this;
		}

		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public MltQueryString SearchType(string search_type)
		{
			this.Add("search_type", this.CreateString(search_type));
			return this;
		}

		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public MltQueryString SearchTypes(params string[] search_types)
		{
			this.Add("search_types", this.CreateString(search_types));
			return this;
		}

		///<summary>A list of stop words to be ignored</summary>
		public MltQueryString StopWords(params string[] stop_words)
		{
			this.Add("stop_words", this.CreateString(stop_words));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for MsearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/multi-search/
	///</pre>
	///</summary>
	public class MsearchQueryString : FluentQueryString<MsearchQueryString> 
	{
		///<summary>Search operation type</summary>
		public MsearchQueryString SearchType(SearchTypeOptions search_type)
		{
			this.Add("search_type", this.CreateString(search_type));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for PercolateGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/percolate/
	///</pre>
	///</summary>
	public class PercolateQueryString : FluentQueryString<PercolateQueryString> 
	{
		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public PercolateQueryString PreferLocal(bool prefer_local)
		{
			this.Add("prefer_local", this.CreateString(prefer_local));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for ScrollGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/search/scroll/
	///</pre>
	///</summary>
	public class ScrollQueryString : FluentQueryString<ScrollQueryString> 
	{
		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public ScrollQueryString Scroll(string scroll)
		{
			this.Add("scroll", this.CreateString(scroll));
			return this;
		}

		///<summary>The scroll ID for scrolled search</summary>
		public ScrollQueryString ScrollId(string scroll_id)
		{
			this.Add("scroll_id", this.CreateString(scroll_id));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/search/
	///</pre>
	///</summary>
	public class SearchQueryString : FluentQueryString<SearchQueryString> 
	{
		///<summary>The analyzer to use for the query string</summary>
		public SearchQueryString Analyzer(string analyzer)
		{
			this.Add("analyzer", this.CreateString(analyzer));
			return this;
		}

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchQueryString AnalyzeWildcard(bool analyze_wildcard)
		{
			this.Add("analyze_wildcard", this.CreateString(analyze_wildcard));
			return this;
		}

		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchQueryString DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.Add("default_operator", this.CreateString(default_operator));
			return this;
		}

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchQueryString Df(string df)
		{
			this.Add("df", this.CreateString(df));
			return this;
		}

		///<summary>Specify whether to return detailed information about score computation as part of a hit</summary>
		public SearchQueryString Explain(bool explain)
		{
			this.Add("explain", this.CreateString(explain));
			return this;
		}

		///<summary>A comma-separated list of fields to return as part of a hit</summary>
		public SearchQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>Starting offset (default: 0)</summary>
		public SearchQueryString From(int from)
		{
			this.Add("from", this.CreateString(from));
			return this;
		}

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SearchQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Comma-separated list of index boosts</summary>
		public SearchQueryString IndicesBoost(params string[] indices_boost)
		{
			this.Add("indices_boost", this.CreateString(indices_boost));
			return this;
		}

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchQueryString Lenient(bool lenient)
		{
			this.Add("lenient", this.CreateString(lenient));
			return this;
		}

		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchQueryString LowercaseExpandedTerms(bool lowercase_expanded_terms)
		{
			this.Add("lowercase_expanded_terms", this.CreateString(lowercase_expanded_terms));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Query in the Lucene query string syntax</summary>
		public SearchQueryString Q(string q)
		{
			this.Add("q", this.CreateString(q));
			return this;
		}

		///<summary>A comma-separated list of specific routing values</summary>
		public SearchQueryString Routing(params string[] routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchQueryString Scroll(string scroll)
		{
			this.Add("scroll", this.CreateString(scroll));
			return this;
		}

		///<summary>Search operation type</summary>
		public SearchQueryString SearchType(SearchTypeOptions search_type)
		{
			this.Add("search_type", this.CreateString(search_type));
			return this;
		}

		///<summary>Number of hits to return (default: 10)</summary>
		public SearchQueryString Size(int size)
		{
			this.Add("size", this.CreateString(size));
			return this;
		}

		///<summary>A comma-separated list of &lt;field&gt;:&lt;direction&gt; pairs</summary>
		public SearchQueryString Sort(params string[] sort)
		{
			this.Add("sort", this.CreateString(sort));
			return this;
		}

		///<summary>The URL-encoded request definition using the Query DSL (instead of using request body)</summary>
		public SearchQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public SearchQueryString Source(params string[] _source)
		{
			this.Add("_source", this.CreateString(_source));
			return this;
		}

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SearchQueryString SourceExclude(params string[] _source_exclude)
		{
			this.Add("_source_exclude", this.CreateString(_source_exclude));
			return this;
		}

		///<summary>A list of fields to extract and return from the _source field</summary>
		public SearchQueryString SourceInclude(params string[] _source_include)
		{
			this.Add("_source_include", this.CreateString(_source_include));
			return this;
		}

		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public SearchQueryString Stats(params string[] stats)
		{
			this.Add("stats", this.CreateString(stats));
			return this;
		}

		///<summary>Specify which field to use for suggestions</summary>
		public SearchQueryString SuggestField(string suggest_field)
		{
			this.Add("suggest_field", this.CreateString(suggest_field));
			return this;
		}

		///<summary>Specify suggest mode</summary>
		public SearchQueryString SuggestMode(SuggestModeOptions suggest_mode)
		{
			this.Add("suggest_mode", this.CreateString(suggest_mode));
			return this;
		}

		///<summary>How many suggestions to return in response</summary>
		public SearchQueryString SuggestSize(int suggest_size)
		{
			this.Add("suggest_size", this.CreateString(suggest_size));
			return this;
		}

		///<summary>The source text for which the suggestions should be returned</summary>
		public SearchQueryString SuggestText(string suggest_text)
		{
			this.Add("suggest_text", this.CreateString(suggest_text));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public SearchQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Specify whether to return document version as part of a hit</summary>
		public SearchQueryString Version(bool version)
		{
			this.Add("version", this.CreateString(version));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for SuggestPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/search/suggest/
	///</pre>
	///</summary>
	public class SuggestQueryString : FluentQueryString<SuggestQueryString> 
	{
		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SuggestQueryString IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.Add("ignore_indices", this.CreateString(ignore_indices));
			return this;
		}

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SuggestQueryString Preference(string preference)
		{
			this.Add("preference", this.CreateString(preference));
			return this;
		}

		///<summary>Specific routing value</summary>
		public SuggestQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The URL-encoded request definition (instead of using request body)</summary>
		public SuggestQueryString Source(string source)
		{
			this.Add("source", this.CreateString(source));
			return this;
		}

	}
	
	
	///<summary>Query string descriptor for UpdatePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/update/
	///</pre>
	///</summary>
	public class UpdateQueryString : FluentQueryString<UpdateQueryString> 
	{
		///<summary>Explicit write consistency setting for the operation</summary>
		public UpdateQueryString Consistency(ConsistencyOptions consistency)
		{
			this.Add("consistency", this.CreateString(consistency));
			return this;
		}

		///<summary>A comma-separated list of fields to return in the response</summary>
		public UpdateQueryString Fields(params string[] fields)
		{
			this.Add("fields", this.CreateString(fields));
			return this;
		}

		///<summary>The script language (default: mvel)</summary>
		public UpdateQueryString Lang(string lang)
		{
			this.Add("lang", this.CreateString(lang));
			return this;
		}

		///<summary>ID of the parent document</summary>
		public UpdateQueryString Parent(string parent)
		{
			this.Add("parent", this.CreateString(parent));
			return this;
		}

		///<summary>Perform percolation during the operation; use specific registered query name, attribute, or wildcard</summary>
		public UpdateQueryString Percolate(string percolate)
		{
			this.Add("percolate", this.CreateString(percolate));
			return this;
		}

		///<summary>Refresh the index after performing the operation</summary>
		public UpdateQueryString Refresh(bool refresh)
		{
			this.Add("refresh", this.CreateString(refresh));
			return this;
		}

		///<summary>Specific replication type</summary>
		public UpdateQueryString Replication(ReplicationOptions replication)
		{
			this.Add("replication", this.CreateString(replication));
			return this;
		}

		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public UpdateQueryString RetryOnConflict(int retry_on_conflict)
		{
			this.Add("retry_on_conflict", this.CreateString(retry_on_conflict));
			return this;
		}

		///<summary>Specific routing value</summary>
		public UpdateQueryString Routing(string routing)
		{
			this.Add("routing", this.CreateString(routing));
			return this;
		}

		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public UpdateQueryString Script(string script)
		{
			this.Add("script", this.CreateString(script));
			return this;
		}

		///<summary>Explicit operation timeout</summary>
		public UpdateQueryString Timeout(string timeout)
		{
			this.Add("timeout", this.CreateString(timeout));
			return this;
		}

		///<summary>Explicit timestamp for the document</summary>
		public UpdateQueryString Timestamp(string timestamp)
		{
			this.Add("timestamp", this.CreateString(timestamp));
			return this;
		}

		///<summary>Expiration time for the document</summary>
		public UpdateQueryString Ttl(string ttl)
		{
			this.Add("ttl", this.CreateString(ttl));
			return this;
		}

		///<summary>Explicit version number for concurrency control</summary>
		public UpdateQueryString Version(int version)
		{
			this.Add("version", this.CreateString(version));
			return this;
		}

		///<summary>Specific version type</summary>
		public UpdateQueryString VersionType(VersionTypeOptions version_type)
		{
			this.Add("version_type", this.CreateString(version_type));
			return this;
		}

	}
	
	
}
 