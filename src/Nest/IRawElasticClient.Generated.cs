using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

///Generated File Please Do Not Edit Manually
namespace Nest
{
	///<summary>
	///Raw operations with elasticsearch
	///<pre>
	///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
	///</pre>
	///<pre>
	///Generated of commit 
	///</pre>
	///</summary>
	public interface IRawElasticClient
	{
		///<summary>POST /_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>POST /_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>POST /{index}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(string index, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>POST /{index}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(string index, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPost(string index, string type, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPostAsync(string index, string type, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /{index}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(string index, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /{index}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(string index, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		ConnectionStatus BulkPut(string index, string type, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_bulk
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html</pre>	
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		Task<ConnectionStatus> BulkPutAsync(string index, string type, object body, Func<BulkQueryString, BulkQueryString> queryString = null);
		
		///<summary>DELETE /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		ConnectionStatus ClearScrollDelete(string scroll_id, Func<ClearScrollQueryString, ClearScrollQueryString> queryString = null);
		
		///<summary>DELETE /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		Task<ConnectionStatus> ClearScrollDeleteAsync(string scroll_id, Func<ClearScrollQueryString, ClearScrollQueryString> queryString = null);
		
		///<summary>GET /_cluster/settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html</pre>	
		///</summary>
		ConnectionStatus ClusterGetSettings(Func<ClusterGetSettingsQueryString, ClusterGetSettingsQueryString> queryString = null);
		
		///<summary>GET /_cluster/settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterGetSettingsAsync(Func<ClusterGetSettingsQueryString, ClusterGetSettingsQueryString> queryString = null);
		
		///<summary>GET /_cluster/health
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html</pre>	
		///</summary>
		ConnectionStatus ClusterHealthGet(Func<ClusterHealthQueryString, ClusterHealthQueryString> queryString = null);
		
		///<summary>GET /_cluster/health
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterHealthGetAsync(Func<ClusterHealthQueryString, ClusterHealthQueryString> queryString = null);
		
		///<summary>GET /_cluster/health/{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html</pre>	
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		ConnectionStatus ClusterHealthGet(string index, Func<ClusterHealthQueryString, ClusterHealthQueryString> queryString = null);
		
		///<summary>GET /_cluster/health/{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html</pre>	
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		Task<ConnectionStatus> ClusterHealthGetAsync(string index, Func<ClusterHealthQueryString, ClusterHealthQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/hotthreads
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html</pre>	
		///</summary>
		ConnectionStatus ClusterNodeHotThreadsGet(Func<ClusterNodeHotThreadsQueryString, ClusterNodeHotThreadsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/hotthreads
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeHotThreadsGetAsync(Func<ClusterNodeHotThreadsQueryString, ClusterNodeHotThreadsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/hotthreads
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeHotThreadsGet(string node_id, Func<ClusterNodeHotThreadsQueryString, ClusterNodeHotThreadsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/hotthreads
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeHotThreadsGetAsync(string node_id, Func<ClusterNodeHotThreadsQueryString, ClusterNodeHotThreadsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html</pre>	
		///</summary>
		ConnectionStatus ClusterNodeInfoGet(Func<ClusterNodeInfoQueryString, ClusterNodeInfoQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeInfoGetAsync(Func<ClusterNodeInfoQueryString, ClusterNodeInfoQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeInfoGet(string node_id, Func<ClusterNodeInfoQueryString, ClusterNodeInfoQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeInfoGetAsync(string node_id, Func<ClusterNodeInfoQueryString, ClusterNodeInfoQueryString> queryString = null);
		
		///<summary>POST /_shutdown
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html</pre>	
		///</summary>
		ConnectionStatus ClusterNodeShutdownPost(Func<ClusterNodeShutdownQueryString, ClusterNodeShutdownQueryString> queryString = null);
		
		///<summary>POST /_shutdown
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeShutdownPostAsync(Func<ClusterNodeShutdownQueryString, ClusterNodeShutdownQueryString> queryString = null);
		
		///<summary>POST /_cluster/nodes/{node_id}/_shutdown
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		ConnectionStatus ClusterNodeShutdownPost(string node_id, Func<ClusterNodeShutdownQueryString, ClusterNodeShutdownQueryString> queryString = null);
		
		///<summary>POST /_cluster/nodes/{node_id}/_shutdown
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		Task<ConnectionStatus> ClusterNodeShutdownPostAsync(string node_id, Func<ClusterNodeShutdownQueryString, ClusterNodeShutdownQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html</pre>	
		///</summary>
		ConnectionStatus ClusterNodeStatsGet(Func<ClusterNodeStatsQueryString, ClusterNodeStatsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(Func<ClusterNodeStatsQueryString, ClusterNodeStatsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		ConnectionStatus ClusterNodeStatsGet(string node_id, Func<ClusterNodeStatsQueryString, ClusterNodeStatsQueryString> queryString = null);
		
		///<summary>GET /_cluster/nodes/{node_id}/stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html</pre>	
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		Task<ConnectionStatus> ClusterNodeStatsGetAsync(string node_id, Func<ClusterNodeStatsQueryString, ClusterNodeStatsQueryString> queryString = null);
		
		///<summary>PUT /_cluster/settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html</pre>	
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		ConnectionStatus ClusterPutSettings(object body, Func<ClusterPutSettingsQueryString, ClusterPutSettingsQueryString> queryString = null);
		
		///<summary>PUT /_cluster/settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html</pre>	
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		Task<ConnectionStatus> ClusterPutSettingsAsync(object body, Func<ClusterPutSettingsQueryString, ClusterPutSettingsQueryString> queryString = null);
		
		///<summary>POST /_cluster/reroute
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-reroute.html</pre>	
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		ConnectionStatus ClusterReroutePost(object body, Func<ClusterRerouteQueryString, ClusterRerouteQueryString> queryString = null);
		
		///<summary>POST /_cluster/reroute
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-reroute.html</pre>	
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		Task<ConnectionStatus> ClusterReroutePostAsync(object body, Func<ClusterRerouteQueryString, ClusterRerouteQueryString> queryString = null);
		
		///<summary>GET /_cluster/state
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-state.html</pre>	
		///</summary>
		ConnectionStatus ClusterStateGet(Func<ClusterStateQueryString, ClusterStateQueryString> queryString = null);
		
		///<summary>GET /_cluster/state
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-state.html</pre>	
		///</summary>
		Task<ConnectionStatus> ClusterStateGetAsync(Func<ClusterStateQueryString, ClusterStateQueryString> queryString = null);
		
		///<summary>POST /_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>POST /_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>POST /{index}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(string index, object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>POST /{index}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(string index, object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		ConnectionStatus CountPost(string index, string type, object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results (optional)</param>
		Task<ConnectionStatus> CountPostAsync(string index, string type, object body, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		ConnectionStatus CountGet(Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		Task<ConnectionStatus> CountGetAsync(Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /{index}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		ConnectionStatus CountGet(string index, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /{index}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		Task<ConnectionStatus> CountGetAsync(string index, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		ConnectionStatus CountGet(string index, string type, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_count
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		Task<ConnectionStatus> CountGetAsync(string index, string type, Func<CountQueryString, CountQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		ConnectionStatus Delete(string index, string type, string id, Func<DeleteQueryString, DeleteQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> DeleteAsync(string index, string type, string id, Func<DeleteQueryString, DeleteQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation</param>
		ConnectionStatus DeleteByQuery(string index, object body, Func<DeleteByQueryQueryString, DeleteByQueryQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation</param>
		Task<ConnectionStatus> DeleteByQueryAsync(string index, object body, Func<DeleteByQueryQueryString, DeleteByQueryQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation</param>
		ConnectionStatus DeleteByQuery(string index, string type, object body, Func<DeleteByQueryQueryString, DeleteByQueryQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation</param>
		Task<ConnectionStatus> DeleteByQueryAsync(string index, string type, object body, Func<DeleteByQueryQueryString, DeleteByQueryQueryString> queryString = null);
		
		///<summary>HEAD /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		ConnectionStatus ExistsHead(string index, string type, string id, Func<ExistsQueryString, ExistsQueryString> queryString = null);
		
		///<summary>HEAD /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> ExistsHeadAsync(string index, string type, string id, Func<ExistsQueryString, ExistsQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_explain
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		ConnectionStatus ExplainGet(string index, string type, string id, Func<ExplainQueryString, ExplainQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_explain
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> ExplainGetAsync(string index, string type, string id, Func<ExplainQueryString, ExplainQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_explain
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		ConnectionStatus ExplainPost(string index, string type, string id, object body, Func<ExplainQueryString, ExplainQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_explain
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		Task<ConnectionStatus> ExplainPostAsync(string index, string type, string id, object body, Func<ExplainQueryString, ExplainQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		ConnectionStatus Get(string index, string type, string id, Func<GetQueryString, GetQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> GetAsync(string index, string type, string id, Func<GetQueryString, GetQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_source
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		ConnectionStatus GetSource(string index, string type, string id, Func<GetSourceQueryString, GetSourceQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_source
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> GetSourceAsync(string index, string type, string id, Func<GetSourceQueryString, GetSourceQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPost(string index, string type, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPostAsync(string index, string type, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPost(string index, string type, string id, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPostAsync(string index, string type, string id, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPut(string index, string type, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPutAsync(string index, string type, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		ConnectionStatus IndexPut(string index, string type, string id, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/{id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		Task<ConnectionStatus> IndexPutAsync(string index, string type, string id, object body, Func<IndexQueryString, IndexQueryString> queryString = null);
		
		///<summary>GET /_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		ConnectionStatus IndicesAnalyzeGet(Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>GET /_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesAnalyzeGetAsync(Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>GET /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		ConnectionStatus IndicesAnalyzeGet(string index, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>GET /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		Task<ConnectionStatus> IndicesAnalyzeGetAsync(string index, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>POST /_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzePost(object body, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>POST /_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzePostAsync(object body, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>POST /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		ConnectionStatus IndicesAnalyzePost(string index, object body, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>POST /{index}/_analyze
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html</pre>	
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		Task<ConnectionStatus> IndicesAnalyzePostAsync(string index, object body, Func<AnalyzeQueryString, AnalyzeQueryString> queryString = null);
		
		///<summary>POST /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		ConnectionStatus IndicesClearCachePost(Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>POST /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesClearCachePostAsync(Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>POST /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		ConnectionStatus IndicesClearCachePost(string index, Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>POST /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		Task<ConnectionStatus> IndicesClearCachePostAsync(string index, Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>GET /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		ConnectionStatus IndicesClearCacheGet(Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>GET /_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesClearCacheGetAsync(Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>GET /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		ConnectionStatus IndicesClearCacheGet(string index, Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>GET /{index}/_cache/clear
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		Task<ConnectionStatus> IndicesClearCacheGetAsync(string index, Func<ClearCacheQueryString, ClearCacheQueryString> queryString = null);
		
		///<summary>POST /{index}/_close
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		ConnectionStatus IndicesClosePost(string index, Func<CloseIndexQueryString, CloseIndexQueryString> queryString = null);
		
		///<summary>POST /{index}/_close
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		Task<ConnectionStatus> IndicesClosePostAsync(string index, Func<CloseIndexQueryString, CloseIndexQueryString> queryString = null);
		
		///<summary>PUT /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		ConnectionStatus IndicesCreatePut(string index, object body, Func<CreateIndexQueryString, CreateIndexQueryString> queryString = null);
		
		///<summary>PUT /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		Task<ConnectionStatus> IndicesCreatePutAsync(string index, object body, Func<CreateIndexQueryString, CreateIndexQueryString> queryString = null);
		
		///<summary>POST /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		ConnectionStatus IndicesCreatePost(string index, object body, Func<CreateIndexQueryString, CreateIndexQueryString> queryString = null);
		
		///<summary>POST /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		Task<ConnectionStatus> IndicesCreatePostAsync(string index, object body, Func<CreateIndexQueryString, CreateIndexQueryString> queryString = null);
		
		///<summary>DELETE /
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html</pre>	
		///</summary>
		ConnectionStatus IndicesDelete(Func<DeleteIndexQueryString, DeleteIndexQueryString> queryString = null);
		
		///<summary>DELETE /
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesDeleteAsync(Func<DeleteIndexQueryString, DeleteIndexQueryString> queryString = null);
		
		///<summary>DELETE /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or empty string to delete all indices</param>
		ConnectionStatus IndicesDelete(string index, Func<DeleteIndexQueryString, DeleteIndexQueryString> queryString = null);
		
		///<summary>DELETE /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or empty string to delete all indices</param>
		Task<ConnectionStatus> IndicesDeleteAsync(string index, Func<DeleteIndexQueryString, DeleteIndexQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be deleted</param>
		ConnectionStatus IndicesDeleteAlias(string index, string name, Func<IndicesDeleteAliasQueryString, IndicesDeleteAliasQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be deleted</param>
		Task<ConnectionStatus> IndicesDeleteAliasAsync(string index, string name, Func<IndicesDeleteAliasQueryString, IndicesDeleteAliasQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` for all indices</param>
		///<param name="type">The name of the document type to delete</param>
		ConnectionStatus IndicesDeleteMapping(string index, string type, Func<DeleteMappingQueryString, DeleteMappingQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` for all indices</param>
		///<param name="type">The name of the document type to delete</param>
		Task<ConnectionStatus> IndicesDeleteMappingAsync(string index, string type, Func<DeleteMappingQueryString, DeleteMappingQueryString> queryString = null);
		
		///<summary>DELETE /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		ConnectionStatus IndicesDeleteTemplate(string name, Func<DeleteTemplateQueryString, DeleteTemplateQueryString> queryString = null);
		
		///<summary>DELETE /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		Task<ConnectionStatus> IndicesDeleteTemplateAsync(string name, Func<DeleteTemplateQueryString, DeleteTemplateQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesDeleteWarmer(string index, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesDeleteWarmerAsync(string index, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		ConnectionStatus IndicesDeleteWarmer(string index, string name, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>DELETE /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		Task<ConnectionStatus> IndicesDeleteWarmerAsync(string index, string name, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register warmer for; use `_all` or empty string to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		ConnectionStatus IndicesDeleteWarmer(string index, string type, string name, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>DELETE /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register warmer for; use `_all` or empty string to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to delete all warmers</param>
		Task<ConnectionStatus> IndicesDeleteWarmerAsync(string index, string type, string name, Func<DeleteWarmerQueryString, DeleteWarmerQueryString> queryString = null);
		
		///<summary>HEAD /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-settings.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		ConnectionStatus IndicesExistsHead(string index, Func<IndexExistsQueryString, IndexExistsQueryString> queryString = null);
		
		///<summary>HEAD /{index}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-settings.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		Task<ConnectionStatus> IndicesExistsHeadAsync(string index, Func<IndexExistsQueryString, IndexExistsQueryString> queryString = null);
		
		///<summary>HEAD /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesExistsAliasHead(string name, Func<IndicesExistsAliasQueryString, IndicesExistsAliasQueryString> queryString = null);
		
		///<summary>HEAD /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesExistsAliasHeadAsync(string name, Func<IndicesExistsAliasQueryString, IndicesExistsAliasQueryString> queryString = null);
		
		///<summary>HEAD /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesExistsAliasHead(string index, string name, Func<IndicesExistsAliasQueryString, IndicesExistsAliasQueryString> queryString = null);
		
		///<summary>HEAD /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesExistsAliasHeadAsync(string index, string name, Func<IndicesExistsAliasQueryString, IndicesExistsAliasQueryString> queryString = null);
		
		///<summary>HEAD /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-types-exists.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		ConnectionStatus IndicesExistsTypeHead(string index, string type, Func<IndicesExistsTypeQueryString, IndicesExistsTypeQueryString> queryString = null);
		
		///<summary>HEAD /{index}/{type}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-types-exists.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		Task<ConnectionStatus> IndicesExistsTypeHeadAsync(string index, string type, Func<IndicesExistsTypeQueryString, IndicesExistsTypeQueryString> queryString = null);
		
		///<summary>POST /_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		ConnectionStatus IndicesFlushPost(Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>POST /_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesFlushPostAsync(Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>POST /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesFlushPost(string index, Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>POST /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesFlushPostAsync(string index, Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>GET /_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		ConnectionStatus IndicesFlushGet(Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>GET /_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesFlushGetAsync(Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>GET /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesFlushGet(string index, Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>GET /{index}/_flush
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesFlushGetAsync(string index, Func<FlushQueryString, FlushQueryString> queryString = null);
		
		///<summary>GET /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesGetAlias(string name, Func<GetAliasesQueryString, GetAliasesQueryString> queryString = null);
		
		///<summary>GET /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesGetAliasAsync(string name, Func<GetAliasesQueryString, GetAliasesQueryString> queryString = null);
		
		///<summary>GET /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		ConnectionStatus IndicesGetAlias(string index, string name, Func<GetAliasesQueryString, GetAliasesQueryString> queryString = null);
		
		///<summary>GET /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		Task<ConnectionStatus> IndicesGetAliasAsync(string index, string name, Func<GetAliasesQueryString, GetAliasesQueryString> queryString = null);
		
		///<summary>GET /_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		ConnectionStatus IndicesGetAliases(Func<IndicesGetAliasesQueryString, IndicesGetAliasesQueryString> queryString = null);
		
		///<summary>GET /_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetAliasesAsync(Func<IndicesGetAliasesQueryString, IndicesGetAliasesQueryString> queryString = null);
		
		///<summary>GET /{index}/_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		ConnectionStatus IndicesGetAliases(string index, Func<IndicesGetAliasesQueryString, IndicesGetAliasesQueryString> queryString = null);
		
		///<summary>GET /{index}/_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		Task<ConnectionStatus> IndicesGetAliasesAsync(string index, Func<IndicesGetAliasesQueryString, IndicesGetAliasesQueryString> queryString = null);
		
		///<summary>GET /_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="field">A comma-separated list of fields</param>
		ConnectionStatus IndicesGetFieldMapping(string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="field">A comma-separated list of fields</param>
		Task<ConnectionStatus> IndicesGetFieldMappingAsync(string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		ConnectionStatus IndicesGetFieldMapping(string index, string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		Task<ConnectionStatus> IndicesGetFieldMappingAsync(string index, string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		ConnectionStatus IndicesGetFieldMapping(string index, string type, string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping/field/{field}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		Task<ConnectionStatus> IndicesGetFieldMappingAsync(string index, string type, string field, Func<IndicesGetFieldMappingQueryString, IndicesGetFieldMappingQueryString> queryString = null);
		
		///<summary>GET /_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		ConnectionStatus IndicesGetMapping(Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetMappingAsync(Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		ConnectionStatus IndicesGetMapping(string index, Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		Task<ConnectionStatus> IndicesGetMappingAsync(string index, Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		ConnectionStatus IndicesGetMapping(string index, string type, Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		Task<ConnectionStatus> IndicesGetMappingAsync(string index, string type, Func<GetMappingQueryString, GetMappingQueryString> queryString = null);
		
		///<summary>GET /_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		ConnectionStatus IndicesGetSettings(Func<GetIndexSettingsQueryString, GetIndexSettingsQueryString> queryString = null);
		
		///<summary>GET /_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetSettingsAsync(Func<GetIndexSettingsQueryString, GetIndexSettingsQueryString> queryString = null);
		
		///<summary>GET /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesGetSettings(string index, Func<GetIndexSettingsQueryString, GetIndexSettingsQueryString> queryString = null);
		
		///<summary>GET /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesGetSettingsAsync(string index, Func<GetIndexSettingsQueryString, GetIndexSettingsQueryString> queryString = null);
		
		///<summary>GET /_template
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		ConnectionStatus IndicesGetTemplate(Func<GetTemplateQueryString, GetTemplateQueryString> queryString = null);
		
		///<summary>GET /_template
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesGetTemplateAsync(Func<GetTemplateQueryString, GetTemplateQueryString> queryString = null);
		
		///<summary>GET /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		ConnectionStatus IndicesGetTemplate(string name, Func<GetTemplateQueryString, GetTemplateQueryString> queryString = null);
		
		///<summary>GET /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		Task<ConnectionStatus> IndicesGetTemplateAsync(string name, Func<GetTemplateQueryString, GetTemplateQueryString> queryString = null);
		
		///<summary>GET /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		ConnectionStatus IndicesGetWarmer(string index, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>GET /{index}/_warmer
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesGetWarmerAsync(string index, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>GET /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		ConnectionStatus IndicesGetWarmer(string index, string name, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>GET /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		Task<ConnectionStatus> IndicesGetWarmerAsync(string index, string name, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		ConnectionStatus IndicesGetWarmer(string index, string type, string name, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		Task<ConnectionStatus> IndicesGetWarmerAsync(string index, string type, string name, Func<GetWarmerQueryString, GetWarmerQueryString> queryString = null);
		
		///<summary>POST /{index}/_open
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		ConnectionStatus IndicesOpenPost(string index, Func<OpenIndexQueryString, OpenIndexQueryString> queryString = null);
		
		///<summary>POST /{index}/_open
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		Task<ConnectionStatus> IndicesOpenPostAsync(string index, Func<OpenIndexQueryString, OpenIndexQueryString> queryString = null);
		
		///<summary>POST /_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		ConnectionStatus IndicesOptimizePost(Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>POST /_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesOptimizePostAsync(Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>POST /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesOptimizePost(string index, Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>POST /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesOptimizePostAsync(string index, Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>GET /_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		ConnectionStatus IndicesOptimizeGet(Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>GET /_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesOptimizeGetAsync(Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>GET /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesOptimizeGet(string index, Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>GET /{index}/_optimize
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesOptimizeGetAsync(string index, Func<OptimizeQueryString, OptimizeQueryString> queryString = null);
		
		///<summary>PUT /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndexPutAlias(string index, string name, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /{index}/_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndexPutAliasAsync(string index, string name, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndicesPutAlias(string name, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /_alias/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndicesPutAliasAsync(string name, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /{index}/_alias
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndexPutAlias(string index, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /{index}/_alias
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="index">The name of the index with an alias</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndexPutAliasAsync(string index, object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /_alias
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		ConnectionStatus IndicesPutAlias(object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /_alias
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		Task<ConnectionStatus> IndicesPutAliasAsync(object body, Func<IndicesPutAliasQueryString, IndicesPutAliasQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		ConnectionStatus IndicesPutMapping(string index, string type, object body, Func<PutMappingQueryString, PutMappingQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		Task<ConnectionStatus> IndicesPutMappingAsync(string index, string type, object body, Func<PutMappingQueryString, PutMappingQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		ConnectionStatus IndicesPutMappingPost(string index, string type, object body, Func<PutMappingQueryString, PutMappingQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_mapping
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		Task<ConnectionStatus> IndicesPutMappingPostAsync(string index, string type, object body, Func<PutMappingQueryString, PutMappingQueryString> queryString = null);
		
		///<summary>PUT /_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html</pre>	
		///</summary>
		///<param name="body">The index settings to be updated</param>
		ConnectionStatus IndicesPutSettings(object body, Func<UpdateSettingsQueryString, UpdateSettingsQueryString> queryString = null);
		
		///<summary>PUT /_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html</pre>	
		///</summary>
		///<param name="body">The index settings to be updated</param>
		Task<ConnectionStatus> IndicesPutSettingsAsync(object body, Func<UpdateSettingsQueryString, UpdateSettingsQueryString> queryString = null);
		
		///<summary>PUT /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		ConnectionStatus IndicesPutSettings(string index, object body, Func<UpdateSettingsQueryString, UpdateSettingsQueryString> queryString = null);
		
		///<summary>PUT /{index}/_settings
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		Task<ConnectionStatus> IndicesPutSettingsAsync(string index, object body, Func<UpdateSettingsQueryString, UpdateSettingsQueryString> queryString = null);
		
		///<summary>PUT /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		ConnectionStatus IndicesPutTemplate(string name, object body, Func<PutTemplateQueryString, PutTemplateQueryString> queryString = null);
		
		///<summary>PUT /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		Task<ConnectionStatus> IndicesPutTemplateAsync(string name, object body, Func<PutTemplateQueryString, PutTemplateQueryString> queryString = null);
		
		///<summary>POST /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		ConnectionStatus IndicesPutTemplatePost(string name, object body, Func<PutTemplateQueryString, PutTemplateQueryString> queryString = null);
		
		///<summary>POST /_template/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html</pre>	
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		Task<ConnectionStatus> IndicesPutTemplatePostAsync(string name, object body, Func<PutTemplateQueryString, PutTemplateQueryString> queryString = null);
		
		///<summary>PUT /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		ConnectionStatus IndicesPutWarmer(string index, string name, object body, Func<PutWarmerQueryString, PutWarmerQueryString> queryString = null);
		
		///<summary>PUT /{index}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		Task<ConnectionStatus> IndicesPutWarmerAsync(string index, string name, object body, Func<PutWarmerQueryString, PutWarmerQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		ConnectionStatus IndicesPutWarmer(string index, string type, string name, object body, Func<PutWarmerQueryString, PutWarmerQueryString> queryString = null);
		
		///<summary>PUT /{index}/{type}/_warmer/{name}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		Task<ConnectionStatus> IndicesPutWarmerAsync(string index, string type, string name, object body, Func<PutWarmerQueryString, PutWarmerQueryString> queryString = null);
		
		///<summary>POST /_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		ConnectionStatus IndicesRefreshPost(Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>POST /_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesRefreshPostAsync(Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>POST /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesRefreshPost(string index, Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>POST /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesRefreshPostAsync(string index, Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>GET /_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		ConnectionStatus IndicesRefreshGet(Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>GET /_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesRefreshGetAsync(Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>GET /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesRefreshGet(string index, Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>GET /{index}/_refresh
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesRefreshGetAsync(string index, Func<RefreshQueryString, RefreshQueryString> queryString = null);
		
		///<summary>GET /_segments
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html</pre>	
		///</summary>
		ConnectionStatus IndicesSegmentsGet(Func<SegmentsQueryString, SegmentsQueryString> queryString = null);
		
		///<summary>GET /_segments
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesSegmentsGetAsync(Func<SegmentsQueryString, SegmentsQueryString> queryString = null);
		
		///<summary>GET /{index}/_segments
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesSegmentsGet(string index, Func<SegmentsQueryString, SegmentsQueryString> queryString = null);
		
		///<summary>GET /{index}/_segments
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesSegmentsGetAsync(string index, Func<SegmentsQueryString, SegmentsQueryString> queryString = null);
		
		///<summary>POST /_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html</pre>	
		///</summary>
		ConnectionStatus IndicesSnapshotIndexPost(Func<SnapshotQueryString, SnapshotQueryString> queryString = null);
		
		///<summary>POST /_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesSnapshotIndexPostAsync(Func<SnapshotQueryString, SnapshotQueryString> queryString = null);
		
		///<summary>POST /{index}/_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		ConnectionStatus IndicesSnapshotIndexPost(string index, Func<SnapshotQueryString, SnapshotQueryString> queryString = null);
		
		///<summary>POST /{index}/_gateway/snapshot
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		Task<ConnectionStatus> IndicesSnapshotIndexPostAsync(string index, Func<SnapshotQueryString, SnapshotQueryString> queryString = null);
		
		///<summary>GET /_stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html</pre>	
		///</summary>
		ConnectionStatus IndicesStatsGet(Func<IndicesStatsQueryString, IndicesStatsQueryString> queryString = null);
		
		///<summary>GET /_stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesStatsGetAsync(Func<IndicesStatsQueryString, IndicesStatsQueryString> queryString = null);
		
		///<summary>GET /{index}/_stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndexStatsGet(string index, Func<IndicesStatsQueryString, IndicesStatsQueryString> queryString = null);
		
		///<summary>GET /{index}/_stats
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndexStatsGetAsync(string index, Func<IndicesStatsQueryString, IndicesStatsQueryString> queryString = null);
		
		///<summary>GET /_status
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html</pre>	
		///</summary>
		ConnectionStatus IndicesStatusGet(Func<IndicesStatusQueryString, IndicesStatusQueryString> queryString = null);
		
		///<summary>GET /_status
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesStatusGetAsync(Func<IndicesStatusQueryString, IndicesStatusQueryString> queryString = null);
		
		///<summary>GET /{index}/_status
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesStatusGet(string index, Func<IndicesStatusQueryString, IndicesStatusQueryString> queryString = null);
		
		///<summary>GET /{index}/_status
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesStatusGetAsync(string index, Func<IndicesStatusQueryString, IndicesStatusQueryString> queryString = null);
		
		///<summary>POST /_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		ConnectionStatus IndicesUpdateAliasesPost(object body, Func<AliasQueryString, AliasQueryString> queryString = null);
		
		///<summary>POST /_aliases
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html</pre>	
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		Task<ConnectionStatus> IndicesUpdateAliasesPostAsync(object body, Func<AliasQueryString, AliasQueryString> queryString = null);
		
		///<summary>GET /_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		ConnectionStatus IndicesValidateQueryGet(Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus IndicesValidateQueryGet(string index, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(string index, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		ConnectionStatus IndicesValidateQueryGet(string index, string type, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		Task<ConnectionStatus> IndicesValidateQueryGetAsync(string index, string type, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(string index, object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /{index}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(string index, object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		ConnectionStatus IndicesValidateQueryPost(string index, string type, object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_validate/query
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition</param>
		Task<ConnectionStatus> IndicesValidateQueryPostAsync(string index, string type, object body, Func<ValidateQueryQueryString, ValidateQueryQueryString> queryString = null);
		
		///<summary>GET /
		///<pre>http://www.elasticsearch.org/guide/</pre>	
		///</summary>
		ConnectionStatus InfoGet(Func<InfoQueryString, InfoQueryString> queryString = null);
		
		///<summary>GET /
		///<pre>http://www.elasticsearch.org/guide/</pre>	
		///</summary>
		Task<ConnectionStatus> InfoGetAsync(Func<InfoQueryString, InfoQueryString> queryString = null);
		
		///<summary>GET /_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		ConnectionStatus MgetGet(Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		Task<ConnectionStatus> MgetGetAsync(Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /{index}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		ConnectionStatus MgetGet(string index, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /{index}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		Task<ConnectionStatus> MgetGetAsync(string index, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		ConnectionStatus MgetGet(string index, string type, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		Task<ConnectionStatus> MgetGetAsync(string index, string type, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /{index}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(string index, object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /{index}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(string index, object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		ConnectionStatus MgetPost(string index, string type, object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_mget
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		Task<ConnectionStatus> MgetPostAsync(string index, string type, object body, Func<MultiGetQueryString, MultiGetQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_mlt
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		ConnectionStatus MltGet(string index, string type, string id, Func<MoreLikeThisQueryString, MoreLikeThisQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/{id}/_mlt
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		Task<ConnectionStatus> MltGetAsync(string index, string type, string id, Func<MoreLikeThisQueryString, MoreLikeThisQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_mlt
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		ConnectionStatus MltPost(string index, string type, string id, object body, Func<MoreLikeThisQueryString, MoreLikeThisQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_mlt
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		Task<ConnectionStatus> MltPostAsync(string index, string type, string id, object body, Func<MoreLikeThisQueryString, MoreLikeThisQueryString> queryString = null);
		
		///<summary>GET /_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		ConnectionStatus MsearchGet(Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		Task<ConnectionStatus> MsearchGetAsync(Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		ConnectionStatus MsearchGet(string index, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		Task<ConnectionStatus> MsearchGetAsync(string index, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		ConnectionStatus MsearchGet(string index, string type, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		Task<ConnectionStatus> MsearchGetAsync(string index, string type, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(string index, object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /{index}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(string index, object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		ConnectionStatus MsearchPost(string index, string type, object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_msearch
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		Task<ConnectionStatus> MsearchPostAsync(string index, string type, object body, Func<MultiSearchQueryString, MultiSearchQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_percolate
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		ConnectionStatus PercolateGet(string index, string type, Func<PercolateQueryString, PercolateQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_percolate
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		Task<ConnectionStatus> PercolateGetAsync(string index, string type, Func<PercolateQueryString, PercolateQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_percolate
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		ConnectionStatus PercolatePost(string index, string type, object body, Func<PercolateQueryString, PercolateQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_percolate
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html</pre>	
		///</summary>
		///<param name="index">The name of the index with a registered percolator query</param>
		///<param name="type">The document type</param>
		///<param name="body">The document (`doc`) to percolate against registered queries; optionally also a `query` to limit the percolation to specific registered queries</param>
		Task<ConnectionStatus> PercolatePostAsync(string index, string type, object body, Func<PercolateQueryString, PercolateQueryString> queryString = null);
		
		///<summary>HEAD /
		///<pre>http://www.elasticsearch.org/guide/</pre>	
		///</summary>
		ConnectionStatus PingHead(Func<PingQueryString, PingQueryString> queryString = null);
		
		///<summary>HEAD /
		///<pre>http://www.elasticsearch.org/guide/</pre>	
		///</summary>
		Task<ConnectionStatus> PingHeadAsync(Func<PingQueryString, PingQueryString> queryString = null);
		
		///<summary>GET /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		ConnectionStatus ScrollGet(Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>GET /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		Task<ConnectionStatus> ScrollGetAsync(Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>GET /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		ConnectionStatus ScrollGet(string scroll_id, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>GET /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		Task<ConnectionStatus> ScrollGetAsync(string scroll_id, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>POST /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollPost(object body, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>POST /_search/scroll
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollPostAsync(object body, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>POST /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		ConnectionStatus ScrollPost(string scroll_id, object body, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>POST /_search/scroll/{scroll_id}
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html</pre>	
		///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		Task<ConnectionStatus> ScrollPostAsync(string scroll_id, object body, Func<ScrollQueryString, ScrollQueryString> queryString = null);
		
		///<summary>GET /_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		ConnectionStatus SearchGet(Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>GET /_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		Task<ConnectionStatus> SearchGetAsync(Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>GET /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus SearchGet(string index, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>GET /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> SearchGetAsync(string index, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		ConnectionStatus SearchGet(string index, string type, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>GET /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		Task<ConnectionStatus> SearchGetAsync(string index, string type, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(string index, object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /{index}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(string index, object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		ConnectionStatus SearchPost(string index, string type, object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/_search
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		Task<ConnectionStatus> SearchPostAsync(string index, string type, object body, Func<SearchQueryString, SearchQueryString> queryString = null);
		
		///<summary>POST /_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestPost(object body, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>POST /_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestPostAsync(object body, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>POST /{index}/_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		ConnectionStatus SuggestPost(string index, object body, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>POST /{index}/_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		Task<ConnectionStatus> SuggestPostAsync(string index, object body, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>GET /_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		ConnectionStatus SuggestGet(Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>GET /_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		Task<ConnectionStatus> SuggestGetAsync(Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>GET /{index}/_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		ConnectionStatus SuggestGet(string index, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>GET /{index}/_suggest
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html</pre>	
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		Task<ConnectionStatus> SuggestGetAsync(string index, Func<SuggestQueryString, SuggestQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_update
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-update.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		ConnectionStatus UpdatePost(string index, string type, string id, object body, Func<UpdateQueryString, UpdateQueryString> queryString = null);
		
		///<summary>POST /{index}/{type}/{id}/_update
		///<pre>http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-update.html</pre>	
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		Task<ConnectionStatus> UpdatePostAsync(string index, string type, string id, object body, Func<UpdateQueryString, UpdateQueryString> queryString = null);
		
	}
}