using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

///This file lays the base for all the descriptors based on the query string parameters in the spec for IElasticClient.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 394e3e45e8

namespace Nest
{
	
	///<summary>descriptor for BulkPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/bulk/
	///</pre>
	///</summary>
	public partial class BulkDescriptor
	{
		internal BulkQueryString QueryString { get; set; }


		///<summary>Explicit write consistency setting for the operation</summary>
		public BulkDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public BulkDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Explicitely set the replication type</summary>
		public BulkDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Default document type for items which don&#39;t provide one</summary>
		public BulkDescriptor TypeQueryString(string type)
		{
			this.QueryString.Type(type);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public BulkDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterHealthGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-health/
	///</pre>
	///</summary>
	public partial class ClusterHealthDescriptor
	{
		internal ClusterHealthQueryString QueryString { get; set; }


		///<summary>Specify the level of detail for returned information</summary>
		public ClusterHealthDescriptor Level(LevelOptions level)
		{
			this.QueryString.Level(level);
			return this;
		}
		

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterHealthDescriptor Local(bool local = true)
		{
			this.QueryString.Local(local);
			return this;
		}
		

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterHealthDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public ClusterHealthDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Wait until the specified number of shards is active</summary>
		public ClusterHealthDescriptor WaitForActiveShards(int wait_for_active_shards)
		{
			this.QueryString.WaitForActiveShards(wait_for_active_shards);
			return this;
		}
		

		///<summary>Wait until the specified number of nodes is available</summary>
		public ClusterHealthDescriptor WaitForNodes(string wait_for_nodes)
		{
			this.QueryString.WaitForNodes(wait_for_nodes);
			return this;
		}
		

		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public ClusterHealthDescriptor WaitForRelocatingShards(int wait_for_relocating_shards)
		{
			this.QueryString.WaitForRelocatingShards(wait_for_relocating_shards);
			return this;
		}
		

		///<summary>Wait until cluster is in a specific state</summary>
		public ClusterHealthDescriptor WaitForStatus(WaitForStatusOptions wait_for_status)
		{
			this.QueryString.WaitForStatus(wait_for_status);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeHotThreadsGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/
	///</pre>
	///</summary>
	public partial class ClusterNodeHotThreadsDescriptor
	{
		internal ClusterNodeHotThreadsQueryString QueryString { get; set; }


		///<summary>The interval for the second sampling of threads</summary>
		public ClusterNodeHotThreadsDescriptor Interval(string interval)
		{
			this.QueryString.Interval(interval);
			return this;
		}
		

		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public ClusterNodeHotThreadsDescriptor Snapshots(int snapshots)
		{
			this.QueryString.Snapshots(snapshots);
			return this;
		}
		

		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public ClusterNodeHotThreadsDescriptor Threads(int threads)
		{
			this.QueryString.Threads(threads);
			return this;
		}
		

		///<summary>The type to sample (default: cpu)</summary>
		public ClusterNodeHotThreadsDescriptor TypeQueryString(TypeOptions type)
		{
			this.QueryString.Type(type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeInfoGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/
	///</pre>
	///</summary>
	public partial class ClusterNodeInfoDescriptor
	{
		internal ClusterNodeInfoQueryString QueryString { get; set; }


		///<summary>Return all available information</summary>
		public ClusterNodeInfoDescriptor All(bool all = true)
		{
			this.QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default settings</summary>
		public ClusterNodeInfoDescriptor Clear(bool clear = true)
		{
			this.QueryString.Clear(clear);
			return this;
		}
		

		///<summary>Return information about HTTP</summary>
		public ClusterNodeInfoDescriptor Http(bool http = true)
		{
			this.QueryString.Http(http);
			return this;
		}
		

		///<summary>Return information about the JVM</summary>
		public ClusterNodeInfoDescriptor Jvm(bool jvm = true)
		{
			this.QueryString.Jvm(jvm);
			return this;
		}
		

		///<summary>Return information about network</summary>
		public ClusterNodeInfoDescriptor Network(bool network = true)
		{
			this.QueryString.Network(network);
			return this;
		}
		

		///<summary>Return information about the operating system</summary>
		public ClusterNodeInfoDescriptor Os(bool os = true)
		{
			this.QueryString.Os(os);
			return this;
		}
		

		///<summary>Return information about plugins</summary>
		public ClusterNodeInfoDescriptor Plugin(bool plugin = true)
		{
			this.QueryString.Plugin(plugin);
			return this;
		}
		

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeInfoDescriptor Process(bool process = true)
		{
			this.QueryString.Process(process);
			return this;
		}
		

		///<summary>Return information about node settings</summary>
		public ClusterNodeInfoDescriptor Settings(bool settings = true)
		{
			this.QueryString.Settings(settings);
			return this;
		}
		

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeInfoDescriptor ThreadPool(bool thread_pool = true)
		{
			this.QueryString.ThreadPool(thread_pool);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public ClusterNodeInfoDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Return information about transport</summary>
		public ClusterNodeInfoDescriptor Transport(bool transport = true)
		{
			this.QueryString.Transport(transport);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeShutdownPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/
	///</pre>
	///</summary>
	public partial class ClusterNodeShutdownDescriptor
	{
		internal ClusterNodeShutdownQueryString QueryString { get; set; }


		///<summary>Set the delay for the operation (default: 1s)</summary>
		public ClusterNodeShutdownDescriptor Delay(string delay)
		{
			this.QueryString.Delay(delay);
			return this;
		}
		

		///<summary>Exit the JVM as well (default: true)</summary>
		public ClusterNodeShutdownDescriptor Exit(bool exit = true)
		{
			this.QueryString.Exit(exit);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeStatsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/
	///</pre>
	///</summary>
	public partial class ClusterNodeStatsDescriptor
	{
		internal ClusterNodeStatsQueryString QueryString { get; set; }


		///<summary>Return all available information</summary>
		public ClusterNodeStatsDescriptor All(bool all = true)
		{
			this.QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default level of detail</summary>
		public ClusterNodeStatsDescriptor Clear(bool clear = true)
		{
			this.QueryString.Clear(clear);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public ClusterNodeStatsDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Return information about the filesystem</summary>
		public ClusterNodeStatsDescriptor Fs(bool fs = true)
		{
			this.QueryString.Fs(fs);
			return this;
		}
		

		///<summary>Return information about HTTP</summary>
		public ClusterNodeStatsDescriptor Http(bool http = true)
		{
			this.QueryString.Http(http);
			return this;
		}
		

		///<summary>Return information about indices</summary>
		public ClusterNodeStatsDescriptor Indices(bool indices = true)
		{
			this.QueryString.Indices(indices);
			return this;
		}
		

		///<summary>Return information about the JVM</summary>
		public ClusterNodeStatsDescriptor Jvm(bool jvm = true)
		{
			this.QueryString.Jvm(jvm);
			return this;
		}
		

		///<summary>Return information about network</summary>
		public ClusterNodeStatsDescriptor Network(bool network = true)
		{
			this.QueryString.Network(network);
			return this;
		}
		

		///<summary>Return information about the operating system</summary>
		public ClusterNodeStatsDescriptor Os(bool os = true)
		{
			this.QueryString.Os(os);
			return this;
		}
		

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeStatsDescriptor Process(bool process = true)
		{
			this.QueryString.Process(process);
			return this;
		}
		

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeStatsDescriptor ThreadPool(bool thread_pool = true)
		{
			this.QueryString.ThreadPool(thread_pool);
			return this;
		}
		

		///<summary>Return information about transport</summary>
		public ClusterNodeStatsDescriptor Transport(bool transport = true)
		{
			this.QueryString.Transport(transport);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterReroutePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-reroute/
	///</pre>
	///</summary>
	public partial class ClusterRerouteDescriptor
	{
		internal ClusterRerouteQueryString QueryString { get; set; }


		///<summary>Simulate the operation only and return the resulting state</summary>
		public ClusterRerouteDescriptor DryRun(bool dry_run = true)
		{
			this.QueryString.DryRun(dry_run);
			return this;
		}
		

		///<summary>Don&#39;t return cluster state metadata (default: false)</summary>
		public ClusterRerouteDescriptor FilterMetadata(bool filter_metadata = true)
		{
			this.QueryString.FilterMetadata(filter_metadata);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterStateGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-cluster-state/
	///</pre>
	///</summary>
	public partial class ClusterStateDescriptor
	{
		internal ClusterStateQueryString QueryString { get; set; }


		///<summary>Do not return information about blocks</summary>
		public ClusterStateDescriptor FilterBlocks(bool filter_blocks = true)
		{
			this.QueryString.FilterBlocks(filter_blocks);
			return this;
		}
		

		///<summary>Do not return information about index templates</summary>
		public ClusterStateDescriptor FilterIndexTemplates(bool filter_index_templates = true)
		{
			this.QueryString.FilterIndexTemplates(filter_index_templates);
			return this;
		}
		

		///<summary>Limit returned metadata information to specific indices</summary>
		public ClusterStateDescriptor FilterIndices(params string[] filter_indices)
		{
			this.QueryString.FilterIndices(filter_indices);
			return this;
		}
		

		///<summary>Do not return information about indices metadata</summary>
		public ClusterStateDescriptor FilterMetadata(bool filter_metadata = true)
		{
			this.QueryString.FilterMetadata(filter_metadata);
			return this;
		}
		

		///<summary>Do not return information about nodes</summary>
		public ClusterStateDescriptor FilterNodes(bool filter_nodes = true)
		{
			this.QueryString.FilterNodes(filter_nodes);
			return this;
		}
		

		///<summary>Do not return information about shard allocation (`routing_table` and `routing_nodes`)</summary>
		public ClusterStateDescriptor FilterRoutingTable(bool filter_routing_table = true)
		{
			this.QueryString.FilterRoutingTable(filter_routing_table);
			return this;
		}
		

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterStateDescriptor Local(bool local = true)
		{
			this.QueryString.Local(local);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public ClusterStateDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for CountPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/count/
	///</pre>
	///</summary>
	public partial class CountDescriptor
	{
		internal CountQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public CountDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public CountDescriptor MinScore(int min_score)
		{
			this.QueryString.MinScore(min_score);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public CountDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public CountDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for CreatePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/index_/
	///</pre>
	///</summary>
	public partial class CreateDescriptor
	{
		internal CreateQueryString QueryString { get; set; }


		///<summary>Explicit write consistency setting for the operation</summary>
		public CreateDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>Specific document ID (when the POST method is used)</summary>
		public CreateDescriptor Id(string id)
		{
			this.QueryString.Id(id);
			return this;
		}
		

		///<summary>ID of the parent document</summary>
		public CreateDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Percolator queries to execute while indexing the document</summary>
		public CreateDescriptor Percolate(string percolate)
		{
			this.QueryString.Percolate(percolate);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public CreateDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public CreateDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public CreateDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public CreateDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit timestamp for the document</summary>
		public CreateDescriptor Timestamp(string timestamp)
		{
			this.QueryString.Timestamp(timestamp);
			return this;
		}
		

		///<summary>Expiration time for the document</summary>
		public CreateDescriptor Ttl(string ttl)
		{
			this.QueryString.Ttl(ttl);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public CreateDescriptor Version(int version)
		{
			this.QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public CreateDescriptor VersionType(VersionTypeOptions version_type)
		{
			this.QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for Delete
	///<pre>
	///http://elasticsearch.org/guide/reference/api/delete/
	///</pre>
	///</summary>
	public partial class DeleteDescriptor
	{
		internal DeleteQueryString QueryString { get; set; }


		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>ID of parent document</summary>
		public DeleteDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public DeleteDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public DeleteDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public DeleteDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public DeleteDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public DeleteDescriptor Version(int version)
		{
			this.QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public DeleteDescriptor VersionType(VersionTypeOptions version_type)
		{
			this.QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/delete-by-query/
	///</pre>
	///</summary>
	public partial class DeleteByQueryDescriptor
	{
		internal DeleteByQueryQueryString QueryString { get; set; }


		///<summary>The analyzer to use for the query string</summary>
		public DeleteByQueryDescriptor Analyzer(string analyzer)
		{
			this.QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteByQueryDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public DeleteByQueryDescriptor DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public DeleteByQueryDescriptor Df(string df)
		{
			this.QueryString.Df(df);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public DeleteByQueryDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public DeleteByQueryDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public DeleteByQueryDescriptor Q(string q)
		{
			this.QueryString.Q(q);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public DeleteByQueryDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public DeleteByQueryDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public DeleteByQueryDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ExistsHead
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public partial class ExistsDescriptor
	{
		internal ExistsQueryString QueryString { get; set; }


		///<summary>The ID of the parent document</summary>
		public ExistsDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExistsDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public ExistsDescriptor Realtime(bool realtime = true)
		{
			this.QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public ExistsDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public ExistsDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ExplainGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/explain/
	///</pre>
	///</summary>
	public partial class ExplainDescriptor
	{
		internal ExplainQueryString QueryString { get; set; }


		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public ExplainDescriptor AnalyzeWildcard(bool analyze_wildcard = true)
		{
			this.QueryString.AnalyzeWildcard(analyze_wildcard);
			return this;
		}
		

		///<summary>The analyzer for the query string query</summary>
		public ExplainDescriptor Analyzer(string analyzer)
		{
			this.QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public ExplainDescriptor DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The default field for query string query (default: _all)</summary>
		public ExplainDescriptor Df(string df)
		{
			this.QueryString.Df(df);
			return this;
		}
		

		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ExplainDescriptor Lenient(bool lenient = true)
		{
			this.QueryString.Lenient(lenient);
			return this;
		}
		

		///<summary>Specify whether query terms should be lowercased</summary>
		public ExplainDescriptor LowercaseExpandedTerms(bool lowercase_expanded_terms = true)
		{
			this.QueryString.LowercaseExpandedTerms(lowercase_expanded_terms);
			return this;
		}
		

		///<summary>The ID of the parent document</summary>
		public ExplainDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExplainDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public ExplainDescriptor Q(string q)
		{
			this.QueryString.Q(q);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public ExplainDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ExplainDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public ExplainDescriptor Source(params string[] _source)
		{
			this.QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainDescriptor SourceExclude(params string[] _source_exclude)
		{
			this.QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainDescriptor SourceInclude(params string[] _source_include)
		{
			this.QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for Get
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public partial class GetDescriptor
	{
		internal GetQueryString QueryString { get; set; }


		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>The ID of the parent document</summary>
		public GetDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetDescriptor Realtime(bool realtime = true)
		{
			this.QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public GetDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetDescriptor Source(params string[] _source)
		{
			this.QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetDescriptor SourceExclude(params string[] _source_exclude)
		{
			this.QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetDescriptor SourceInclude(params string[] _source_include)
		{
			this.QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for GetSource
	///<pre>
	///http://elasticsearch.org/guide/reference/api/get/
	///</pre>
	///</summary>
	public partial class GetSourceDescriptor
	{
		internal GetSourceQueryString QueryString { get; set; }


		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetSourceDescriptor Exclude(params string[] exclude)
		{
			this.QueryString.Exclude(exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetSourceDescriptor Include(params string[] include)
		{
			this.QueryString.Include(include);
			return this;
		}
		

		///<summary>The ID of the parent document</summary>
		public GetSourceDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetSourceDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetSourceDescriptor Realtime(bool realtime = true)
		{
			this.QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetSourceDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public GetSourceDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndexPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/index_/
	///</pre>
	///</summary>
	public partial class IndexDescriptor
	{
		internal IndexQueryString QueryString { get; set; }


		///<summary>Explicit write consistency setting for the operation</summary>
		public IndexDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>Explicit operation type</summary>
		public IndexDescriptor OpType(OpTypeOptions op_type)
		{
			this.QueryString.OpType(op_type);
			return this;
		}
		

		///<summary>ID of the parent document</summary>
		public IndexDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Percolator queries to execute while indexing the document</summary>
		public IndexDescriptor Percolate(string percolate)
		{
			this.QueryString.Percolate(percolate);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public IndexDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public IndexDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public IndexDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public IndexDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit timestamp for the document</summary>
		public IndexDescriptor Timestamp(string timestamp)
		{
			this.QueryString.Timestamp(timestamp);
			return this;
		}
		

		///<summary>Expiration time for the document</summary>
		public IndexDescriptor Ttl(string ttl)
		{
			this.QueryString.Ttl(ttl);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public IndexDescriptor Version(int version)
		{
			this.QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public IndexDescriptor VersionType(VersionTypeOptions version_type)
		{
			this.QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesAnalyzeGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/
	///</pre>
	///</summary>
	public partial class IndicesAnalyzeDescriptor
	{
		internal IndicesAnalyzeQueryString QueryString { get; set; }


		///<summary>The name of the analyzer to use</summary>
		public IndicesAnalyzeDescriptor Analyzer(string analyzer)
		{
			this.QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public IndicesAnalyzeDescriptor Field(string field)
		{
			this.QueryString.Field(field);
			return this;
		}
		

		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public IndicesAnalyzeDescriptor Filters(params string[] filters)
		{
			this.QueryString.Filters(filters);
			return this;
		}
		

		///<summary>The name of the index to scope the operation</summary>
		public IndicesAnalyzeDescriptor IndexQueryString(string index)
		{
			this.QueryString.Index(index);
			return this;
		}
		

		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public IndicesAnalyzeDescriptor PreferLocal(bool prefer_local = true)
		{
			this.QueryString.PreferLocal(prefer_local);
			return this;
		}
		

		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public IndicesAnalyzeDescriptor Text(string text)
		{
			this.QueryString.Text(text);
			return this;
		}
		

		///<summary>The name of the tokenizer to use for the analysis</summary>
		public IndicesAnalyzeDescriptor Tokenizer(string tokenizer)
		{
			this.QueryString.Tokenizer(tokenizer);
			return this;
		}
		

		///<summary>Format of the output</summary>
		public IndicesAnalyzeDescriptor Format(FormatOptions format)
		{
			this.QueryString.Format(format);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesClearCachePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/
	///</pre>
	///</summary>
	public partial class IndicesClearCacheDescriptor
	{
		internal IndicesClearCacheQueryString QueryString { get; set; }


		///<summary>Clear field data</summary>
		public IndicesClearCacheDescriptor FieldData(bool field_data = true)
		{
			this.QueryString.FieldData(field_data);
			return this;
		}
		

		///<summary>Clear field data</summary>
		public IndicesClearCacheDescriptor Fielddata(bool fielddata = true)
		{
			this.QueryString.Fielddata(fielddata);
			return this;
		}
		

		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public IndicesClearCacheDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Clear filter caches</summary>
		public IndicesClearCacheDescriptor Filter(bool filter = true)
		{
			this.QueryString.Filter(filter);
			return this;
		}
		

		///<summary>Clear filter caches</summary>
		public IndicesClearCacheDescriptor FilterCache(bool filter_cache = true)
		{
			this.QueryString.FilterCache(filter_cache);
			return this;
		}
		

		///<summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
		public IndicesClearCacheDescriptor FilterKeys(bool filter_keys = true)
		{
			this.QueryString.FilterKeys(filter_keys);
			return this;
		}
		

		///<summary>Clear ID caches for parent/child</summary>
		public IndicesClearCacheDescriptor Id(bool id = true)
		{
			this.QueryString.Id(id);
			return this;
		}
		

		///<summary>Clear ID caches for parent/child</summary>
		public IndicesClearCacheDescriptor IdCache(bool id_cache = true)
		{
			this.QueryString.IdCache(id_cache);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesClearCacheDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>A comma-separated list of index name to limit the operation</summary>
		public IndicesClearCacheDescriptor IndexQueryString(params string[] index)
		{
			this.QueryString.Index(index);
			return this;
		}
		

		///<summary>Clear the recycler cache</summary>
		public IndicesClearCacheDescriptor Recycler(bool recycler = true)
		{
			this.QueryString.Recycler(recycler);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesClosePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/
	///</pre>
	///</summary>
	public partial class IndicesCloseDescriptor
	{
		internal IndicesCloseQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesCloseDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesCloseDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesCreatePut
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/
	///</pre>
	///</summary>
	public partial class IndicesCreateDescriptor
	{
		internal IndicesCreateQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesCreateDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesCreateDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDelete
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/
	///</pre>
	///</summary>
	public partial class IndicesDeleteDescriptor
	{
		internal IndicesDeleteQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesDeleteDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesDeleteAliasDescriptor
	{
		internal IndicesDeleteAliasQueryString QueryString { get; set; }


		///<summary>Explicit timestamp for the document</summary>
		public IndicesDeleteAliasDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteAliasDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/
	///</pre>
	///</summary>
	public partial class IndicesDeleteMappingDescriptor
	{
		internal IndicesDeleteMappingQueryString QueryString { get; set; }


		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteMappingDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/
	///</pre>
	///</summary>
	public partial class IndicesDeleteTemplateDescriptor
	{
		internal IndicesDeleteTemplateQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesDeleteTemplateDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteTemplateDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/
	///</pre>
	///</summary>
	public partial class IndicesDeleteWarmerDescriptor
	{
		internal IndicesDeleteWarmerQueryString QueryString { get; set; }


		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteWarmerDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesExistsAliasHead
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesExistsAliasDescriptor
	{
		internal IndicesExistsAliasQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsAliasDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesExistsTypeHead
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/
	///</pre>
	///</summary>
	public partial class IndicesExistsTypeDescriptor
	{
		internal IndicesExistsTypeQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsTypeDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesFlushPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/
	///</pre>
	///</summary>
	public partial class IndicesFlushDescriptor
	{
		internal IndicesFlushQueryString QueryString { get; set; }


		///<summary>TODO: ?</summary>
		public IndicesFlushDescriptor Force(bool force = true)
		{
			this.QueryString.Force(force);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesFlushDescriptor Full(bool full = true)
		{
			this.QueryString.Full(full);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesFlushDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public IndicesFlushDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesGetAliasDescriptor
	{
		internal IndicesGetAliasQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesGetAliasDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetAliases
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesGetAliasesDescriptor
	{
		internal IndicesGetAliasesQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesGetAliasesDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetFieldMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html
	///</pre>
	///</summary>
	public partial class IndicesGetFieldMappingDescriptor
	{
		internal IndicesGetFieldMappingQueryString QueryString { get; set; }


		///<summary>Whether the default mapping values should be returned as well</summary>
		public IndicesGetFieldMappingDescriptor IncludeDefaults(bool include_defaults = true)
		{
			this.QueryString.IncludeDefaults(include_defaults);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesOpenPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/
	///</pre>
	///</summary>
	public partial class IndicesOpenDescriptor
	{
		internal IndicesOpenQueryString QueryString { get; set; }


		///<summary>Explicit operation timeout</summary>
		public IndicesOpenDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesOpenDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesOptimizePost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/
	///</pre>
	///</summary>
	public partial class IndicesOptimizeDescriptor
	{
		internal IndicesOptimizeQueryString QueryString { get; set; }


		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public IndicesOptimizeDescriptor Flush(bool flush = true)
		{
			this.QueryString.Flush(flush);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesOptimizeDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public IndicesOptimizeDescriptor MaxNumSegments(int max_num_segments)
		{
			this.QueryString.MaxNumSegments(max_num_segments);
			return this;
		}
		

		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public IndicesOptimizeDescriptor OnlyExpungeDeletes(bool only_expunge_deletes = true)
		{
			this.QueryString.OnlyExpungeDeletes(only_expunge_deletes);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesOptimizeDescriptor OperationThreading(string operation_threading)
		{
			this.QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>Specify whether the index should be refreshed after performing the operation (default: true)</summary>
		public IndicesOptimizeDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public IndicesOptimizeDescriptor WaitForMerge(bool wait_for_merge = true)
		{
			this.QueryString.WaitForMerge(wait_for_merge);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndexPutAlias
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesPutAliasDescriptor
	{
		internal IndicesPutAliasQueryString QueryString { get; set; }


		///<summary>Explicit timestamp for the document</summary>
		public IndicesPutAliasDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutAliasDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/
	///</pre>
	///</summary>
	public partial class IndicesPutMappingDescriptor
	{
		internal IndicesPutMappingQueryString QueryString { get; set; }


		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public IndicesPutMappingDescriptor IgnoreConflicts(bool ignore_conflicts = true)
		{
			this.QueryString.IgnoreConflicts(ignore_conflicts);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public IndicesPutMappingDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutMappingDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/
	///</pre>
	///</summary>
	public partial class IndicesPutSettingsDescriptor
	{
		internal IndicesPutSettingsQueryString QueryString { get; set; }


		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutSettingsDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/
	///</pre>
	///</summary>
	public partial class IndicesPutTemplateDescriptor
	{
		internal IndicesPutTemplateQueryString QueryString { get; set; }


		///<summary>The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)</summary>
		public IndicesPutTemplateDescriptor Order(int order)
		{
			this.QueryString.Order(order);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public IndicesPutTemplateDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutTemplateDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/
	///</pre>
	///</summary>
	public partial class IndicesPutWarmerDescriptor
	{
		internal IndicesPutWarmerQueryString QueryString { get; set; }


		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutWarmerDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesRefreshPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/
	///</pre>
	///</summary>
	public partial class IndicesRefreshDescriptor
	{
		internal IndicesRefreshQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesRefreshDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesRefreshDescriptor OperationThreading(string operation_threading)
		{
			this.QueryString.OperationThreading(operation_threading);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesSegmentsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-segments/
	///</pre>
	///</summary>
	public partial class IndicesSegmentsDescriptor
	{
		internal IndicesSegmentsQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesSegmentsDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesSegmentsDescriptor OperationThreading(string operation_threading)
		{
			this.QueryString.OperationThreading(operation_threading);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesSnapshotIndexPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-gateway-snapshot/
	///</pre>
	///</summary>
	public partial class IndicesSnapshotIndexDescriptor
	{
		internal IndicesSnapshotIndexQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesSnapshotIndexDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesStatsGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-stats/
	///</pre>
	///</summary>
	public partial class IndicesStatsDescriptor
	{
		internal IndicesStatsQueryString QueryString { get; set; }


		///<summary>Return all available information</summary>
		public IndicesStatsDescriptor All(bool all = true)
		{
			this.QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default level of detail</summary>
		public IndicesStatsDescriptor Clear(bool clear = true)
		{
			this.QueryString.Clear(clear);
			return this;
		}
		

		///<summary>Return information about completion suggester stats</summary>
		public IndicesStatsDescriptor Completion(bool completion = true)
		{
			this.QueryString.Completion(completion);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor CompletionFields(params string[] completion_fields)
		{
			this.QueryString.CompletionFields(completion_fields);
			return this;
		}
		

		///<summary>Return information about indexed and deleted documents</summary>
		public IndicesStatsDescriptor Docs(bool docs = true)
		{
			this.QueryString.Docs(docs);
			return this;
		}
		

		///<summary>Return information about field data</summary>
		public IndicesStatsDescriptor Fielddata(bool fielddata = true)
		{
			this.QueryString.Fielddata(fielddata);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor FielddataFields(params string[] fielddata_fields)
		{
			this.QueryString.FielddataFields(fielddata_fields);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `fielddata` and `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Return information about filter cache</summary>
		public IndicesStatsDescriptor FilterCache(bool filter_cache = true)
		{
			this.QueryString.FilterCache(filter_cache);
			return this;
		}
		

		///<summary>Return information about flush operations</summary>
		public IndicesStatsDescriptor Flush(bool flush = true)
		{
			this.QueryString.Flush(flush);
			return this;
		}
		

		///<summary>Return information about get operations</summary>
		public IndicesStatsDescriptor Get(bool get = true)
		{
			this.QueryString.Get(get);
			return this;
		}
		

		///<summary>A comma-separated list of search groups for `search` statistics</summary>
		public IndicesStatsDescriptor Groups(bool groups = true)
		{
			this.QueryString.Groups(groups);
			return this;
		}
		

		///<summary>Return information about ID cache</summary>
		public IndicesStatsDescriptor IdCache(bool id_cache = true)
		{
			this.QueryString.IdCache(id_cache);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatsDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Return information about indexing operations</summary>
		public IndicesStatsDescriptor Indexing(bool indexing = true)
		{
			this.QueryString.Indexing(indexing);
			return this;
		}
		

		///<summary>Return information about merge operations</summary>
		public IndicesStatsDescriptor Merge(bool merge = true)
		{
			this.QueryString.Merge(merge);
			return this;
		}
		

		///<summary>Return information about refresh operations</summary>
		public IndicesStatsDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Return information about search operations; use the `groups` parameter to include information for specific search groups</summary>
		public IndicesStatsDescriptor Search(bool search = true)
		{
			this.QueryString.Search(search);
			return this;
		}
		

		///<summary>Return information about the size of the index</summary>
		public IndicesStatsDescriptor Store(bool store = true)
		{
			this.QueryString.Store(store);
			return this;
		}
		

		///<summary>Return information about warmers</summary>
		public IndicesStatsDescriptor Warmer(bool warmer = true)
		{
			this.QueryString.Warmer(warmer);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesStatusGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/admin-indices-status/
	///</pre>
	///</summary>
	public partial class IndicesStatusDescriptor
	{
		internal IndicesStatusQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatusDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesStatusDescriptor OperationThreading(string operation_threading)
		{
			this.QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>Return information about shard recovery</summary>
		public IndicesStatusDescriptor Recovery(bool recovery = true)
		{
			this.QueryString.Recovery(recovery);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesStatusDescriptor Snapshot(bool snapshot = true)
		{
			this.QueryString.Snapshot(snapshot);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesUpdateAliasesPost
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/
	///</pre>
	///</summary>
	public partial class IndicesUpdateAliasesDescriptor
	{
		internal IndicesUpdateAliasesQueryString QueryString { get; set; }


		///<summary>Request timeout</summary>
		public IndicesUpdateAliasesDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesUpdateAliasesDescriptor MasterTimeout(string master_timeout)
		{
			this.QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesValidateQueryGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/validate/
	///</pre>
	///</summary>
	public partial class ValidateQueryDescriptor
	{
		internal ValidateQueryQueryString QueryString { get; set; }


		///<summary>Return detailed information about the error</summary>
		public ValidateQueryDescriptor Explain(bool explain = true)
		{
			this.QueryString.Explain(explain);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public ValidateQueryDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public ValidateQueryDescriptor OperationThreading(string operation_threading)
		{
			this.QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ValidateQueryDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public ValidateQueryDescriptor Q(string q)
		{
			this.QueryString.Q(q);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for MgetGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/multi-get/
	///</pre>
	///</summary>
	public partial class MgetDescriptor
	{
		internal MgetQueryString QueryString { get; set; }


		///<summary>A comma-separated list of fields to return in the response</summary>
		public MgetDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public MgetDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public MgetDescriptor Realtime(bool realtime = true)
		{
			this.QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public MgetDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public MgetDescriptor Source(params string[] _source)
		{
			this.QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MgetDescriptor SourceExclude(params string[] _source_exclude)
		{
			this.QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public MgetDescriptor SourceInclude(params string[] _source_include)
		{
			this.QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for MltGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/more-like-this/
	///</pre>
	///</summary>
	public partial class MltDescriptor
	{
		internal MltQueryString QueryString { get; set; }


		///<summary>The boost factor</summary>
		public MltDescriptor BoostTerms(int boost_terms)
		{
			this.QueryString.BoostTerms(boost_terms);
			return this;
		}
		

		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public MltDescriptor MaxDocFreq(int max_doc_freq)
		{
			this.QueryString.MaxDocFreq(max_doc_freq);
			return this;
		}
		

		///<summary>The maximum query terms to be included in the generated query</summary>
		public MltDescriptor MaxQueryTerms(int max_query_terms)
		{
			this.QueryString.MaxQueryTerms(max_query_terms);
			return this;
		}
		

		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public MltDescriptor MaxWordLen(int max_word_len)
		{
			this.QueryString.MaxWordLen(max_word_len);
			return this;
		}
		

		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public MltDescriptor MinDocFreq(int min_doc_freq)
		{
			this.QueryString.MinDocFreq(min_doc_freq);
			return this;
		}
		

		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public MltDescriptor MinTermFreq(int min_term_freq)
		{
			this.QueryString.MinTermFreq(min_term_freq);
			return this;
		}
		

		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public MltDescriptor MinWordLen(int min_word_len)
		{
			this.QueryString.MinWordLen(min_word_len);
			return this;
		}
		

		///<summary>Specific fields to perform the query against</summary>
		public MltDescriptor MltFields(params string[] mlt_fields)
		{
			this.QueryString.MltFields(mlt_fields);
			return this;
		}
		

		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public MltDescriptor PercentTermsToMatch(int percent_terms_to_match)
		{
			this.QueryString.PercentTermsToMatch(percent_terms_to_match);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public MltDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The offset from which to return results</summary>
		public MltDescriptor SearchFrom(int search_from)
		{
			this.QueryString.SearchFrom(search_from);
			return this;
		}
		

		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public MltDescriptor SearchIndices(params string[] search_indices)
		{
			this.QueryString.SearchIndices(search_indices);
			return this;
		}
		

		///<summary>The search query hint</summary>
		public MltDescriptor SearchQueryHint(string search_query_hint)
		{
			this.QueryString.SearchQueryHint(search_query_hint);
			return this;
		}
		

		///<summary>A scroll search request definition</summary>
		public MltDescriptor SearchScroll(string search_scroll)
		{
			this.QueryString.SearchScroll(search_scroll);
			return this;
		}
		

		///<summary>The number of documents to return (default: 10)</summary>
		public MltDescriptor SearchSize(int search_size)
		{
			this.QueryString.SearchSize(search_size);
			return this;
		}
		

		///<summary>A specific search request definition (instead of using the request body)</summary>
		public MltDescriptor SearchSource(string search_source)
		{
			this.QueryString.SearchSource(search_source);
			return this;
		}
		

		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public MltDescriptor SearchType(string search_type)
		{
			this.QueryString.SearchType(search_type);
			return this;
		}
		

		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public MltDescriptor SearchTypes(params string[] search_types)
		{
			this.QueryString.SearchTypes(search_types);
			return this;
		}
		

		///<summary>A list of stop words to be ignored</summary>
		public MltDescriptor StopWords(params string[] stop_words)
		{
			this.QueryString.StopWords(stop_words);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for MsearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/multi-search/
	///</pre>
	///</summary>
	public partial class MsearchDescriptor
	{
		internal MsearchQueryString QueryString { get; set; }


		///<summary>Search operation type</summary>
		public MsearchDescriptor SearchType(SearchTypeOptions search_type)
		{
			this.QueryString.SearchType(search_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for PercolateGet
	///<pre>
	///http://elasticsearch.org/guide/reference/api/percolate/
	///</pre>
	///</summary>
	public partial class PercolateDescriptor
	{
		internal PercolateQueryString QueryString { get; set; }


		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public PercolateDescriptor PreferLocal(bool prefer_local = true)
		{
			this.QueryString.PreferLocal(prefer_local);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ScrollGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/search/scroll/
	///</pre>
	///</summary>
	public partial class ScrollDescriptor
	{
		internal ScrollQueryString QueryString { get; set; }


		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public ScrollDescriptor Scroll(string scroll)
		{
			this.QueryString.Scroll(scroll);
			return this;
		}
		

		///<summary>The scroll ID for scrolled search</summary>
		public ScrollDescriptor ScrollId(string scroll_id)
		{
			this.QueryString.ScrollId(scroll_id);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/reference/api/search/
	///</pre>
	///</summary>
	public partial class SearchDescriptor
	{
		internal SearchQueryString QueryString { get; set; }


		///<summary>The analyzer to use for the query string</summary>
		public SearchDescriptor Analyzer(string analyzer)
		{
			this.QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchDescriptor AnalyzeWildcard(bool analyze_wildcard = true)
		{
			this.QueryString.AnalyzeWildcard(analyze_wildcard);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchDescriptor DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this.QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchDescriptor Df(string df)
		{
			this.QueryString.Df(df);
			return this;
		}
		

		///<summary>Specify whether to return detailed information about score computation as part of a hit</summary>
		public SearchDescriptor Explain(bool explain = true)
		{
			this.QueryString.Explain(explain);
			return this;
		}
		

		///<summary>A comma-separated list of fields to return as part of a hit</summary>
		public SearchDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>Starting offset (default: 0)</summary>
		public SearchDescriptor From(int from)
		{
			this.QueryString.From(from);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SearchDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Comma-separated list of index boosts</summary>
		public SearchDescriptor IndicesBoost(params string[] indices_boost)
		{
			this.QueryString.IndicesBoost(indices_boost);
			return this;
		}
		

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchDescriptor Lenient(bool lenient = true)
		{
			this.QueryString.Lenient(lenient);
			return this;
		}
		

		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchDescriptor LowercaseExpandedTerms(bool lowercase_expanded_terms = true)
		{
			this.QueryString.LowercaseExpandedTerms(lowercase_expanded_terms);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public SearchDescriptor Q(string q)
		{
			this.QueryString.Q(q);
			return this;
		}
		

		///<summary>A comma-separated list of specific routing values</summary>
		public SearchDescriptor Routing(params string[] routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchDescriptor Scroll(string scroll)
		{
			this.QueryString.Scroll(scroll);
			return this;
		}
		

		///<summary>Search operation type</summary>
		public SearchDescriptor SearchType(SearchTypeOptions search_type)
		{
			this.QueryString.SearchType(search_type);
			return this;
		}
		

		///<summary>Number of hits to return (default: 10)</summary>
		public SearchDescriptor Size(int size)
		{
			this.QueryString.Size(size);
			return this;
		}
		

		///<summary>A comma-separated list of &lt;field&gt;:&lt;direction&gt; pairs</summary>
		public SearchDescriptor Sort(params string[] sort)
		{
			this.QueryString.Sort(sort);
			return this;
		}
		

		///<summary>The URL-encoded request definition using the Query DSL (instead of using request body)</summary>
		public SearchDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public SearchDescriptor Source(params string[] _source)
		{
			this.QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SearchDescriptor SourceExclude(params string[] _source_exclude)
		{
			this.QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public SearchDescriptor SourceInclude(params string[] _source_include)
		{
			this.QueryString.SourceInclude(_source_include);
			return this;
		}
		

		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public SearchDescriptor Stats(params string[] stats)
		{
			this.QueryString.Stats(stats);
			return this;
		}
		

		///<summary>Specify which field to use for suggestions</summary>
		public SearchDescriptor SuggestField(string suggest_field)
		{
			this.QueryString.SuggestField(suggest_field);
			return this;
		}
		

		///<summary>Specify suggest mode</summary>
		public SearchDescriptor SuggestMode(SuggestModeOptions suggest_mode)
		{
			this.QueryString.SuggestMode(suggest_mode);
			return this;
		}
		

		///<summary>How many suggestions to return in response</summary>
		public SearchDescriptor SuggestSize(int suggest_size)
		{
			this.QueryString.SuggestSize(suggest_size);
			return this;
		}
		

		///<summary>The source text for which the suggestions should be returned</summary>
		public SearchDescriptor SuggestText(string suggest_text)
		{
			this.QueryString.SuggestText(suggest_text);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public SearchDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify whether to return document version as part of a hit</summary>
		public SearchDescriptor Version(bool version = true)
		{
			this.QueryString.Version(version);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for SuggestPost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/search/suggest/
	///</pre>
	///</summary>
	public partial class SuggestDescriptor
	{
		internal SuggestQueryString QueryString { get; set; }


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SuggestDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this.QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SuggestDescriptor Preference(string preference)
		{
			this.QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public SuggestDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded request definition (instead of using request body)</summary>
		public SuggestDescriptor Source(string source)
		{
			this.QueryString.Source(source);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for UpdatePost
	///<pre>
	///http://elasticsearch.org/guide/reference/api/update/
	///</pre>
	///</summary>
	public partial class UpdateDescriptor
	{
		internal UpdateQueryString QueryString { get; set; }


		///<summary>Explicit write consistency setting for the operation</summary>
		public UpdateDescriptor Consistency(ConsistencyOptions consistency)
		{
			this.QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>A comma-separated list of fields to return in the response</summary>
		public UpdateDescriptor Fields(params string[] fields)
		{
			this.QueryString.Fields(fields);
			return this;
		}
		

		///<summary>The script language (default: mvel)</summary>
		public UpdateDescriptor Lang(string lang)
		{
			this.QueryString.Lang(lang);
			return this;
		}
		

		///<summary>ID of the parent document</summary>
		public UpdateDescriptor Parent(string parent)
		{
			this.QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Perform percolation during the operation; use specific registered query name, attribute, or wildcard</summary>
		public UpdateDescriptor Percolate(string percolate)
		{
			this.QueryString.Percolate(percolate);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public UpdateDescriptor Refresh(bool refresh = true)
		{
			this.QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public UpdateDescriptor Replication(ReplicationOptions replication)
		{
			this.QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public UpdateDescriptor RetryOnConflict(int retry_on_conflict)
		{
			this.QueryString.RetryOnConflict(retry_on_conflict);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public UpdateDescriptor Routing(string routing)
		{
			this.QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public UpdateDescriptor Script(string script)
		{
			this.QueryString.Script(script);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public UpdateDescriptor Timeout(string timeout)
		{
			this.QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit timestamp for the document</summary>
		public UpdateDescriptor Timestamp(string timestamp)
		{
			this.QueryString.Timestamp(timestamp);
			return this;
		}
		

		///<summary>Expiration time for the document</summary>
		public UpdateDescriptor Ttl(string ttl)
		{
			this.QueryString.Ttl(ttl);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public UpdateDescriptor Version(int version)
		{
			this.QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public UpdateDescriptor VersionType(VersionTypeOptions version_type)
		{
			this.QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
}
 