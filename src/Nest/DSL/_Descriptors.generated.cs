using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Nest.Resolvers;
///This file lays the base for all the descriptors based on the query string parameters in the spec for IElasticClient.
///This file is automatically generated from https://github.com/elasticsearch/elasticsearch-rest-api-spec
///Generated of commit 

namespace Nest
{
	
	///<summary>descriptor for BulkPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html
	///</pre>
	///</summary>
	public partial class BulkDescriptor
	{
		internal BulkQueryString _QueryString = new BulkQueryString(); 


		///<summary>Explicit write consistency setting for the operation</summary>
		public BulkDescriptor Consistency(ConsistencyOptions consistency)
		{
			this._QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public BulkDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Explicitely set the replication type</summary>
		public BulkDescriptor Replication(ReplicationOptions replication)
		{
			this._QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Default document type for items which don&#39;t provide one</summary>
		public BulkDescriptor TypeQueryString(string type)
		{
			this._QueryString.Type(type);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public BulkDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClearScrollDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html
	///</pre>
	///</summary>
	public partial class ClearScrollDescriptor
	{
		internal ClearScrollQueryString _QueryString = new ClearScrollQueryString(); 

		
	}
	
	
	///<summary>descriptor for ClusterGetSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html
	///</pre>
	///</summary>
	public partial class ClusterGetSettingsDescriptor
	{
		internal ClusterGetSettingsQueryString _QueryString = new ClusterGetSettingsQueryString(); 

		
	}
	
	
	///<summary>descriptor for ClusterHealthGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html
	///</pre>
	///</summary>
	public partial class ClusterHealthDescriptor
	{
		internal ClusterHealthQueryString _QueryString = new ClusterHealthQueryString(); 


		///<summary>Specify the level of detail for returned information</summary>
		public ClusterHealthDescriptor Level(LevelOptions level)
		{
			this._QueryString.Level(level);
			return this;
		}
		

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterHealthDescriptor Local(bool local = true)
		{
			this._QueryString.Local(local);
			return this;
		}
		

		///<summary>Explicit operation timeout for connection to master node</summary>
		public ClusterHealthDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public ClusterHealthDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Wait until the specified number of shards is active</summary>
		public ClusterHealthDescriptor WaitForActiveShards(int wait_for_active_shards)
		{
			this._QueryString.WaitForActiveShards(wait_for_active_shards);
			return this;
		}
		

		///<summary>Wait until the specified number of nodes is available</summary>
		public ClusterHealthDescriptor WaitForNodes(string wait_for_nodes)
		{
			this._QueryString.WaitForNodes(wait_for_nodes);
			return this;
		}
		

		///<summary>Wait until the specified number of relocating shards is finished</summary>
		public ClusterHealthDescriptor WaitForRelocatingShards(int wait_for_relocating_shards)
		{
			this._QueryString.WaitForRelocatingShards(wait_for_relocating_shards);
			return this;
		}
		

		///<summary>Wait until cluster is in a specific state</summary>
		public ClusterHealthDescriptor WaitForStatus(WaitForStatusOptions wait_for_status)
		{
			this._QueryString.WaitForStatus(wait_for_status);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeHotThreadsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html
	///</pre>
	///</summary>
	public partial class ClusterNodeHotThreadsDescriptor
	{
		internal ClusterNodeHotThreadsQueryString _QueryString = new ClusterNodeHotThreadsQueryString(); 


		///<summary>The interval for the second sampling of threads</summary>
		public ClusterNodeHotThreadsDescriptor Interval(string interval)
		{
			this._QueryString.Interval(interval);
			return this;
		}
		

		///<summary>Number of samples of thread stacktrace (default: 10)</summary>
		public ClusterNodeHotThreadsDescriptor Snapshots(int snapshots)
		{
			this._QueryString.Snapshots(snapshots);
			return this;
		}
		

		///<summary>Specify the number of threads to provide information for (default: 3)</summary>
		public ClusterNodeHotThreadsDescriptor Threads(int threads)
		{
			this._QueryString.Threads(threads);
			return this;
		}
		

		///<summary>The type to sample (default: cpu)</summary>
		public ClusterNodeHotThreadsDescriptor TypeQueryString(TypeOptions type)
		{
			this._QueryString.Type(type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeInfoGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html
	///</pre>
	///</summary>
	public partial class ClusterNodeInfoDescriptor
	{
		internal ClusterNodeInfoQueryString _QueryString = new ClusterNodeInfoQueryString(); 


		///<summary>Return all available information</summary>
		public ClusterNodeInfoDescriptor All(bool all = true)
		{
			this._QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default settings</summary>
		public ClusterNodeInfoDescriptor Clear(bool clear = true)
		{
			this._QueryString.Clear(clear);
			return this;
		}
		

		///<summary>Return information about HTTP</summary>
		public ClusterNodeInfoDescriptor Http(bool http = true)
		{
			this._QueryString.Http(http);
			return this;
		}
		

		///<summary>Return information about the JVM</summary>
		public ClusterNodeInfoDescriptor Jvm(bool jvm = true)
		{
			this._QueryString.Jvm(jvm);
			return this;
		}
		

		///<summary>Return information about network</summary>
		public ClusterNodeInfoDescriptor Network(bool network = true)
		{
			this._QueryString.Network(network);
			return this;
		}
		

		///<summary>Return information about the operating system</summary>
		public ClusterNodeInfoDescriptor Os(bool os = true)
		{
			this._QueryString.Os(os);
			return this;
		}
		

		///<summary>Return information about plugins</summary>
		public ClusterNodeInfoDescriptor Plugin(bool plugin = true)
		{
			this._QueryString.Plugin(plugin);
			return this;
		}
		

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeInfoDescriptor Process(bool process = true)
		{
			this._QueryString.Process(process);
			return this;
		}
		

		///<summary>Return information about node settings</summary>
		public ClusterNodeInfoDescriptor Settings(bool settings = true)
		{
			this._QueryString.Settings(settings);
			return this;
		}
		

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeInfoDescriptor ThreadPool(bool thread_pool = true)
		{
			this._QueryString.ThreadPool(thread_pool);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public ClusterNodeInfoDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Return information about transport</summary>
		public ClusterNodeInfoDescriptor Transport(bool transport = true)
		{
			this._QueryString.Transport(transport);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeShutdownPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html
	///</pre>
	///</summary>
	public partial class ClusterNodeShutdownDescriptor
	{
		internal ClusterNodeShutdownQueryString _QueryString = new ClusterNodeShutdownQueryString(); 


		///<summary>Set the delay for the operation (default: 1s)</summary>
		public ClusterNodeShutdownDescriptor Delay(string delay)
		{
			this._QueryString.Delay(delay);
			return this;
		}
		

		///<summary>Exit the JVM as well (default: true)</summary>
		public ClusterNodeShutdownDescriptor Exit(bool exit = true)
		{
			this._QueryString.Exit(exit);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterNodeStatsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html
	///</pre>
	///</summary>
	public partial class ClusterNodeStatsDescriptor
	{
		internal ClusterNodeStatsQueryString _QueryString = new ClusterNodeStatsQueryString(); 


		///<summary>Return all available information</summary>
		public ClusterNodeStatsDescriptor All(bool all = true)
		{
			this._QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default level of detail</summary>
		public ClusterNodeStatsDescriptor Clear(bool clear = true)
		{
			this._QueryString.Clear(clear);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public ClusterNodeStatsDescriptor Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public ClusterNodeStatsDescriptor Fields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>Return information about the filesystem</summary>
		public ClusterNodeStatsDescriptor Fs(bool fs = true)
		{
			this._QueryString.Fs(fs);
			return this;
		}
		

		///<summary>Return information about HTTP</summary>
		public ClusterNodeStatsDescriptor Http(bool http = true)
		{
			this._QueryString.Http(http);
			return this;
		}
		

		///<summary>Return information about indices</summary>
		public ClusterNodeStatsDescriptor Indices(bool indices = true)
		{
			this._QueryString.Indices(indices);
			return this;
		}
		

		///<summary>Return information about the JVM</summary>
		public ClusterNodeStatsDescriptor Jvm(bool jvm = true)
		{
			this._QueryString.Jvm(jvm);
			return this;
		}
		

		///<summary>Return information about network</summary>
		public ClusterNodeStatsDescriptor Network(bool network = true)
		{
			this._QueryString.Network(network);
			return this;
		}
		

		///<summary>Return information about the operating system</summary>
		public ClusterNodeStatsDescriptor Os(bool os = true)
		{
			this._QueryString.Os(os);
			return this;
		}
		

		///<summary>Return information about the Elasticsearch process</summary>
		public ClusterNodeStatsDescriptor Process(bool process = true)
		{
			this._QueryString.Process(process);
			return this;
		}
		

		///<summary>Return information about the thread pool</summary>
		public ClusterNodeStatsDescriptor ThreadPool(bool thread_pool = true)
		{
			this._QueryString.ThreadPool(thread_pool);
			return this;
		}
		

		///<summary>Return information about transport</summary>
		public ClusterNodeStatsDescriptor Transport(bool transport = true)
		{
			this._QueryString.Transport(transport);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html
	///</pre>
	///</summary>
	public partial class ClusterPutSettingsDescriptor
	{
		internal ClusterPutSettingsQueryString _QueryString = new ClusterPutSettingsQueryString(); 

		
	}
	
	
	///<summary>descriptor for ClusterReroutePost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-reroute.html
	///</pre>
	///</summary>
	public partial class ClusterRerouteDescriptor
	{
		internal ClusterRerouteQueryString _QueryString = new ClusterRerouteQueryString(); 


		///<summary>Simulate the operation only and return the resulting state</summary>
		public ClusterRerouteDescriptor DryRun(bool dry_run = true)
		{
			this._QueryString.DryRun(dry_run);
			return this;
		}
		

		///<summary>Don&#39;t return cluster state metadata (default: false)</summary>
		public ClusterRerouteDescriptor FilterMetadata(bool filter_metadata = true)
		{
			this._QueryString.FilterMetadata(filter_metadata);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ClusterStateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-state.html
	///</pre>
	///</summary>
	public partial class ClusterStateDescriptor
	{
		internal ClusterStateQueryString _QueryString = new ClusterStateQueryString(); 


		///<summary>Do not return information about blocks</summary>
		public ClusterStateDescriptor FilterBlocks(bool filter_blocks = true)
		{
			this._QueryString.FilterBlocks(filter_blocks);
			return this;
		}
		

		///<summary>Do not return information about index templates</summary>
		public ClusterStateDescriptor FilterIndexTemplates(bool filter_index_templates = true)
		{
			this._QueryString.FilterIndexTemplates(filter_index_templates);
			return this;
		}
		

		///<summary>Limit returned metadata information to specific indices</summary>
		public ClusterStateDescriptor FilterIndices(params string[] filter_indices)
		{
			this._QueryString.FilterIndices(filter_indices);
			return this;
		}
		

		///<summary>Do not return information about indices metadata</summary>
		public ClusterStateDescriptor FilterMetadata(bool filter_metadata = true)
		{
			this._QueryString.FilterMetadata(filter_metadata);
			return this;
		}
		

		///<summary>Do not return information about nodes</summary>
		public ClusterStateDescriptor FilterNodes(bool filter_nodes = true)
		{
			this._QueryString.FilterNodes(filter_nodes);
			return this;
		}
		

		///<summary>Do not return information about shard allocation (`routing_table` and `routing_nodes`)</summary>
		public ClusterStateDescriptor FilterRoutingTable(bool filter_routing_table = true)
		{
			this._QueryString.FilterRoutingTable(filter_routing_table);
			return this;
		}
		

		///<summary>Return local information, do not retrieve the state from master node (default: false)</summary>
		public ClusterStateDescriptor Local(bool local = true)
		{
			this._QueryString.Local(local);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public ClusterStateDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for CountPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html
	///</pre>
	///</summary>
	public partial class CountDescriptor<T>
	{
		internal CountQueryString _QueryString = new CountQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public CountDescriptor<T> IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Include only documents with a specific `_score` value in the result</summary>
		public CountDescriptor<T> MinScore(int min_score)
		{
			this._QueryString.MinScore(min_score);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public CountDescriptor<T> Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public CountDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public CountDescriptor<T> Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for Delete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete.html
	///</pre>
	///</summary>
	public partial class DeleteDescriptor<T>
	{
		internal DeleteQueryString _QueryString = new DeleteQueryString(); 


		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteDescriptor<T> Consistency(ConsistencyOptions consistency)
		{
			this._QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>ID of parent document</summary>
		public DeleteDescriptor<T> Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public DeleteDescriptor<T> Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public DeleteDescriptor<T> Replication(ReplicationOptions replication)
		{
			this._QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public DeleteDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public DeleteDescriptor<T> Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public DeleteDescriptor<T> Version(int version)
		{
			this._QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public DeleteDescriptor<T> VersionType(VersionTypeOptions version_type)
		{
			this._QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for DeleteByQuery
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html
	///</pre>
	///</summary>
	public partial class DeleteByQueryDescriptor<T>
	{
		internal DeleteByQueryQueryString _QueryString = new DeleteByQueryQueryString(); 


		///<summary>The analyzer to use for the query string</summary>
		public DeleteByQueryDescriptor<T> Analyzer(string analyzer)
		{
			this._QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Specific write consistency setting for the operation</summary>
		public DeleteByQueryDescriptor<T> Consistency(ConsistencyOptions consistency)
		{
			this._QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public DeleteByQueryDescriptor<T> DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public DeleteByQueryDescriptor<T> Df(string df)
		{
			this._QueryString.Df(df);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public DeleteByQueryDescriptor<T> IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public DeleteByQueryDescriptor<T> Replication(ReplicationOptions replication)
		{
			this._QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public DeleteByQueryDescriptor<T> Q(string q)
		{
			this._QueryString.Q(q);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public DeleteByQueryDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public DeleteByQueryDescriptor<T> Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public DeleteByQueryDescriptor<T> Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ExistsHead
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html
	///</pre>
	///</summary>
	public partial class ExistsDescriptor
	{
		internal ExistsQueryString _QueryString = new ExistsQueryString(); 


		///<summary>The ID of the parent document</summary>
		public ExistsDescriptor Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExistsDescriptor Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public ExistsDescriptor Realtime(bool realtime = true)
		{
			this._QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public ExistsDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public ExistsDescriptor Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for ExplainGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html
	///</pre>
	///</summary>
	public partial class ExplainDescriptor
	{
		internal ExplainQueryString _QueryString = new ExplainQueryString(); 


		///<summary>Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)</summary>
		public ExplainDescriptor AnalyzeWildcard(bool analyze_wildcard = true)
		{
			this._QueryString.AnalyzeWildcard(analyze_wildcard);
			return this;
		}
		

		///<summary>The analyzer for the query string query</summary>
		public ExplainDescriptor Analyzer(string analyzer)
		{
			this._QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public ExplainDescriptor DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The default field for query string query (default: _all)</summary>
		public ExplainDescriptor Df(string df)
		{
			this._QueryString.Df(df);
			return this;
		}
		

		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainDescriptor Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public ExplainDescriptor Fields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public ExplainDescriptor Lenient(bool lenient = true)
		{
			this._QueryString.Lenient(lenient);
			return this;
		}
		

		///<summary>Specify whether query terms should be lowercased</summary>
		public ExplainDescriptor LowercaseExpandedTerms(bool lowercase_expanded_terms = true)
		{
			this._QueryString.LowercaseExpandedTerms(lowercase_expanded_terms);
			return this;
		}
		

		///<summary>The ID of the parent document</summary>
		public ExplainDescriptor Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public ExplainDescriptor Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public ExplainDescriptor Q(string q)
		{
			this._QueryString.Q(q);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public ExplainDescriptor Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ExplainDescriptor Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public ExplainDescriptor Source(params string[] _source)
		{
			this._QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public ExplainDescriptor SourceExclude(params string[] _source_exclude)
		{
			this._QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public ExplainDescriptor SourceInclude(params string[] _source_include)
		{
			this._QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for Get
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html
	///</pre>
	///</summary>
	public partial class GetDescriptor<T>
	{
		internal GetQueryString _QueryString = new GetQueryString(); 


		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetDescriptor<T> Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public GetDescriptor<T> Fields(params Expression<Func<T, object>>[] typedPathLookups) 
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>The ID of the parent document</summary>
		public GetDescriptor<T> Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetDescriptor<T> Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetDescriptor<T> Realtime(bool realtime = true)
		{
			this._QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetDescriptor<T> Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public GetDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetDescriptor<T> Source(params string[] _source)
		{
			this._QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetDescriptor<T> SourceExclude(params string[] _source_exclude)
		{
			this._QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetDescriptor<T> SourceInclude(params string[] _source_include)
		{
			this._QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for GetSource
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html
	///</pre>
	///</summary>
	public partial class GetSourceDescriptor
	{
		internal GetSourceQueryString _QueryString = new GetSourceQueryString(); 


		///<summary>The ID of the parent document</summary>
		public GetSourceDescriptor Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public GetSourceDescriptor Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public GetSourceDescriptor Realtime(bool realtime = true)
		{
			this._QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public GetSourceDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public GetSourceDescriptor Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public GetSourceDescriptor Source(params string[] _source)
		{
			this._QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public GetSourceDescriptor SourceExclude(params string[] _source_exclude)
		{
			this._QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public GetSourceDescriptor SourceInclude(params string[] _source_include)
		{
			this._QueryString.SourceInclude(_source_include);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public GetSourceDescriptor Version(int version)
		{
			this._QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public GetSourceDescriptor VersionType(VersionTypeOptions version_type)
		{
			this._QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndexPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html
	///</pre>
	///</summary>
	public partial class IndexDescriptor<T>
	{
		internal IndexQueryString _QueryString = new IndexQueryString(); 


		///<summary>Explicit write consistency setting for the operation</summary>
		public IndexDescriptor<T> Consistency(ConsistencyOptions consistency)
		{
			this._QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>Explicit operation type</summary>
		public IndexDescriptor<T> OpType(OpTypeOptions op_type)
		{
			this._QueryString.OpType(op_type);
			return this;
		}
		

		///<summary>ID of the parent document</summary>
		public IndexDescriptor<T> Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Percolator queries to execute while indexing the document</summary>
		public IndexDescriptor<T> Percolate(string percolate)
		{
			this._QueryString.Percolate(percolate);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public IndexDescriptor<T> Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public IndexDescriptor<T> Replication(ReplicationOptions replication)
		{
			this._QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public IndexDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public IndexDescriptor<T> Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit timestamp for the document</summary>
		public IndexDescriptor<T> Timestamp(string timestamp)
		{
			this._QueryString.Timestamp(timestamp);
			return this;
		}
		

		///<summary>Expiration time for the document</summary>
		public IndexDescriptor<T> Ttl(string ttl)
		{
			this._QueryString.Ttl(ttl);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public IndexDescriptor<T> Version(int version)
		{
			this._QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public IndexDescriptor<T> VersionType(VersionTypeOptions version_type)
		{
			this._QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesAnalyzeGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html
	///</pre>
	///</summary>
	public partial class AnalyzeDescriptor
	{
		internal AnalyzeQueryString _QueryString = new AnalyzeQueryString(); 


		///<summary>The name of the analyzer to use</summary>
		public AnalyzeDescriptor Analyzer(string analyzer)
		{
			this._QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public AnalyzeDescriptor Field(string field)
		{
			this._QueryString.Field(field);
			return this;
		}
		
			
		///<summary>Use the analyzer configured for this field (instead of passing the analyzer name)</summary>
		public AnalyzeDescriptor Field<T>(Expression<Func<T, object>> typedPathLookup) where T : class
		{
			typedPathLookup.ThrowIfNull("typedPathLookup");
			this._QueryString._Field(typedPathLookup);
			return this;
		}
			

		///<summary>A comma-separated list of filters to use for the analysis</summary>
		public AnalyzeDescriptor Filters(params string[] filters)
		{
			this._QueryString.Filters(filters);
			return this;
		}
		

		///<summary>The name of the index to scope the operation</summary>
		public AnalyzeDescriptor IndexQueryString(string index)
		{
			this._QueryString.Index(index);
			return this;
		}
		

		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public AnalyzeDescriptor PreferLocal(bool prefer_local = true)
		{
			this._QueryString.PreferLocal(prefer_local);
			return this;
		}
		

		///<summary>The text on which the analysis should be performed (when request body is not used)</summary>
		public AnalyzeDescriptor Text(string text)
		{
			this._QueryString.Text(text);
			return this;
		}
		

		///<summary>The name of the tokenizer to use for the analysis</summary>
		public AnalyzeDescriptor Tokenizer(string tokenizer)
		{
			this._QueryString.Tokenizer(tokenizer);
			return this;
		}
		

		///<summary>Format of the output</summary>
		public AnalyzeDescriptor Format(FormatOptions format)
		{
			this._QueryString.Format(format);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesClearCachePost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html
	///</pre>
	///</summary>
	public partial class ClearCacheDescriptor
	{
		internal ClearCacheQueryString _QueryString = new ClearCacheQueryString(); 


		///<summary>Clear field data</summary>
		public ClearCacheDescriptor FieldData(bool field_data = true)
		{
			this._QueryString.FieldData(field_data);
			return this;
		}
		

		///<summary>Clear field data</summary>
		public ClearCacheDescriptor Fielddata(bool fielddata = true)
		{
			this._QueryString.Fielddata(fielddata);
			return this;
		}
		

		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public ClearCacheDescriptor Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
		public ClearCacheDescriptor Fields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>Clear filter caches</summary>
		public ClearCacheDescriptor Filter(bool filter = true)
		{
			this._QueryString.Filter(filter);
			return this;
		}
		

		///<summary>Clear filter caches</summary>
		public ClearCacheDescriptor FilterCache(bool filter_cache = true)
		{
			this._QueryString.FilterCache(filter_cache);
			return this;
		}
		

		///<summary>A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)</summary>
		public ClearCacheDescriptor FilterKeys(bool filter_keys = true)
		{
			this._QueryString.FilterKeys(filter_keys);
			return this;
		}
		

		///<summary>Clear ID caches for parent/child</summary>
		public ClearCacheDescriptor Id(bool id = true)
		{
			this._QueryString.Id(id);
			return this;
		}
		

		///<summary>Clear ID caches for parent/child</summary>
		public ClearCacheDescriptor IdCache(bool id_cache = true)
		{
			this._QueryString.IdCache(id_cache);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public ClearCacheDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>A comma-separated list of index name to limit the operation</summary>
		public ClearCacheDescriptor IndexQueryString(params string[] index)
		{
			this._QueryString.Index(index);
			return this;
		}
		

		///<summary>Clear the recycler cache</summary>
		public ClearCacheDescriptor Recycler(bool recycler = true)
		{
			this._QueryString.Recycler(recycler);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesClosePost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html
	///</pre>
	///</summary>
	public partial class CloseIndexDescriptor
	{
		internal CloseIndexQueryString _QueryString = new CloseIndexQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public CloseIndexDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public CloseIndexDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesCreatePut
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html
	///</pre>
	///</summary>
	public partial class CreateIndexDescriptor
	{
		internal CreateIndexQueryString _QueryString = new CreateIndexQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public CreateIndexDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public CreateIndexDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDelete
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html
	///</pre>
	///</summary>
	public partial class DeleteIndexDescriptor
	{
		internal DeleteIndexQueryString _QueryString = new DeleteIndexQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public DeleteIndexDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public DeleteIndexDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesDeleteAliasDescriptor
	{
		internal IndicesDeleteAliasQueryString _QueryString = new IndicesDeleteAliasQueryString(); 


		///<summary>Explicit timestamp for the document</summary>
		public IndicesDeleteAliasDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesDeleteAliasDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-mapping.html
	///</pre>
	///</summary>
	public partial class DeleteMappingDescriptor
	{
		internal DeleteMappingQueryString _QueryString = new DeleteMappingQueryString(); 


		///<summary>Specify timeout for connection to master</summary>
		public DeleteMappingDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html
	///</pre>
	///</summary>
	public partial class DeleteTemplateDescriptor
	{
		internal DeleteTemplateQueryString _QueryString = new DeleteTemplateQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public DeleteTemplateDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public DeleteTemplateDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesDeleteWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html
	///</pre>
	///</summary>
	public partial class DeleteWarmerDescriptor
	{
		internal DeleteWarmerQueryString _QueryString = new DeleteWarmerQueryString(); 


		///<summary>Specify timeout for connection to master</summary>
		public DeleteWarmerDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesExistsHead
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-settings.html
	///</pre>
	///</summary>
	public partial class IndexExistsDescriptor
	{
		internal IndexExistsQueryString _QueryString = new IndexExistsQueryString(); 

		
	}
	
	
	///<summary>descriptor for IndicesExistsAliasHead
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesExistsAliasDescriptor
	{
		internal IndicesExistsAliasQueryString _QueryString = new IndicesExistsAliasQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsAliasDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesExistsTypeHead
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-types-exists.html
	///</pre>
	///</summary>
	public partial class IndicesExistsTypeDescriptor
	{
		internal IndicesExistsTypeQueryString _QueryString = new IndicesExistsTypeQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesExistsTypeDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesFlushPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html
	///</pre>
	///</summary>
	public partial class FlushDescriptor
	{
		internal FlushQueryString _QueryString = new FlushQueryString(); 


		///<summary>Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)</summary>
		public FlushDescriptor Force(bool force = true)
		{
			this._QueryString.Force(force);
			return this;
		}
		

		///<summary>If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)</summary>
		public FlushDescriptor Full(bool full = true)
		{
			this._QueryString.Full(full);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public FlushDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public FlushDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class GetAliasesDescriptor
	{
		internal GetAliasesQueryString _QueryString = new GetAliasesQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public GetAliasesDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetAliases
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesGetAliasesDescriptor
	{
		internal IndicesGetAliasesQueryString _QueryString = new IndicesGetAliasesQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public IndicesGetAliasesDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetFieldMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html
	///</pre>
	///</summary>
	public partial class IndicesGetFieldMappingDescriptor
	{
		internal IndicesGetFieldMappingQueryString _QueryString = new IndicesGetFieldMappingQueryString(); 


		///<summary>Whether the default mapping values should be returned as well</summary>
		public IndicesGetFieldMappingDescriptor IncludeDefaults(bool include_defaults = true)
		{
			this._QueryString.IncludeDefaults(include_defaults);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesGetMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html
	///</pre>
	///</summary>
	public partial class GetMappingDescriptor
	{
		internal GetMappingQueryString _QueryString = new GetMappingQueryString(); 

		
	}
	
	
	///<summary>descriptor for IndicesGetSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html
	///</pre>
	///</summary>
	public partial class GetIndexSettingsDescriptor
	{
		internal GetIndexSettingsQueryString _QueryString = new GetIndexSettingsQueryString(); 

		
	}
	
	
	///<summary>descriptor for IndicesGetTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html
	///</pre>
	///</summary>
	public partial class GetTemplateDescriptor
	{
		internal GetTemplateQueryString _QueryString = new GetTemplateQueryString(); 

		
	}
	
	
	///<summary>descriptor for IndicesGetWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html
	///</pre>
	///</summary>
	public partial class GetWarmerDescriptor
	{
		internal GetWarmerQueryString _QueryString = new GetWarmerQueryString(); 

		
	}
	
	
	///<summary>descriptor for IndicesOpenPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html
	///</pre>
	///</summary>
	public partial class OpenIndexDescriptor
	{
		internal OpenIndexQueryString _QueryString = new OpenIndexQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public OpenIndexDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public OpenIndexDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesOptimizePost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html
	///</pre>
	///</summary>
	public partial class OptimizeDescriptor
	{
		internal OptimizeQueryString _QueryString = new OptimizeQueryString(); 


		///<summary>Specify whether the index should be flushed after performing the operation (default: true)</summary>
		public OptimizeDescriptor Flush(bool flush = true)
		{
			this._QueryString.Flush(flush);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public OptimizeDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>The number of segments the index should be merged into (default: dynamic)</summary>
		public OptimizeDescriptor MaxNumSegments(int max_num_segments)
		{
			this._QueryString.MaxNumSegments(max_num_segments);
			return this;
		}
		

		///<summary>Specify whether the operation should only expunge deleted documents</summary>
		public OptimizeDescriptor OnlyExpungeDeletes(bool only_expunge_deletes = true)
		{
			this._QueryString.OnlyExpungeDeletes(only_expunge_deletes);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public OptimizeDescriptor OperationThreading(string operation_threading)
		{
			this._QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>Specify whether the index should be refreshed after performing the operation (default: true)</summary>
		public OptimizeDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specify whether the request should block until the merge process is finished (default: true)</summary>
		public OptimizeDescriptor WaitForMerge(bool wait_for_merge = true)
		{
			this._QueryString.WaitForMerge(wait_for_merge);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndexPutAlias
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class IndicesPutAliasDescriptor
	{
		internal IndicesPutAliasQueryString _QueryString = new IndicesPutAliasQueryString(); 


		///<summary>Explicit timestamp for the document</summary>
		public IndicesPutAliasDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public IndicesPutAliasDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutMapping
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html
	///</pre>
	///</summary>
	public partial class PutMappingDescriptor<T>
	{
		internal PutMappingQueryString _QueryString = new PutMappingQueryString(); 


		///<summary>Specify whether to ignore conflicts while updating the mapping (default: false)</summary>
		public PutMappingDescriptor<T> IgnoreConflicts(bool ignore_conflicts = true)
		{
			this._QueryString.IgnoreConflicts(ignore_conflicts);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public PutMappingDescriptor<T> Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public PutMappingDescriptor<T> MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutSettings
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html
	///</pre>
	///</summary>
	public partial class UpdateSettingsDescriptor
	{
		internal UpdateSettingsQueryString _QueryString = new UpdateSettingsQueryString(); 


		///<summary>Specify timeout for connection to master</summary>
		public UpdateSettingsDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutTemplate
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html
	///</pre>
	///</summary>
	public partial class PutTemplateDescriptor
	{
		internal PutTemplateQueryString _QueryString = new PutTemplateQueryString(); 


		///<summary>Explicit operation timeout</summary>
		public PutTemplateDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public PutTemplateDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesPutWarmer
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html
	///</pre>
	///</summary>
	public partial class PutWarmerDescriptor
	{
		internal PutWarmerQueryString _QueryString = new PutWarmerQueryString(); 


		///<summary>Specify timeout for connection to master</summary>
		public PutWarmerDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesRefreshPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html
	///</pre>
	///</summary>
	public partial class RefreshDescriptor
	{
		internal RefreshQueryString _QueryString = new RefreshQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public RefreshDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public RefreshDescriptor OperationThreading(string operation_threading)
		{
			this._QueryString.OperationThreading(operation_threading);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesSegmentsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html
	///</pre>
	///</summary>
	public partial class SegmentsDescriptor
	{
		internal SegmentsQueryString _QueryString = new SegmentsQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SegmentsDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public SegmentsDescriptor OperationThreading(string operation_threading)
		{
			this._QueryString.OperationThreading(operation_threading);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesSnapshotIndexPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html
	///</pre>
	///</summary>
	public partial class SnapshotDescriptor
	{
		internal SnapshotQueryString _QueryString = new SnapshotQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SnapshotDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesStatsGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html
	///</pre>
	///</summary>
	public partial class IndicesStatsDescriptor
	{
		internal IndicesStatsQueryString _QueryString = new IndicesStatsQueryString(); 


		///<summary>Return all available information</summary>
		public IndicesStatsDescriptor All(bool all = true)
		{
			this._QueryString.All(all);
			return this;
		}
		

		///<summary>Reset the default level of detail</summary>
		public IndicesStatsDescriptor Clear(bool clear = true)
		{
			this._QueryString.Clear(clear);
			return this;
		}
		

		///<summary>Return information about completion suggester stats</summary>
		public IndicesStatsDescriptor Completion(bool completion = true)
		{
			this._QueryString.Completion(completion);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor CompletionFields(params string[] completion_fields)
		{
			this._QueryString.CompletionFields(completion_fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields for `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor CompletionFields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._CompletionFields(typedPathLookups);
			return this;
		}
			

		///<summary>Return information about indexed and deleted documents</summary>
		public IndicesStatsDescriptor Docs(bool docs = true)
		{
			this._QueryString.Docs(docs);
			return this;
		}
		

		///<summary>Return information about field data</summary>
		public IndicesStatsDescriptor Fielddata(bool fielddata = true)
		{
			this._QueryString.Fielddata(fielddata);
			return this;
		}
		

		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor FielddataFields(params string[] fielddata_fields)
		{
			this._QueryString.FielddataFields(fielddata_fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields for `fielddata` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor FielddataFields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._FielddataFields(typedPathLookups);
			return this;
		}
			

		///<summary>A comma-separated list of fields for `fielddata` and `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields for `fielddata` and `completion` metric (supports wildcards)</summary>
		public IndicesStatsDescriptor Fields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>Return information about filter cache</summary>
		public IndicesStatsDescriptor FilterCache(bool filter_cache = true)
		{
			this._QueryString.FilterCache(filter_cache);
			return this;
		}
		

		///<summary>Return information about flush operations</summary>
		public IndicesStatsDescriptor Flush(bool flush = true)
		{
			this._QueryString.Flush(flush);
			return this;
		}
		

		///<summary>Return information about get operations</summary>
		public IndicesStatsDescriptor Get(bool get = true)
		{
			this._QueryString.Get(get);
			return this;
		}
		

		///<summary>A comma-separated list of search groups for `search` statistics</summary>
		public IndicesStatsDescriptor Groups(bool groups = true)
		{
			this._QueryString.Groups(groups);
			return this;
		}
		

		///<summary>Return information about ID cache</summary>
		public IndicesStatsDescriptor IdCache(bool id_cache = true)
		{
			this._QueryString.IdCache(id_cache);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatsDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Return information about indexing operations</summary>
		public IndicesStatsDescriptor Indexing(bool indexing = true)
		{
			this._QueryString.Indexing(indexing);
			return this;
		}
		

		///<summary>Return information about merge operations</summary>
		public IndicesStatsDescriptor Merge(bool merge = true)
		{
			this._QueryString.Merge(merge);
			return this;
		}
		

		///<summary>Return information about refresh operations</summary>
		public IndicesStatsDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Return information about search operations; use the `groups` parameter to include information for specific search groups</summary>
		public IndicesStatsDescriptor Search(bool search = true)
		{
			this._QueryString.Search(search);
			return this;
		}
		

		///<summary>Return information about the size of the index</summary>
		public IndicesStatsDescriptor Store(bool store = true)
		{
			this._QueryString.Store(store);
			return this;
		}
		

		///<summary>Return information about warmers</summary>
		public IndicesStatsDescriptor Warmer(bool warmer = true)
		{
			this._QueryString.Warmer(warmer);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesStatusGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html
	///</pre>
	///</summary>
	public partial class IndicesStatusDescriptor
	{
		internal IndicesStatusQueryString _QueryString = new IndicesStatusQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public IndicesStatusDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesStatusDescriptor OperationThreading(string operation_threading)
		{
			this._QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>Return information about shard recovery</summary>
		public IndicesStatusDescriptor Recovery(bool recovery = true)
		{
			this._QueryString.Recovery(recovery);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public IndicesStatusDescriptor Snapshot(bool snapshot = true)
		{
			this._QueryString.Snapshot(snapshot);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesUpdateAliasesPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html
	///</pre>
	///</summary>
	public partial class AliasDescriptor
	{
		internal AliasQueryString _QueryString = new AliasQueryString(); 


		///<summary>Request timeout</summary>
		public AliasDescriptor Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Specify timeout for connection to master</summary>
		public AliasDescriptor MasterTimeout(string master_timeout)
		{
			this._QueryString.MasterTimeout(master_timeout);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for IndicesValidateQueryGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html
	///</pre>
	///</summary>
	public partial class ValidateQueryDescriptor<T>
	{
		internal ValidateQueryQueryString _QueryString = new ValidateQueryQueryString(); 


		///<summary>Return detailed information about the error</summary>
		public ValidateQueryDescriptor<T> Explain(bool explain = true)
		{
			this._QueryString.Explain(explain);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public ValidateQueryDescriptor<T> IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>TODO: ?</summary>
		public ValidateQueryDescriptor<T> OperationThreading(string operation_threading)
		{
			this._QueryString.OperationThreading(operation_threading);
			return this;
		}
		

		///<summary>The URL-encoded query definition (instead of using the request body)</summary>
		public ValidateQueryDescriptor<T> Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		

		///<summary>Query in the Lucene query string syntax</summary>
		public ValidateQueryDescriptor<T> Q(string q)
		{
			this._QueryString.Q(q);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for InfoGet
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public partial class InfoDescriptor
	{
		internal InfoQueryString _QueryString = new InfoQueryString(); 

		
	}
	
	
	///<summary>descriptor for MgetGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html
	///</pre>
	///</summary>
	public partial class MultiGetDescriptor
	{
		internal MultiGetQueryString _QueryString = new MultiGetQueryString(); 


		///<summary>A comma-separated list of fields to return in the response</summary>
		public MultiGetDescriptor Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public MultiGetDescriptor Fields<T>(params Expression<Func<T, object>>[] typedPathLookups) where T : class
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public MultiGetDescriptor Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specify whether to perform the operation in realtime or search mode</summary>
		public MultiGetDescriptor Realtime(bool realtime = true)
		{
			this._QueryString.Realtime(realtime);
			return this;
		}
		

		///<summary>Refresh the shard containing the document before performing the operation</summary>
		public MultiGetDescriptor Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public MultiGetDescriptor Source(params string[] _source)
		{
			this._QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public MultiGetDescriptor SourceExclude(params string[] _source_exclude)
		{
			this._QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public MultiGetDescriptor SourceInclude(params string[] _source_include)
		{
			this._QueryString.SourceInclude(_source_include);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for MltGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html
	///</pre>
	///</summary>
	public partial class MoreLikeThisDescriptor<T>
	{
		internal MoreLikeThisQueryString _QueryString = new MoreLikeThisQueryString(); 


		///<summary>The boost factor</summary>
		public MoreLikeThisDescriptor<T> BoostTerms(double boost_terms)
		{
			this._QueryString.BoostTerms(boost_terms);
			return this;
		}
		

		///<summary>The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored</summary>
		public MoreLikeThisDescriptor<T> MaxDocFreq(int max_doc_freq)
		{
			this._QueryString.MaxDocFreq(max_doc_freq);
			return this;
		}
		

		///<summary>The maximum query terms to be included in the generated query</summary>
		public MoreLikeThisDescriptor<T> MaxQueryTerms(int max_query_terms)
		{
			this._QueryString.MaxQueryTerms(max_query_terms);
			return this;
		}
		

		///<summary>The minimum length of the word: longer words will be ignored</summary>
		public MoreLikeThisDescriptor<T> MaxWordLen(int max_word_len)
		{
			this._QueryString.MaxWordLen(max_word_len);
			return this;
		}
		

		///<summary>The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored</summary>
		public MoreLikeThisDescriptor<T> MinDocFreq(int min_doc_freq)
		{
			this._QueryString.MinDocFreq(min_doc_freq);
			return this;
		}
		

		///<summary>The term frequency as percent: terms with lower occurence in the source document will be ignored</summary>
		public MoreLikeThisDescriptor<T> MinTermFreq(int min_term_freq)
		{
			this._QueryString.MinTermFreq(min_term_freq);
			return this;
		}
		

		///<summary>The minimum length of the word: shorter words will be ignored</summary>
		public MoreLikeThisDescriptor<T> MinWordLen(int min_word_len)
		{
			this._QueryString.MinWordLen(min_word_len);
			return this;
		}
		

		///<summary>Specific fields to perform the query against</summary>
		public MoreLikeThisDescriptor<T> MltFields(params string[] mlt_fields)
		{
			this._QueryString.MltFields(mlt_fields);
			return this;
		}
		
			
		///<summary>Specific fields to perform the query against</summary>
		public MoreLikeThisDescriptor<T> MltFields(params Expression<Func<T, object>>[] typedPathLookups) 
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._MltFields(typedPathLookups);
			return this;
		}
			

		///<summary>How many terms have to match in order to consider the document a match (default: 0.3)</summary>
		public MoreLikeThisDescriptor<T> PercentTermsToMatch(double percent_terms_to_match)
		{
			this._QueryString.PercentTermsToMatch(percent_terms_to_match);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public MoreLikeThisDescriptor<T> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The offset from which to return results</summary>
		public MoreLikeThisDescriptor<T> SearchFrom(int search_from)
		{
			this._QueryString.SearchFrom(search_from);
			return this;
		}
		

		///<summary>A comma-separated list of indices to perform the query against (default: the index containing the document)</summary>
		public MoreLikeThisDescriptor<T> SearchIndices(params string[] search_indices)
		{
			this._QueryString.SearchIndices(search_indices);
			return this;
		}
		

		///<summary>The search query hint</summary>
		public MoreLikeThisDescriptor<T> SearchQueryHint(string search_query_hint)
		{
			this._QueryString.SearchQueryHint(search_query_hint);
			return this;
		}
		

		///<summary>A scroll search request definition</summary>
		public MoreLikeThisDescriptor<T> SearchScroll(string search_scroll)
		{
			this._QueryString.SearchScroll(search_scroll);
			return this;
		}
		

		///<summary>The number of documents to return (default: 10)</summary>
		public MoreLikeThisDescriptor<T> SearchSize(int search_size)
		{
			this._QueryString.SearchSize(search_size);
			return this;
		}
		

		///<summary>A specific search request definition (instead of using the request body)</summary>
		public MoreLikeThisDescriptor<T> SearchSource(string search_source)
		{
			this._QueryString.SearchSource(search_source);
			return this;
		}
		

		///<summary>Specific search type (eg. `dfs_then_fetch`, `count`, etc)</summary>
		public MoreLikeThisDescriptor<T> SearchType(string search_type)
		{
			this._QueryString.SearchType(search_type);
			return this;
		}
		

		///<summary>A comma-separated list of types to perform the query against (default: the same type as the document)</summary>
		public MoreLikeThisDescriptor<T> SearchTypes(params string[] search_types)
		{
			this._QueryString.SearchTypes(search_types);
			return this;
		}
		

		///<summary>A list of stop words to be ignored</summary>
		public MoreLikeThisDescriptor<T> StopWords(params string[] stop_words)
		{
			this._QueryString.StopWords(stop_words);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for MsearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html
	///</pre>
	///</summary>
	public partial class MultiSearchDescriptor
	{
		internal MultiSearchQueryString _QueryString = new MultiSearchQueryString(); 


		///<summary>Search operation type</summary>
		public MultiSearchDescriptor SearchType(SearchTypeOptions search_type)
		{
			this._QueryString.SearchType(search_type);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for PercolateGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html
	///</pre>
	///</summary>
	public partial class PercolateDescriptor<T,K>
	{
		internal PercolateQueryString _QueryString = new PercolateQueryString(); 


		///<summary>With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)</summary>
		public PercolateDescriptor<T,K> PreferLocal(bool prefer_local = true)
		{
			this._QueryString.PreferLocal(prefer_local);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for PingHead
	///<pre>
	///http://www.elasticsearch.org/guide/
	///</pre>
	///</summary>
	public partial class PingDescriptor
	{
		internal PingQueryString _QueryString = new PingQueryString(); 

		
	}
	
	
	///<summary>descriptor for ScrollGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html
	///</pre>
	///</summary>
	public partial class ScrollDescriptor<T>
	{
		internal ScrollQueryString _QueryString = new ScrollQueryString(); 


		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public ScrollDescriptor<T> Scroll(string scroll)
		{
			this._QueryString.Scroll(scroll);
			return this;
		}
		

		///<summary>The scroll ID for scrolled search</summary>
		public ScrollDescriptor<T> ScrollId(string scroll_id)
		{
			this._QueryString.ScrollId(scroll_id);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for SearchGet
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html
	///</pre>
	///</summary>
	public partial class SearchDescriptor<T>
	{
		internal SearchQueryString _QueryString = new SearchQueryString(); 


		///<summary>The analyzer to use for the query string</summary>
		public SearchDescriptor<T> Analyzer(string analyzer)
		{
			this._QueryString.Analyzer(analyzer);
			return this;
		}
		

		///<summary>Specify whether wildcard and prefix queries should be analyzed (default: false)</summary>
		public SearchDescriptor<T> AnalyzeWildcard(bool analyze_wildcard = true)
		{
			this._QueryString.AnalyzeWildcard(analyze_wildcard);
			return this;
		}
		

		///<summary>The default operator for query string query (AND or OR)</summary>
		public SearchDescriptor<T> DefaultOperator(DefaultOperatorOptions default_operator)
		{
			this._QueryString.DefaultOperator(default_operator);
			return this;
		}
		

		///<summary>The field to use as default where no field prefix is given in the query string</summary>
		public SearchDescriptor<T> Df(string df)
		{
			this._QueryString.Df(df);
			return this;
		}
		

		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SearchDescriptor<T> IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Comma-separated list of index boosts</summary>
		public SearchDescriptor<T> IndicesBoost(params string[] indices_boost)
		{
			this._QueryString.IndicesBoost(indices_boost);
			return this;
		}
		

		///<summary>Specify whether format-based query failures (such as providing text to a numeric field) should be ignored</summary>
		public SearchDescriptor<T> Lenient(bool lenient = true)
		{
			this._QueryString.Lenient(lenient);
			return this;
		}
		

		///<summary>Specify whether query terms should be lowercased</summary>
		public SearchDescriptor<T> LowercaseExpandedTerms(bool lowercase_expanded_terms = true)
		{
			this._QueryString.LowercaseExpandedTerms(lowercase_expanded_terms);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SearchDescriptor<T> Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>A comma-separated list of specific routing values</summary>
		public SearchDescriptor<T> Routing(params string[] routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>Specify how long a consistent view of the index should be maintained for scrolled search</summary>
		public SearchDescriptor<T> Scroll(string scroll)
		{
			this._QueryString.Scroll(scroll);
			return this;
		}
		

		///<summary>Search operation type</summary>
		public SearchDescriptor<T> SearchType(SearchTypeOptions search_type)
		{
			this._QueryString.SearchType(search_type);
			return this;
		}
		

		///<summary>The URL-encoded request definition using the Query DSL (instead of using request body)</summary>
		public SearchDescriptor<T> Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		

		///<summary>True or false to return the _source field or not, or a list of fields to return</summary>
		public SearchDescriptor<T> Source(params string[] _source)
		{
			this._QueryString.Source(_source);
			return this;
		}
		

		///<summary>A list of fields to exclude from the returned _source field</summary>
		public SearchDescriptor<T> SourceExclude(params string[] _source_exclude)
		{
			this._QueryString.SourceExclude(_source_exclude);
			return this;
		}
		

		///<summary>A list of fields to extract and return from the _source field</summary>
		public SearchDescriptor<T> SourceInclude(params string[] _source_include)
		{
			this._QueryString.SourceInclude(_source_include);
			return this;
		}
		

		///<summary>Specific &#39;tag&#39; of the request for logging and statistical purposes</summary>
		public SearchDescriptor<T> Stats(params string[] stats)
		{
			this._QueryString.Stats(stats);
			return this;
		}
		

		///<summary>Specify which field to use for suggestions</summary>
		public SearchDescriptor<T> SuggestField(string suggest_field)
		{
			this._QueryString.SuggestField(suggest_field);
			return this;
		}
		
			
		///<summary>Specify which field to use for suggestions</summary>
		public SearchDescriptor<T> SuggestField(Expression<Func<T, object>> typedPathLookup) 
		{
			typedPathLookup.ThrowIfNull("typedPathLookup");
			this._QueryString._SuggestField(typedPathLookup);
			return this;
		}
			

		///<summary>Specify suggest mode</summary>
		public SearchDescriptor<T> SuggestMode(SuggestModeOptions suggest_mode)
		{
			this._QueryString.SuggestMode(suggest_mode);
			return this;
		}
		

		///<summary>How many suggestions to return in response</summary>
		public SearchDescriptor<T> SuggestSize(int suggest_size)
		{
			this._QueryString.SuggestSize(suggest_size);
			return this;
		}
		

		///<summary>The source text for which the suggestions should be returned</summary>
		public SearchDescriptor<T> SuggestText(string suggest_text)
		{
			this._QueryString.SuggestText(suggest_text);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for SuggestPost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html
	///</pre>
	///</summary>
	public partial class SuggestDescriptor
	{
		internal SuggestQueryString _QueryString = new SuggestQueryString(); 


		///<summary>When performed on multiple indices, allows to ignore `missing` ones</summary>
		public SuggestDescriptor IgnoreIndices(IgnoreIndicesOptions ignore_indices)
		{
			this._QueryString.IgnoreIndices(ignore_indices);
			return this;
		}
		

		///<summary>Specify the node or shard the operation should be performed on (default: random)</summary>
		public SuggestDescriptor Preference(string preference)
		{
			this._QueryString.Preference(preference);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public SuggestDescriptor Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded request definition (instead of using request body)</summary>
		public SuggestDescriptor Source(string source)
		{
			this._QueryString.Source(source);
			return this;
		}
		
		
	}
	
	
	///<summary>descriptor for UpdatePost
	///<pre>
	///http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-update.html
	///</pre>
	///</summary>
	public partial class UpdateDescriptor<T,K>
	{
		internal UpdateQueryString _QueryString = new UpdateQueryString(); 


		///<summary>Explicit write consistency setting for the operation</summary>
		public UpdateDescriptor<T,K> Consistency(ConsistencyOptions consistency)
		{
			this._QueryString.Consistency(consistency);
			return this;
		}
		

		///<summary>A comma-separated list of fields to return in the response</summary>
		public UpdateDescriptor<T,K> Fields(params string[] fields)
		{
			this._QueryString.Fields(fields);
			return this;
		}
		
			
		///<summary>A comma-separated list of fields to return in the response</summary>
		public UpdateDescriptor<T,K> Fields(params Expression<Func<T, object>>[] typedPathLookups) 
		{
			if (!typedPathLookups.HasAny())
				return this;

			this._QueryString._Fields(typedPathLookups);
			return this;
		}
			

		///<summary>The script language (default: mvel)</summary>
		public UpdateDescriptor<T,K> Lang(string lang)
		{
			this._QueryString.Lang(lang);
			return this;
		}
		

		///<summary>ID of the parent document</summary>
		public UpdateDescriptor<T,K> Parent(string parent)
		{
			this._QueryString.Parent(parent);
			return this;
		}
		

		///<summary>Perform percolation during the operation; use specific registered query name, attribute, or wildcard</summary>
		public UpdateDescriptor<T,K> Percolate(string percolate)
		{
			this._QueryString.Percolate(percolate);
			return this;
		}
		

		///<summary>Refresh the index after performing the operation</summary>
		public UpdateDescriptor<T,K> Refresh(bool refresh = true)
		{
			this._QueryString.Refresh(refresh);
			return this;
		}
		

		///<summary>Specific replication type</summary>
		public UpdateDescriptor<T,K> Replication(ReplicationOptions replication)
		{
			this._QueryString.Replication(replication);
			return this;
		}
		

		///<summary>Specify how many times should the operation be retried when a conflict occurs (default: 0)</summary>
		public UpdateDescriptor<T,K> RetryOnConflict(int retry_on_conflict)
		{
			this._QueryString.RetryOnConflict(retry_on_conflict);
			return this;
		}
		

		///<summary>Specific routing value</summary>
		public UpdateDescriptor<T,K> Routing(string routing)
		{
			this._QueryString.Routing(routing);
			return this;
		}
		

		///<summary>The URL-encoded script definition (instead of using request body)</summary>
		public UpdateDescriptor<T,K> ScriptQueryString(string script)
		{
			this._QueryString.Script(script);
			return this;
		}
		

		///<summary>Explicit operation timeout</summary>
		public UpdateDescriptor<T,K> Timeout(string timeout)
		{
			this._QueryString.Timeout(timeout);
			return this;
		}
		

		///<summary>Explicit timestamp for the document</summary>
		public UpdateDescriptor<T,K> Timestamp(string timestamp)
		{
			this._QueryString.Timestamp(timestamp);
			return this;
		}
		

		///<summary>Expiration time for the document</summary>
		public UpdateDescriptor<T,K> Ttl(string ttl)
		{
			this._QueryString.Ttl(ttl);
			return this;
		}
		

		///<summary>Explicit version number for concurrency control</summary>
		public UpdateDescriptor<T,K> Version(int version)
		{
			this._QueryString.Version(version);
			return this;
		}
		

		///<summary>Specific version type</summary>
		public UpdateDescriptor<T,K> VersionType(VersionTypeOptions version_type)
		{
			this._QueryString.VersionType(version_type);
			return this;
		}
		
		
	}
	
}
 