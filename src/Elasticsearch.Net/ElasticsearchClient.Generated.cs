using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Elasticsearch.Net.Connection.Configuration;

///Generated File Please Do Not Edit Manually
	
namespace Elasticsearch.Net
{
	///<summary>
	///Raw operations with elasticsearch
	///</summary>
	public partial class ElasticsearchClient : IElasticsearchClient
	{
	
		///<summary>Represents a POST on /_bench/abort/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="name">A benchmark name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> AbortBenchmark<T>(string name, Func<AbortBenchmarkRequestParameters, AbortBenchmarkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AbortBenchmarkRequestParameters>("POST", Url($"_bench/abort/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a POST on /_bench/abort/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="name">A benchmark name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> AbortBenchmarkAsync<T>(string name, Func<AbortBenchmarkRequestParameters, AbortBenchmarkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AbortBenchmarkRequestParameters>("POST", Url($"_bench/abort/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a POST on /_bench/abort/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="name">A benchmark name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> AbortBenchmark(string name, Func<AbortBenchmarkRequestParameters, AbortBenchmarkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AbortBenchmarkRequestParameters>("POST", Url($"_bench/abort/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a POST on /_bench/abort/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="name">A benchmark name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> AbortBenchmarkAsync(string name, Func<AbortBenchmarkRequestParameters, AbortBenchmarkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AbortBenchmarkRequestParameters>("POST", Url($"_bench/abort/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a POST on /_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Bulk<T>(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("POST", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkAsync<T>(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("POST", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Bulk(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("POST", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkAsync(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("POST", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Bulk<T>(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkAsync<T>(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Bulk(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkAsync(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Bulk<T>(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkAsync<T>(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Bulk(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkAsync(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> BulkPut<T>(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("PUT", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkPutAsync<T>(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("PUT", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> BulkPut(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("PUT", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkPutAsync(object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("PUT", Url($"_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> BulkPut<T>(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkPutAsync<T>(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> BulkPut(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkPutAsync(string index, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> BulkPut<T>(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<T,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> BulkPutAsync<T>(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> BulkPut(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html</para>	
	    ///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> BulkPutAsync(string index, string type, object body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,BulkRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bulk"), requestParameters, body);
		
		///<summary>Represents a GET on /_cat/aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatAliases<T>(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatAliasesRequestParameters>("GET", Url($"_cat/aliases"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatAliasesAsync<T>(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatAliasesRequestParameters>("GET", Url($"_cat/aliases"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatAliases(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatAliasesRequestParameters>("GET", Url($"_cat/aliases"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatAliasesAsync(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatAliasesRequestParameters>("GET", Url($"_cat/aliases"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatAliases<T>(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatAliasesRequestParameters>("GET", Url($"_cat/aliases/{name.NotNull("name")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatAliasesAsync<T>(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatAliasesRequestParameters>("GET", Url($"_cat/aliases/{name.NotNull("name")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatAliases(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatAliasesRequestParameters>("GET", Url($"_cat/aliases/{name.NotNull("name")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-alias.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatAliasesAsync(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatAliasesRequestParameters>("GET", Url($"_cat/aliases/{name.NotNull("name")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatAllocation<T>(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatAllocationRequestParameters>("GET", Url($"_cat/allocation"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatAllocationAsync<T>(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatAllocationRequestParameters>("GET", Url($"_cat/allocation"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatAllocation(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatAllocationRequestParameters>("GET", Url($"_cat/allocation"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatAllocationAsync(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatAllocationRequestParameters>("GET", Url($"_cat/allocation"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatAllocation<T>(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatAllocationRequestParameters>("GET", Url($"_cat/allocation/{node_id.NotNull("node_id")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatAllocationAsync<T>(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatAllocationRequestParameters>("GET", Url($"_cat/allocation/{node_id.NotNull("node_id")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatAllocation(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatAllocationRequestParameters>("GET", Url($"_cat/allocation/{node_id.NotNull("node_id")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/allocation/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatAllocationAsync(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatAllocationRequestParameters>("GET", Url($"_cat/allocation/{node_id.NotNull("node_id")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatCount<T>(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatCountRequestParameters>("GET", Url($"_cat/count"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatCountAsync<T>(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatCountRequestParameters>("GET", Url($"_cat/count"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatCount(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatCountRequestParameters>("GET", Url($"_cat/count"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatCountAsync(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatCountRequestParameters>("GET", Url($"_cat/count"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatCount<T>(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatCountRequestParameters>("GET", Url($"_cat/count/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatCountAsync<T>(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatCountRequestParameters>("GET", Url($"_cat/count/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatCount(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatCountRequestParameters>("GET", Url($"_cat/count/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/count/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatCountAsync(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatCountRequestParameters>("GET", Url($"_cat/count/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/fielddata 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatFielddata<T>(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatFielddataRequestParameters>("GET", Url($"_cat/fielddata"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/fielddata 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatFielddataAsync<T>(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatFielddataRequestParameters>("GET", Url($"_cat/fielddata"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/fielddata 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatFielddata(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatFielddataRequestParameters>("GET", Url($"_cat/fielddata"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/fielddata 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatFielddataAsync(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatFielddataRequestParameters>("GET", Url($"_cat/fielddata"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/health 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatHealth<T>(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatHealthRequestParameters>("GET", Url($"_cat/health"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/health 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatHealthAsync<T>(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatHealthRequestParameters>("GET", Url($"_cat/health"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/health 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatHealth(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatHealthRequestParameters>("GET", Url($"_cat/health"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/health 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatHealthAsync(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatHealthRequestParameters>("GET", Url($"_cat/health"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatHelp<T>(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatHelpRequestParameters>("GET", Url($"_cat"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatHelpAsync<T>(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatHelpRequestParameters>("GET", Url($"_cat"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatHelp(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatHelpRequestParameters>("GET", Url($"_cat"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatHelpAsync(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatHelpRequestParameters>("GET", Url($"_cat"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatIndices<T>(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatIndicesRequestParameters>("GET", Url($"_cat/indices"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatIndicesAsync<T>(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatIndicesRequestParameters>("GET", Url($"_cat/indices"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatIndices(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatIndicesRequestParameters>("GET", Url($"_cat/indices"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatIndicesAsync(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatIndicesRequestParameters>("GET", Url($"_cat/indices"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatIndices<T>(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatIndicesRequestParameters>("GET", Url($"_cat/indices/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatIndicesAsync<T>(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatIndicesRequestParameters>("GET", Url($"_cat/indices/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatIndices(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatIndicesRequestParameters>("GET", Url($"_cat/indices/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/indices/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatIndicesAsync(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatIndicesRequestParameters>("GET", Url($"_cat/indices/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/master 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatMaster<T>(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatMasterRequestParameters>("GET", Url($"_cat/master"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/master 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatMasterAsync<T>(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatMasterRequestParameters>("GET", Url($"_cat/master"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/master 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatMaster(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatMasterRequestParameters>("GET", Url($"_cat/master"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/master 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatMasterAsync(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatMasterRequestParameters>("GET", Url($"_cat/master"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/nodes 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatNodes<T>(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatNodesRequestParameters>("GET", Url($"_cat/nodes"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/nodes 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatNodesAsync<T>(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatNodesRequestParameters>("GET", Url($"_cat/nodes"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/nodes 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatNodes(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatNodesRequestParameters>("GET", Url($"_cat/nodes"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/nodes 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatNodesAsync(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatNodesRequestParameters>("GET", Url($"_cat/nodes"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/pending_tasks 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatPendingTasks<T>(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatPendingTasksRequestParameters>("GET", Url($"_cat/pending_tasks"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/pending_tasks 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatPendingTasksAsync<T>(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatPendingTasksRequestParameters>("GET", Url($"_cat/pending_tasks"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/pending_tasks 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatPendingTasks(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatPendingTasksRequestParameters>("GET", Url($"_cat/pending_tasks"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/pending_tasks 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatPendingTasksAsync(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatPendingTasksRequestParameters>("GET", Url($"_cat/pending_tasks"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/plugins 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatPlugins<T>(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatPluginsRequestParameters>("GET", Url($"_cat/plugins"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/plugins 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatPluginsAsync<T>(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatPluginsRequestParameters>("GET", Url($"_cat/plugins"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/plugins 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatPlugins(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatPluginsRequestParameters>("GET", Url($"_cat/plugins"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/plugins 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatPluginsAsync(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatPluginsRequestParameters>("GET", Url($"_cat/plugins"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatRecovery<T>(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatRecoveryAsync<T>(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatRecovery(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatRecoveryAsync(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatRecovery<T>(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatRecoveryAsync<T>(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatRecovery(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/recovery/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatRecoveryAsync(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatRecoveryRequestParameters>("GET", Url($"_cat/recovery/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatSegments<T>(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatSegmentsRequestParameters>("GET", Url($"_cat/segments"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatSegmentsAsync<T>(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatSegmentsRequestParameters>("GET", Url($"_cat/segments"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatSegments(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatSegmentsRequestParameters>("GET", Url($"_cat/segments"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatSegmentsAsync(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatSegmentsRequestParameters>("GET", Url($"_cat/segments"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatSegments<T>(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatSegmentsRequestParameters>("GET", Url($"_cat/segments/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatSegmentsAsync<T>(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatSegmentsRequestParameters>("GET", Url($"_cat/segments/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatSegments(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatSegmentsRequestParameters>("GET", Url($"_cat/segments/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/segments/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatSegmentsAsync(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatSegmentsRequestParameters>("GET", Url($"_cat/segments/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatShards<T>(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatShardsRequestParameters>("GET", Url($"_cat/shards"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatShardsAsync<T>(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatShardsRequestParameters>("GET", Url($"_cat/shards"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatShards(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatShardsRequestParameters>("GET", Url($"_cat/shards"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatShardsAsync(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatShardsRequestParameters>("GET", Url($"_cat/shards"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatShards<T>(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatShardsRequestParameters>("GET", Url($"_cat/shards/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatShardsAsync<T>(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatShardsRequestParameters>("GET", Url($"_cat/shards/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatShards(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatShardsRequestParameters>("GET", Url($"_cat/shards/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/shards/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatShardsAsync(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatShardsRequestParameters>("GET", Url($"_cat/shards/{index.NotNull("index")}"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/thread_pool 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CatThreadPool<T>(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CatThreadPoolRequestParameters>("GET", Url($"_cat/thread_pool"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/thread_pool 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CatThreadPoolAsync<T>(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CatThreadPoolRequestParameters>("GET", Url($"_cat/thread_pool"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/thread_pool 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<string> CatThreadPool(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) =>
			this.DoRequest<string,CatThreadPoolRequestParameters>("GET", Url($"_cat/thread_pool"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a GET on /_cat/thread_pool 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<string>> CatThreadPoolAsync(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<string,CatThreadPoolRequestParameters>("GET", Url($"_cat/thread_pool"), requestParameters, contentType: "text/plain");
		
		///<summary>Represents a DELETE on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClearScroll<T>(string scroll_id, object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClearScrollAsync<T>(string scroll_id, object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClearScroll(string scroll_id, object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">A comma-separated list of scroll IDs to clear</param>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClearScrollAsync(string scroll_id, object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClearScroll<T>(object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClearScrollAsync<T>(object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClearScroll(object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClearScrollAsync(object body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearScrollRequestParameters>("DELETE", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a GET on /_cluster/settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterGetSettings<T>(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterGetSettingsRequestParameters>("GET", Url($"_cluster/settings"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterGetSettingsAsync<T>(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterGetSettingsRequestParameters>("GET", Url($"_cluster/settings"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterGetSettings(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterGetSettingsRequestParameters>("GET", Url($"_cluster/settings"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterGetSettingsAsync(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterGetSettingsRequestParameters>("GET", Url($"_cluster/settings"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterHealth<T>(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterHealthRequestParameters>("GET", Url($"_cluster/health"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterHealthAsync<T>(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterHealthRequestParameters>("GET", Url($"_cluster/health"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterHealth(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterHealthRequestParameters>("GET", Url($"_cluster/health"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterHealthAsync(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterHealthRequestParameters>("GET", Url($"_cluster/health"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterHealth<T>(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterHealthRequestParameters>("GET", Url($"_cluster/health/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterHealthAsync<T>(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterHealthRequestParameters>("GET", Url($"_cluster/health/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterHealth(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterHealthRequestParameters>("GET", Url($"_cluster/health/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/health/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html</para>	
	    ///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterHealthAsync(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterHealthRequestParameters>("GET", Url($"_cluster/health/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/pending_tasks 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterPendingTasks<T>(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterPendingTasksRequestParameters>("GET", Url($"_cluster/pending_tasks"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/pending_tasks 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterPendingTasksAsync<T>(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterPendingTasksRequestParameters>("GET", Url($"_cluster/pending_tasks"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/pending_tasks 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterPendingTasks(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterPendingTasksRequestParameters>("GET", Url($"_cluster/pending_tasks"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/pending_tasks 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterPendingTasksAsync(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterPendingTasksRequestParameters>("GET", Url($"_cluster/pending_tasks"), requestParameters);
		
		///<summary>Represents a PUT on /_cluster/settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterPutSettings<T>(object body, Func<ClusterSettingsRequestParameters, ClusterSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterSettingsRequestParameters>("PUT", Url($"_cluster/settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_cluster/settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterPutSettingsAsync<T>(object body, Func<ClusterSettingsRequestParameters, ClusterSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterSettingsRequestParameters>("PUT", Url($"_cluster/settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_cluster/settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterPutSettings(object body, Func<ClusterSettingsRequestParameters, ClusterSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterSettingsRequestParameters>("PUT", Url($"_cluster/settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_cluster/settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterPutSettingsAsync(object body, Func<ClusterSettingsRequestParameters, ClusterSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterSettingsRequestParameters>("PUT", Url($"_cluster/settings"), requestParameters, body);
		
		///<summary>Represents a POST on /_cluster/reroute 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html</para>	
	    ///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterReroute<T>(object body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterRerouteRequestParameters>("POST", Url($"_cluster/reroute"), requestParameters, body);
		
		///<summary>Represents a POST on /_cluster/reroute 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html</para>	
	    ///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterRerouteAsync<T>(object body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterRerouteRequestParameters>("POST", Url($"_cluster/reroute"), requestParameters, body);
		
		///<summary>Represents a POST on /_cluster/reroute 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html</para>	
	    ///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterReroute(object body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterRerouteRequestParameters>("POST", Url($"_cluster/reroute"), requestParameters, body);
		
		///<summary>Represents a POST on /_cluster/reroute 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html</para>	
	    ///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterRerouteAsync(object body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterRerouteRequestParameters>("POST", Url($"_cluster/reroute"), requestParameters, body);
		
		///<summary>Represents a GET on /_cluster/state 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterState<T>(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterState(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterStateAsync(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterState<T>(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterState(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterStateAsync(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterState<T>(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterState(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterStateAsync(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterStateRequestParameters>("GET", Url($"_cluster/state/{metric.NotNull("metric")}/{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterStats<T>(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterStatsAsync<T>(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterStats(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterStatsAsync(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ClusterStats<T>(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats/nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ClusterStatsAsync<T>(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats/nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ClusterStats(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats/nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ClusterStatsAsync(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClusterStatsRequestParameters>("GET", Url($"_cluster/stats/nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a POST on /_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Count<T>(object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("POST", Url($"_count"), requestParameters, body);
		
		///<summary>Represents a POST on /_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountAsync<T>(object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("POST", Url($"_count"), requestParameters, body);
		
		///<summary>Represents a POST on /_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Count(object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("POST", Url($"_count"), requestParameters, body);
		
		///<summary>Represents a POST on /_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountAsync(object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("POST", Url($"_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Count<T>(string index, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountAsync<T>(string index, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Count(string index, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountAsync(string index, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Count<T>(string index, string type, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountAsync<T>(string index, string type, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Count(string index, string type, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountAsync(string index, string type, object body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters, body);
		
		///<summary>Represents a GET on /_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountGet<T>(Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("GET", Url($"_count"), requestParameters);
		
		///<summary>Represents a GET on /_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountGetAsync<T>(Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("GET", Url($"_count"), requestParameters);
		
		///<summary>Represents a GET on /_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountGet(Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("GET", Url($"_count"), requestParameters);
		
		///<summary>Represents a GET on /_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountGetAsync(Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("GET", Url($"_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountGet<T>(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountGetAsync<T>(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountGet(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountGetAsync(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountGet<T>(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountGetAsync<T>(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountGet(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountGetAsync(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountPercolateGet<T>(string index, string type, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountPercolateGetAsync<T>(string index, string type, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountPercolateGet(string index, string type, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountPercolateGetAsync(string index, string type, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountPercolateGet<T>(string index, string type, string id, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountPercolateGetAsync<T>(string index, string type, string id, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountPercolateGet(string index, string type, string id, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountPercolateGetAsync(string index, string type, string id, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateCountRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountPercolate<T>(string index, string type, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountPercolateAsync<T>(string index, string type, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountPercolate(string index, string type, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountPercolateAsync(string index, string type, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> CountPercolate<T>(string index, string type, string id, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> CountPercolateAsync<T>(string index, string type, string id, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> CountPercolate(string index, string type, string id, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate/count 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated.</param>
		///<param name="type">The type of the document being count percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The count percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> CountPercolateAsync(string index, string type, string id, object body, Func<PercolateCountRequestParameters, PercolateCountRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateCountRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate/count"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Delete<T>(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a DELETE on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> DeleteAsync<T>(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a DELETE on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Delete(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a DELETE on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> DeleteAsync(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a DELETE on /{index}/_query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> DeleteByQuery<T>(string index, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/_query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> DeleteByQueryAsync<T>(string index, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/_query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> DeleteByQuery(string index, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/_query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> DeleteByQueryAsync(string index, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/{type}/_query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> DeleteByQuery<T>(string index, string type, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/{type}/_query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> DeleteByQueryAsync<T>(string index, string type, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/{type}/_query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> DeleteByQuery(string index, string type, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index}/{type}/_query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of types to restrict the operation</param>
		///<param name="body">A query to restrict the operation specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> DeleteByQueryAsync(string index, string type, object body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteByQueryRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_query"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> DeleteScript<T>(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteScriptRequestParameters>("DELETE", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> DeleteScriptAsync<T>(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteScriptRequestParameters>("DELETE", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> DeleteScript(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteScriptRequestParameters>("DELETE", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> DeleteScriptAsync(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteScriptRequestParameters>("DELETE", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> DeleteTemplate<T>(string id, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteTemplateRequestParameters>("DELETE", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> DeleteTemplateAsync<T>(string id, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteTemplateRequestParameters>("DELETE", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> DeleteTemplate(string id, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteTemplateRequestParameters>("DELETE", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> DeleteTemplateAsync(string id, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteTemplateRequestParameters>("DELETE", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a HEAD on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Exists<T>(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DocumentExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ExistsAsync<T>(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DocumentExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Exists(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DocumentExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ExistsAsync(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DocumentExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ExplainGet<T>(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ExplainRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ExplainGetAsync<T>(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ExplainRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ExplainGet(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ExplainRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ExplainGetAsync(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ExplainRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Explain<T>(string index, string type, string id, object body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ExplainRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ExplainAsync<T>(string index, string type, string id, object body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ExplainRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Explain(string index, string type, string id, object body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ExplainRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ExplainAsync(string index, string type, string id, object body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ExplainRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_explain"), requestParameters, body);
		
		///<summary>Represents a GET on /_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> FieldStatsGet<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FieldStatsRequestParameters>("GET", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> FieldStatsGetAsync<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FieldStatsRequestParameters>("GET", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> FieldStatsGet(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FieldStatsRequestParameters>("GET", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> FieldStatsGetAsync(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FieldStatsRequestParameters>("GET", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> FieldStatsGet<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FieldStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> FieldStatsGetAsync<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FieldStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> FieldStatsGet(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FieldStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> FieldStatsGetAsync(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FieldStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> FieldStats<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FieldStatsRequestParameters>("POST", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> FieldStatsAsync<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FieldStatsRequestParameters>("POST", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> FieldStats(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FieldStatsRequestParameters>("POST", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> FieldStatsAsync(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FieldStatsRequestParameters>("POST", Url($"_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> FieldStats<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FieldStatsRequestParameters>("POST", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> FieldStatsAsync<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FieldStatsRequestParameters>("POST", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_field_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> FieldStats(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FieldStatsRequestParameters>("POST", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_field_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> FieldStatsAsync(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FieldStatsRequestParameters>("POST", Url($"{index.NotNull("index")}/_field_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Get<T>(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> GetAsync<T>(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Get(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> GetAsync(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> GetScript<T>(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetScriptRequestParameters>("GET", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> GetScriptAsync<T>(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetScriptRequestParameters>("GET", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> GetScript(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetScriptRequestParameters>("GET", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> GetScriptAsync(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetScriptRequestParameters>("GET", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> GetSource<T>(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SourceRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_source"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> GetSourceAsync<T>(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SourceRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_source"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> GetSource(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SourceRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_source"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> GetSourceAsync(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SourceRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_source"), requestParameters);
		
		///<summary>Represents a GET on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> GetTemplate<T>(string id, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetTemplateRequestParameters>("GET", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> GetTemplateAsync<T>(string id, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetTemplateRequestParameters>("GET", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> GetTemplate(string id, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> GetTemplateAsync(string id, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_search/template/{id.NotNull("id")}"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Index<T>(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndexAsync<T>(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Index(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndexAsync(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Index<T>(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndexAsync<T>(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Index(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndexAsync(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndexRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndexPut<T>(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndexPutAsync<T>(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndexPut(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndexPutAsync(string index, string type, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndexPut<T>(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndexPutAsync<T>(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndexPut(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndexPutAsync(string index, string type, string id, object body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndexRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a GET on /_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesAnalyzeGetForAll<T>(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AnalyzeRequestParameters>("GET", Url($"_analyze"), requestParameters);
		
		///<summary>Represents a GET on /_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesAnalyzeGetForAllAsync<T>(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AnalyzeRequestParameters>("GET", Url($"_analyze"), requestParameters);
		
		///<summary>Represents a GET on /_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesAnalyzeGetForAll(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AnalyzeRequestParameters>("GET", Url($"_analyze"), requestParameters);
		
		///<summary>Represents a GET on /_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesAnalyzeGetForAllAsync(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AnalyzeRequestParameters>("GET", Url($"_analyze"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesAnalyzeGet<T>(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AnalyzeRequestParameters>("GET", Url($"{index.NotNull("index")}/_analyze"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesAnalyzeGetAsync<T>(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AnalyzeRequestParameters>("GET", Url($"{index.NotNull("index")}/_analyze"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesAnalyzeGet(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AnalyzeRequestParameters>("GET", Url($"{index.NotNull("index")}/_analyze"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesAnalyzeGetAsync(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AnalyzeRequestParameters>("GET", Url($"{index.NotNull("index")}/_analyze"), requestParameters);
		
		///<summary>Represents a POST on /_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesAnalyzeForAll<T>(object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AnalyzeRequestParameters>("POST", Url($"_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesAnalyzeForAllAsync<T>(object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AnalyzeRequestParameters>("POST", Url($"_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesAnalyzeForAll(object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AnalyzeRequestParameters>("POST", Url($"_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesAnalyzeForAllAsync(object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AnalyzeRequestParameters>("POST", Url($"_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesAnalyze<T>(string index, object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AnalyzeRequestParameters>("POST", Url($"{index.NotNull("index")}/_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesAnalyzeAsync<T>(string index, object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AnalyzeRequestParameters>("POST", Url($"{index.NotNull("index")}/_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_analyze 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesAnalyze(string index, object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AnalyzeRequestParameters>("POST", Url($"{index.NotNull("index")}/_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_analyze 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html</para>	
	    ///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">The text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesAnalyzeAsync(string index, object body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AnalyzeRequestParameters>("POST", Url($"{index.NotNull("index")}/_analyze"), requestParameters, body);
		
		///<summary>Represents a POST on /_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesClearCacheForAll<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearCacheRequestParameters>("POST", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesClearCacheForAllAsync<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearCacheRequestParameters>("POST", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesClearCacheForAll(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearCacheRequestParameters>("POST", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesClearCacheForAllAsync(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearCacheRequestParameters>("POST", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesClearCache<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearCacheRequestParameters>("POST", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesClearCacheAsync<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearCacheRequestParameters>("POST", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesClearCache(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearCacheRequestParameters>("POST", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesClearCacheAsync(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearCacheRequestParameters>("POST", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesClearCacheGetForAll<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearCacheRequestParameters>("GET", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesClearCacheGetForAllAsync<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearCacheRequestParameters>("GET", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesClearCacheGetForAll(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearCacheRequestParameters>("GET", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesClearCacheGetForAllAsync(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearCacheRequestParameters>("GET", Url($"_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesClearCacheGet<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ClearCacheRequestParameters>("GET", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesClearCacheGetAsync<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ClearCacheRequestParameters>("GET", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_cache/clear 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesClearCacheGet(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ClearCacheRequestParameters>("GET", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_cache/clear 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesClearCacheGetAsync(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ClearCacheRequestParameters>("GET", Url($"{index.NotNull("index")}/_cache/clear"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_close 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesClose<T>(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CloseIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_close"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_close 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesCloseAsync<T>(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CloseIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_close"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_close 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesClose(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CloseIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_close"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_close 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesCloseAsync(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CloseIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_close"), requestParameters);
		
		///<summary>Represents a PUT on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesCreate<T>(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CreateIndexRequestParameters>("PUT", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesCreateAsync<T>(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CreateIndexRequestParameters>("PUT", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesCreate(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CreateIndexRequestParameters>("PUT", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesCreateAsync(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CreateIndexRequestParameters>("PUT", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesCreatePost<T>(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CreateIndexRequestParameters>("POST", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesCreatePostAsync<T>(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CreateIndexRequestParameters>("POST", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesCreatePost(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CreateIndexRequestParameters>("POST", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesCreatePostAsync(string index, object body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CreateIndexRequestParameters>("POST", Url($"{index.NotNull("index")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesDelete<T>(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteIndexRequestParameters>("DELETE", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesDeleteAsync<T>(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteIndexRequestParameters>("DELETE", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesDelete(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteIndexRequestParameters>("DELETE", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesDeleteAsync(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteIndexRequestParameters>("DELETE", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesDeleteAlias<T>(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteAliasRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesDeleteAliasAsync<T>(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteAliasRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesDeleteAlias(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteAliasRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesDeleteAliasAsync(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteAliasRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesDeleteMapping<T>(string index, string type, Func<DeleteMappingRequestParameters, DeleteMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteMappingRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesDeleteMappingAsync<T>(string index, string type, Func<DeleteMappingRequestParameters, DeleteMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteMappingRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesDeleteMapping(string index, string type, Func<DeleteMappingRequestParameters, DeleteMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteMappingRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="type">A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesDeleteMappingAsync(string index, string type, Func<DeleteMappingRequestParameters, DeleteMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteMappingRequestParameters>("DELETE", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters);
		
		///<summary>Represents a DELETE on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesDeleteTemplateForAll<T>(string name, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteTemplateRequestParameters>("DELETE", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesDeleteTemplateForAllAsync<T>(string name, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteTemplateRequestParameters>("DELETE", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesDeleteTemplateForAll(string name, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteTemplateRequestParameters>("DELETE", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesDeleteTemplateForAllAsync(string name, Func<DeleteTemplateRequestParameters, DeleteTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteTemplateRequestParameters>("DELETE", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesDeleteWarmer<T>(string index, string name, Func<DeleteWarmerRequestParameters, DeleteWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteWarmerRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesDeleteWarmerAsync<T>(string index, string name, Func<DeleteWarmerRequestParameters, DeleteWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteWarmerRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesDeleteWarmer(string index, string name, Func<DeleteWarmerRequestParameters, DeleteWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteWarmerRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a DELETE on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesDeleteWarmerAsync(string index, string name, Func<DeleteWarmerRequestParameters, DeleteWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteWarmerRequestParameters>("DELETE", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a HEAD on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExists<T>(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndexExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsAsync<T>(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndexExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExists(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndexExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsAsync(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndexExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExistsAliasForAll<T>(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AliasExistsRequestParameters>("HEAD", Url($"_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsAliasForAllAsync<T>(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AliasExistsRequestParameters>("HEAD", Url($"_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExistsAliasForAll(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsAliasForAllAsync(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExistsAlias<T>(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsAliasAsync<T>(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExistsAlias(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsAliasAsync(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExistsAlias<T>(string index, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsAliasAsync<T>(string index, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExistsAlias(string index, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsAliasAsync(string index, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AliasExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/_alias"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExistsTemplateForAll<T>(string name, Func<TemplateExistsRequestParameters, TemplateExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TemplateExistsRequestParameters>("HEAD", Url($"_template/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsTemplateForAllAsync<T>(string name, Func<TemplateExistsRequestParameters, TemplateExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TemplateExistsRequestParameters>("HEAD", Url($"_template/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExistsTemplateForAll(string name, Func<TemplateExistsRequestParameters, TemplateExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TemplateExistsRequestParameters>("HEAD", Url($"_template/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsTemplateForAllAsync(string name, Func<TemplateExistsRequestParameters, TemplateExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TemplateExistsRequestParameters>("HEAD", Url($"_template/{name.NotNull("name")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesExistsType<T>(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TypeExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesExistsTypeAsync<T>(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TypeExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesExistsType(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TypeExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, allow404: true);
		
		///<summary>Represents a HEAD on /{index}/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesExistsTypeAsync(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TypeExistsRequestParameters>("HEAD", Url($"{index.NotNull("index")}/{type.NotNull("type")}"), requestParameters, allow404: true);
		
		///<summary>Represents a POST on /_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushForAll<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FlushRequestParameters>("POST", Url($"_flush"), requestParameters);
		
		///<summary>Represents a POST on /_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushForAllAsync<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FlushRequestParameters>("POST", Url($"_flush"), requestParameters);
		
		///<summary>Represents a POST on /_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushForAll(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FlushRequestParameters>("POST", Url($"_flush"), requestParameters);
		
		///<summary>Represents a POST on /_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushForAllAsync(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FlushRequestParameters>("POST", Url($"_flush"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlush<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushAsync<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlush(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushAsync(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a GET on /_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushGetForAll<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FlushRequestParameters>("GET", Url($"_flush"), requestParameters);
		
		///<summary>Represents a GET on /_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushGetForAllAsync<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FlushRequestParameters>("GET", Url($"_flush"), requestParameters);
		
		///<summary>Represents a GET on /_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushGetForAll(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FlushRequestParameters>("GET", Url($"_flush"), requestParameters);
		
		///<summary>Represents a GET on /_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushGetForAllAsync(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FlushRequestParameters>("GET", Url($"_flush"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushGet<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,FlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushGetAsync<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,FlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushGet(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,FlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushGetAsync(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,FlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush"), requestParameters);
		
		///<summary>Represents a POST on /_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushSyncedForAll<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SyncedFlushRequestParameters>("POST", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushSyncedForAllAsync<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SyncedFlushRequestParameters>("POST", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushSyncedForAll(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SyncedFlushRequestParameters>("POST", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushSyncedForAllAsync(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SyncedFlushRequestParameters>("POST", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushSynced<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SyncedFlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushSyncedAsync<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SyncedFlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushSynced(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SyncedFlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushSyncedAsync(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SyncedFlushRequestParameters>("POST", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushSyncedGetForAll<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SyncedFlushRequestParameters>("GET", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushSyncedGetForAllAsync<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SyncedFlushRequestParameters>("GET", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushSyncedGetForAll(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SyncedFlushRequestParameters>("GET", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushSyncedGetForAllAsync(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SyncedFlushRequestParameters>("GET", Url($"_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesFlushSyncedGet<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SyncedFlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesFlushSyncedGetAsync<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SyncedFlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush/synced 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesFlushSyncedGet(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SyncedFlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_flush/synced 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesFlushSyncedGetAsync(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SyncedFlushRequestParameters>("GET", Url($"{index.NotNull("index")}/_flush/synced"), requestParameters);
		
		///<summary>Represents a GET on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGet<T>(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAsync<T>(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /{index} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGet(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /{index} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAsync(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{feature} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGet<T>(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}/{feature.NotNull("feature")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{feature} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAsync<T>(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}/{feature.NotNull("feature")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{feature} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGet(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}/{feature.NotNull("feature")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{feature} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAsync(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexRequestParameters>("GET", Url($"{index.NotNull("index")}/{feature.NotNull("feature")}"), requestParameters);
		
		///<summary>Represents a GET on /_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliasForAll<T>(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasRequestParameters>("GET", Url($"_alias"), requestParameters);
		
		///<summary>Represents a GET on /_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasForAllAsync<T>(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasRequestParameters>("GET", Url($"_alias"), requestParameters);
		
		///<summary>Represents a GET on /_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliasForAll(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"_alias"), requestParameters);
		
		///<summary>Represents a GET on /_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasForAllAsync(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"_alias"), requestParameters);
		
		///<summary>Represents a GET on /_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliasForAll<T>(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasRequestParameters>("GET", Url($"_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasForAllAsync<T>(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasRequestParameters>("GET", Url($"_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliasForAll(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasForAllAsync(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAlias<T>(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasAsync<T>(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAlias(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasAsync(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAlias<T>(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasAsync<T>(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAlias(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_alias 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasAsync(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasRequestParameters>("GET", Url($"{index.NotNull("index")}/_alias"), requestParameters);
		
		///<summary>Represents a GET on /_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliasesForAll<T>(Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasesRequestParameters>("GET", Url($"_aliases"), requestParameters);
		
		///<summary>Represents a GET on /_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasesForAllAsync<T>(Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasesRequestParameters>("GET", Url($"_aliases"), requestParameters);
		
		///<summary>Represents a GET on /_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliasesForAll(Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"_aliases"), requestParameters);
		
		///<summary>Represents a GET on /_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasesForAllAsync(Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"_aliases"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliases<T>(string index, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasesAsync<T>(string index, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliases(string index, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasesAsync(string index, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliases<T>(string index, string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasesAsync<T>(string index, string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliases(string index, string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasesAsync(string index, string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"{index.NotNull("index")}/_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetAliasesForAll<T>(string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetAliasesRequestParameters>("GET", Url($"_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetAliasesForAllAsync<T>(string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetAliasesRequestParameters>("GET", Url($"_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_aliases/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetAliasesForAll(string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_aliases/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="name">A comma-separated list of alias names to filter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetAliasesForAllAsync(string name, Func<GetAliasesRequestParameters, GetAliasesRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetAliasesRequestParameters>("GET", Url($"_aliases/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetFieldMappingForAll<T>(string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetFieldMappingRequestParameters>("GET", Url($"_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetFieldMappingForAllAsync<T>(string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetFieldMappingRequestParameters>("GET", Url($"_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetFieldMappingForAll(string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetFieldMappingForAllAsync(string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetFieldMapping<T>(string index, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetFieldMappingAsync<T>(string index, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetFieldMapping(string index, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetFieldMappingAsync(string index, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type}/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetFieldMappingForAll<T>(string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetFieldMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type}/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetFieldMappingForAllAsync<T>(string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetFieldMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type}/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetFieldMappingForAll(string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type}/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetFieldMappingForAllAsync(string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetFieldMapping<T>(string index, string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetFieldMappingAsync<T>(string index, string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{field} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetFieldMapping(string index, string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{field} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="field">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetFieldMappingAsync(string index, string type, string field, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetFieldMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}/field/{field.NotNull("field")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetMappingForAll<T>(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetMappingRequestParameters>("GET", Url($"_mapping"), requestParameters);
		
		///<summary>Represents a GET on /_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetMappingForAllAsync<T>(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetMappingRequestParameters>("GET", Url($"_mapping"), requestParameters);
		
		///<summary>Represents a GET on /_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetMappingForAll(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"_mapping"), requestParameters);
		
		///<summary>Represents a GET on /_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetMappingForAllAsync(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"_mapping"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetMapping<T>(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetMappingAsync<T>(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetMapping(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetMappingAsync(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetMappingForAll<T>(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetMappingForAllAsync<T>(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetMappingForAll(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetMappingForAllAsync(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetMapping<T>(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetMappingAsync<T>(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetMapping(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetMappingAsync(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetMappingRequestParameters>("GET", Url($"{index.NotNull("index")}/_mapping/{type.NotNull("type")}"), requestParameters);
		
		///<summary>Represents a GET on /_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetSettingsForAll<T>(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexSettingsRequestParameters>("GET", Url($"_settings"), requestParameters);
		
		///<summary>Represents a GET on /_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetSettingsForAllAsync<T>(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexSettingsRequestParameters>("GET", Url($"_settings"), requestParameters);
		
		///<summary>Represents a GET on /_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetSettingsForAll(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"_settings"), requestParameters);
		
		///<summary>Represents a GET on /_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetSettingsForAllAsync(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"_settings"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetSettings<T>(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetSettingsAsync<T>(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetSettings(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetSettingsAsync(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetSettings<T>(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetSettingsAsync<T>(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetSettings(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_settings/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetSettingsAsync(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"{index.NotNull("index")}/_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_settings/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetSettingsForAll<T>(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetIndexSettingsRequestParameters>("GET", Url($"_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_settings/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetSettingsForAllAsync<T>(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetIndexSettingsRequestParameters>("GET", Url($"_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_settings/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetSettingsForAll(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_settings/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html</para>	
	    ///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetSettingsForAllAsync(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetIndexSettingsRequestParameters>("GET", Url($"_settings/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetTemplateForAll<T>(Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetTemplateRequestParameters>("GET", Url($"_template"), requestParameters);
		
		///<summary>Represents a GET on /_template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetTemplateForAllAsync<T>(Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetTemplateRequestParameters>("GET", Url($"_template"), requestParameters);
		
		///<summary>Represents a GET on /_template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetTemplateForAll(Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_template"), requestParameters);
		
		///<summary>Represents a GET on /_template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetTemplateForAllAsync(Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_template"), requestParameters);
		
		///<summary>Represents a GET on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetTemplateForAll<T>(string name, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetTemplateRequestParameters>("GET", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetTemplateForAllAsync<T>(string name, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetTemplateRequestParameters>("GET", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetTemplateForAll(string name, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetTemplateForAllAsync(string name, Func<GetTemplateRequestParameters, GetTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetTemplateRequestParameters>("GET", Url($"_template/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetUpgradeForAll<T>(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpgradeStatusRequestParameters>("GET", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetUpgradeForAllAsync<T>(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpgradeStatusRequestParameters>("GET", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetUpgradeForAll(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpgradeStatusRequestParameters>("GET", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetUpgradeForAllAsync(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpgradeStatusRequestParameters>("GET", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetUpgrade<T>(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpgradeStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetUpgradeAsync<T>(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpgradeStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetUpgrade(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpgradeStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetUpgradeAsync(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpgradeStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /_warmer 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetWarmerForAll<T>(Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetWarmerRequestParameters>("GET", Url($"_warmer"), requestParameters);
		
		///<summary>Represents a GET on /_warmer 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetWarmerForAllAsync<T>(Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetWarmerRequestParameters>("GET", Url($"_warmer"), requestParameters);
		
		///<summary>Represents a GET on /_warmer 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetWarmerForAll(Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"_warmer"), requestParameters);
		
		///<summary>Represents a GET on /_warmer 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetWarmerForAllAsync(Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"_warmer"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetWarmer<T>(string index, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetWarmerAsync<T>(string index, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetWarmer(string index, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetWarmerAsync(string index, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetWarmer<T>(string index, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetWarmerAsync<T>(string index, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetWarmer(string index, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetWarmerAsync(string index, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetWarmerForAll<T>(string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetWarmerRequestParameters>("GET", Url($"_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetWarmerForAllAsync<T>(string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetWarmerRequestParameters>("GET", Url($"_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetWarmerForAll(string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetWarmerForAllAsync(string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesGetWarmer<T>(string index, string type, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesGetWarmerAsync<T>(string index, string type, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesGetWarmer(string index, string type, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer (supports wildcards); leave empty to get all warmers</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesGetWarmerAsync(string index, string type, string name, Func<GetWarmerRequestParameters, GetWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetWarmerRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_open 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesOpen<T>(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<T,OpenIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_open"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_open 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesOpenAsync<T>(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,OpenIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_open"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_open 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesOpen(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,OpenIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_open"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_open 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesOpenAsync(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,OpenIndexRequestParameters>("POST", Url($"{index.NotNull("index")}/_open"), requestParameters);
		
		///<summary>Represents a POST on /_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesOptimizeForAll<T>(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,OptimizeRequestParameters>("POST", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a POST on /_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesOptimizeForAllAsync<T>(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,OptimizeRequestParameters>("POST", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a POST on /_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesOptimizeForAll(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,OptimizeRequestParameters>("POST", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a POST on /_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesOptimizeForAllAsync(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,OptimizeRequestParameters>("POST", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesOptimize<T>(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,OptimizeRequestParameters>("POST", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesOptimizeAsync<T>(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,OptimizeRequestParameters>("POST", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesOptimize(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,OptimizeRequestParameters>("POST", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesOptimizeAsync(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,OptimizeRequestParameters>("POST", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a GET on /_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesOptimizeGetForAll<T>(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,OptimizeRequestParameters>("GET", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a GET on /_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesOptimizeGetForAllAsync<T>(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,OptimizeRequestParameters>("GET", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a GET on /_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesOptimizeGetForAll(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,OptimizeRequestParameters>("GET", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a GET on /_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesOptimizeGetForAllAsync(Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,OptimizeRequestParameters>("GET", Url($"_optimize"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesOptimizeGet<T>(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,OptimizeRequestParameters>("GET", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesOptimizeGetAsync<T>(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,OptimizeRequestParameters>("GET", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_optimize 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesOptimizeGet(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,OptimizeRequestParameters>("GET", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_optimize 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesOptimizeGetAsync(string index, Func<OptimizeRequestParameters, OptimizeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,OptimizeRequestParameters>("GET", Url($"{index.NotNull("index")}/_optimize"), requestParameters);
		
		///<summary>Represents a PUT on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutAlias<T>(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutAliasRequestParameters>("PUT", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutAliasAsync<T>(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutAliasRequestParameters>("PUT", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutAlias(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutAliasRequestParameters>("PUT", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutAliasAsync(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutAliasRequestParameters>("PUT", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutAliasPost<T>(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutAliasRequestParameters>("POST", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutAliasPostAsync<T>(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutAliasRequestParameters>("POST", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_alias/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutAliasPost(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutAliasRequestParameters>("POST", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_alias/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutAliasPostAsync(string index, string name, object body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutAliasRequestParameters>("POST", Url($"{index.NotNull("index")}/_alias/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutMapping<T>(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutMappingRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutMappingAsync<T>(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutMappingRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutMapping(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutMappingRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutMappingAsync(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutMappingRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a PUT on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutMappingForAll<T>(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutMappingRequestParameters>("PUT", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutMappingForAllAsync<T>(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutMappingRequestParameters>("PUT", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutMappingForAll(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutMappingRequestParameters>("PUT", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutMappingForAllAsync(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutMappingRequestParameters>("PUT", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutMappingPost<T>(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutMappingRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutMappingPostAsync<T>(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutMappingRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mapping 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutMappingPost(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutMappingRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mapping 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutMappingPostAsync(string index, string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutMappingRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mapping"), requestParameters, body);
		
		///<summary>Represents a POST on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutMappingPostForAll<T>(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutMappingRequestParameters>("POST", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutMappingPostForAllAsync<T>(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutMappingRequestParameters>("POST", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_mapping/{type} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutMappingPostForAll(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutMappingRequestParameters>("POST", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_mapping/{type} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html</para>	
	    ///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutMappingPostForAllAsync(string type, object body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutMappingRequestParameters>("POST", Url($"_mapping/{type.NotNull("type")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutSettingsForAll<T>(object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpdateSettingsRequestParameters>("PUT", Url($"_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutSettingsForAllAsync<T>(object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpdateSettingsRequestParameters>("PUT", Url($"_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutSettingsForAll(object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpdateSettingsRequestParameters>("PUT", Url($"_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutSettingsForAllAsync(object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpdateSettingsRequestParameters>("PUT", Url($"_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutSettings<T>(string index, object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpdateSettingsRequestParameters>("PUT", Url($"{index.NotNull("index")}/_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutSettingsAsync<T>(string index, object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpdateSettingsRequestParameters>("PUT", Url($"{index.NotNull("index")}/_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_settings 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutSettings(string index, object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpdateSettingsRequestParameters>("PUT", Url($"{index.NotNull("index")}/_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_settings 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutSettingsAsync(string index, object body, Func<UpdateSettingsRequestParameters, UpdateSettingsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpdateSettingsRequestParameters>("PUT", Url($"{index.NotNull("index")}/_settings"), requestParameters, body);
		
		///<summary>Represents a PUT on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutTemplateForAll<T>(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutTemplateRequestParameters>("PUT", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutTemplateForAllAsync<T>(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutTemplateRequestParameters>("PUT", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutTemplateForAll(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutTemplateRequestParameters>("PUT", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutTemplateForAllAsync(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutTemplateRequestParameters>("PUT", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutTemplatePostForAll<T>(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutTemplateRequestParameters>("POST", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutTemplatePostForAllAsync<T>(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutTemplateRequestParameters>("POST", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_template/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutTemplatePostForAll(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutTemplateRequestParameters>("POST", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_template/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html</para>	
	    ///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutTemplatePostForAllAsync(string name, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutTemplateRequestParameters>("POST", Url($"_template/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmerForAll<T>(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("PUT", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerForAllAsync<T>(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("PUT", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmerForAll(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerForAllAsync(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmer<T>(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerAsync<T>(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmer(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerAsync(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmer<T>(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerAsync<T>(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmer(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerAsync(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("PUT", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmerPostForAll<T>(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("POST", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerPostForAllAsync<T>(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("POST", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmerPostForAll(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerPostForAllAsync(string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmerPost<T>(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerPostAsync<T>(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmerPost(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerPostAsync(string index, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesPutWarmerPost<T>(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesPutWarmerPostAsync<T>(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesPutWarmerPost(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_warmer/{name} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
		///<param name="name">The name of the warmer</param>
		///<param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesPutWarmerPostAsync(string index, string type, string name, object body, Func<PutWarmerRequestParameters, PutWarmerRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutWarmerRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_warmer/{name.NotNull("name")}"), requestParameters, body);
		
		///<summary>Represents a GET on /_recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRecoveryForAll<T>(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RecoveryStatusRequestParameters>("GET", Url($"_recovery"), requestParameters);
		
		///<summary>Represents a GET on /_recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRecoveryForAllAsync<T>(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RecoveryStatusRequestParameters>("GET", Url($"_recovery"), requestParameters);
		
		///<summary>Represents a GET on /_recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRecoveryForAll(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RecoveryStatusRequestParameters>("GET", Url($"_recovery"), requestParameters);
		
		///<summary>Represents a GET on /_recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRecoveryForAllAsync(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RecoveryStatusRequestParameters>("GET", Url($"_recovery"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRecovery<T>(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RecoveryStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_recovery"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRecoveryAsync<T>(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RecoveryStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_recovery"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_recovery 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRecovery(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RecoveryStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_recovery"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_recovery 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRecoveryAsync(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RecoveryStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_recovery"), requestParameters);
		
		///<summary>Represents a POST on /_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRefreshForAll<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RefreshRequestParameters>("POST", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a POST on /_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRefreshForAllAsync<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RefreshRequestParameters>("POST", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a POST on /_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRefreshForAll(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RefreshRequestParameters>("POST", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a POST on /_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRefreshForAllAsync(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RefreshRequestParameters>("POST", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRefresh<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RefreshRequestParameters>("POST", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRefreshAsync<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RefreshRequestParameters>("POST", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRefresh(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RefreshRequestParameters>("POST", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRefreshAsync(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RefreshRequestParameters>("POST", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a GET on /_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRefreshGetForAll<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RefreshRequestParameters>("GET", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a GET on /_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRefreshGetForAllAsync<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RefreshRequestParameters>("GET", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a GET on /_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRefreshGetForAll(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RefreshRequestParameters>("GET", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a GET on /_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRefreshGetForAllAsync(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RefreshRequestParameters>("GET", Url($"_refresh"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesRefreshGet<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RefreshRequestParameters>("GET", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesRefreshGetAsync<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RefreshRequestParameters>("GET", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_refresh 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesRefreshGet(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RefreshRequestParameters>("GET", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_refresh 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesRefreshGetAsync(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RefreshRequestParameters>("GET", Url($"{index.NotNull("index")}/_refresh"), requestParameters);
		
		///<summary>Represents a GET on /_segments 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesSegmentsForAll<T>(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SegmentsRequestParameters>("GET", Url($"_segments"), requestParameters);
		
		///<summary>Represents a GET on /_segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesSegmentsForAllAsync<T>(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SegmentsRequestParameters>("GET", Url($"_segments"), requestParameters);
		
		///<summary>Represents a GET on /_segments 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesSegmentsForAll(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SegmentsRequestParameters>("GET", Url($"_segments"), requestParameters);
		
		///<summary>Represents a GET on /_segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesSegmentsForAllAsync(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SegmentsRequestParameters>("GET", Url($"_segments"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_segments 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesSegments<T>(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SegmentsRequestParameters>("GET", Url($"{index.NotNull("index")}/_segments"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesSegmentsAsync<T>(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SegmentsRequestParameters>("GET", Url($"{index.NotNull("index")}/_segments"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_segments 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesSegments(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SegmentsRequestParameters>("GET", Url($"{index.NotNull("index")}/_segments"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_segments 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesSegmentsAsync(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SegmentsRequestParameters>("GET", Url($"{index.NotNull("index")}/_segments"), requestParameters);
		
		///<summary>Represents a GET on /_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStatsForAll<T>(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatsRequestParameters>("GET", Url($"_stats"), requestParameters);
		
		///<summary>Represents a GET on /_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatsForAllAsync<T>(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatsRequestParameters>("GET", Url($"_stats"), requestParameters);
		
		///<summary>Represents a GET on /_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStatsForAll(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"_stats"), requestParameters);
		
		///<summary>Represents a GET on /_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatsForAllAsync(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"_stats"), requestParameters);
		
		///<summary>Represents a GET on /_stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStatsForAll<T>(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatsRequestParameters>("GET", Url($"_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatsForAllAsync<T>(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatsRequestParameters>("GET", Url($"_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStatsForAll(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatsForAllAsync(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStats<T>(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatsAsync<T>(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStats(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatsAsync(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStats<T>(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatsAsync<T>(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStats(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatsAsync(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatsRequestParameters>("GET", Url($"{index.NotNull("index")}/_stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_status 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStatusForAll<T>(Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatusRequestParameters>("GET", Url($"_status"), requestParameters);
		
		///<summary>Represents a GET on /_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatusForAllAsync<T>(Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatusRequestParameters>("GET", Url($"_status"), requestParameters);
		
		///<summary>Represents a GET on /_status 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStatusForAll(Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatusRequestParameters>("GET", Url($"_status"), requestParameters);
		
		///<summary>Represents a GET on /_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatusForAllAsync(Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatusRequestParameters>("GET", Url($"_status"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesStatus<T>(string index, Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,IndicesStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesStatusAsync<T>(string index, Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,IndicesStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesStatus(string index, Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,IndicesStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesStatusAsync(string index, Func<IndicesStatusRequestParameters, IndicesStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,IndicesStatusRequestParameters>("GET", Url($"{index.NotNull("index")}/_status"), requestParameters);
		
		///<summary>Represents a POST on /_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesUpdateAliasesForAll<T>(object body, Func<AliasRequestParameters, AliasRequestParameters> requestParameters = null) =>
			this.DoRequest<T,AliasRequestParameters>("POST", Url($"_aliases"), requestParameters, body);
		
		///<summary>Represents a POST on /_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesUpdateAliasesForAllAsync<T>(object body, Func<AliasRequestParameters, AliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,AliasRequestParameters>("POST", Url($"_aliases"), requestParameters, body);
		
		///<summary>Represents a POST on /_aliases 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesUpdateAliasesForAll(object body, Func<AliasRequestParameters, AliasRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,AliasRequestParameters>("POST", Url($"_aliases"), requestParameters, body);
		
		///<summary>Represents a POST on /_aliases 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html</para>	
	    ///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesUpdateAliasesForAllAsync(object body, Func<AliasRequestParameters, AliasRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,AliasRequestParameters>("POST", Url($"_aliases"), requestParameters, body);
		
		///<summary>Represents a POST on /_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesUpgradeForAll<T>(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpgradeRequestParameters>("POST", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesUpgradeForAllAsync<T>(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpgradeRequestParameters>("POST", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesUpgradeForAll(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpgradeRequestParameters>("POST", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesUpgradeForAllAsync(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpgradeRequestParameters>("POST", Url($"_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesUpgrade<T>(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpgradeRequestParameters>("POST", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesUpgradeAsync<T>(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpgradeRequestParameters>("POST", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_upgrade 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesUpgrade(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpgradeRequestParameters>("POST", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_upgrade 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesUpgradeAsync(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpgradeRequestParameters>("POST", Url($"{index.NotNull("index")}/_upgrade"), requestParameters);
		
		///<summary>Represents a GET on /_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQueryGetForAll<T>(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("GET", Url($"_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryGetForAllAsync<T>(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("GET", Url($"_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQueryGetForAll(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryGetForAllAsync(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQueryGet<T>(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryGetAsync<T>(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQueryGet(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryGetAsync(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQueryGet<T>(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryGetAsync<T>(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQueryGet(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryGetAsync(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters);
		
		///<summary>Represents a POST on /_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQueryForAll<T>(object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("POST", Url($"_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryForAllAsync<T>(object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("POST", Url($"_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQueryForAll(object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryForAllAsync(object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQuery<T>(string index, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryAsync<T>(string index, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQuery(string index, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryAsync(string index, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> IndicesValidateQuery<T>(string index, string type, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> IndicesValidateQueryAsync<T>(string index, string type, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> IndicesValidateQuery(string index, string type, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> IndicesValidateQueryAsync(string index, string type, object body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ValidateQueryRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_validate/query"), requestParameters, body);
		
		///<summary>Represents a GET on / 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Info<T>(Func<InfoRequestParameters, InfoRequestParameters> requestParameters = null) =>
			this.DoRequest<T,InfoRequestParameters>("GET", Url($""), requestParameters);
		
		///<summary>Represents a GET on / 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> InfoAsync<T>(Func<InfoRequestParameters, InfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,InfoRequestParameters>("GET", Url($""), requestParameters);
		
		///<summary>Represents a GET on / 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Info(Func<InfoRequestParameters, InfoRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,InfoRequestParameters>("GET", Url($""), requestParameters);
		
		///<summary>Represents a GET on / 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> InfoAsync(Func<InfoRequestParameters, InfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,InfoRequestParameters>("GET", Url($""), requestParameters);
		
		///<summary>Represents a GET on /_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ListBenchmarks<T>(Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ListBenchmarksRequestParameters>("GET", Url($"_bench"), requestParameters);
		
		///<summary>Represents a GET on /_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ListBenchmarksAsync<T>(Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ListBenchmarksRequestParameters>("GET", Url($"_bench"), requestParameters);
		
		///<summary>Represents a GET on /_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ListBenchmarks(Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"_bench"), requestParameters);
		
		///<summary>Represents a GET on /_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ListBenchmarksAsync(Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ListBenchmarks<T>(string index, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ListBenchmarksAsync<T>(string index, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ListBenchmarks(string index, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ListBenchmarksAsync(string index, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ListBenchmarks<T>(string index, string type, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ListBenchmarksAsync<T>(string index, string type, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_bench 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ListBenchmarks(string index, string type, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_bench 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-benchmark.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">The name of the document type</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ListBenchmarksAsync(string index, string type, Func<ListBenchmarksRequestParameters, ListBenchmarksRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ListBenchmarksRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_bench"), requestParameters);
		
		///<summary>Represents a GET on /_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MgetGet<T>(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("GET", Url($"_mget"), requestParameters);
		
		///<summary>Represents a GET on /_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetGetAsync<T>(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("GET", Url($"_mget"), requestParameters);
		
		///<summary>Represents a GET on /_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MgetGet(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"_mget"), requestParameters);
		
		///<summary>Represents a GET on /_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetGetAsync(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MgetGet<T>(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetGetAsync<T>(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MgetGet(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetGetAsync(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MgetGet<T>(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetGetAsync<T>(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MgetGet(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetGetAsync(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters);
		
		///<summary>Represents a POST on /_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mget<T>(object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("POST", Url($"_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetAsync<T>(object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("POST", Url($"_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mget(object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetAsync(object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mget<T>(string index, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetAsync<T>(string index, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mget(string index, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetAsync(string index, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mget<T>(string index, string type, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MgetAsync<T>(string index, string type, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mget 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mget(string index, string type, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mget 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MgetAsync(string index, string type, object body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiGetRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mget"), requestParameters, body);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MltGet<T>(string index, string type, string id, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MoreLikeThisRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MltGetAsync<T>(string index, string type, string id, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MoreLikeThisRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MltGet(string index, string type, string id, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MoreLikeThisRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MltGetAsync(string index, string type, string id, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MoreLikeThisRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mlt<T>(string index, string type, string id, object body, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MoreLikeThisRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MltAsync<T>(string index, string type, string id, object body, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MoreLikeThisRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mlt(string index, string type, string id, object body, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MoreLikeThisRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_mlt 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="body">A specific search request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MltAsync(string index, string type, string id, object body, Func<MoreLikeThisRequestParameters, MoreLikeThisRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MoreLikeThisRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_mlt"), requestParameters, body);
		
		///<summary>Represents a GET on /_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MpercolateGet<T>(Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("GET", Url($"_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateGetAsync<T>(Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("GET", Url($"_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MpercolateGet(Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateGetAsync(Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MpercolateGet<T>(string index, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateGetAsync<T>(string index, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MpercolateGet(string index, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateGetAsync(string index, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MpercolateGet<T>(string index, string type, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateGetAsync<T>(string index, string type, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MpercolateGet(string index, string type, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateGetAsync(string index, string type, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters);
		
		///<summary>Represents a POST on /_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mpercolate<T>(object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("POST", Url($"_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateAsync<T>(object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("POST", Url($"_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mpercolate(object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateAsync(object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mpercolate<T>(string index, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateAsync<T>(string index, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mpercolate(string index, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateAsync(string index, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mpercolate<T>(string index, string type, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MpercolateAsync<T>(string index, string type, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mpercolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mpercolate(string index, string type, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mpercolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being count percolated to use as default</param>
		///<param name="type">The type of the document being percolated to use as default.</param>
		///<param name="body">The percolate request definitions (header &amp; body pair), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MpercolateAsync(string index, string type, object body, Func<MultiPercolateRequestParameters, MultiPercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiPercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mpercolate"), requestParameters, body);
		
		///<summary>Represents a GET on /_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MsearchGet<T>(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("GET", Url($"_msearch"), requestParameters);
		
		///<summary>Represents a GET on /_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("GET", Url($"_msearch"), requestParameters);
		
		///<summary>Represents a GET on /_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MsearchGet(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"_msearch"), requestParameters);
		
		///<summary>Represents a GET on /_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchGetAsync(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MsearchGet<T>(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MsearchGet(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchGetAsync(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MsearchGet<T>(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MsearchGet(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchGetAsync(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters);
		
		///<summary>Represents a POST on /_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Msearch<T>(object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("POST", Url($"_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchAsync<T>(object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("POST", Url($"_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Msearch(object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchAsync(object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Msearch<T>(string index, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchAsync<T>(string index, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Msearch(string index, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchAsync(string index, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Msearch<T>(string index, string type, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MsearchAsync<T>(string index, string type, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_msearch 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Msearch(string index, string type, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_msearch 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MsearchAsync(string index, string type, object body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiSearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_msearch"), requestParameters, body);
		
		///<summary>Represents a GET on /_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MtermvectorsGet<T>(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("GET", Url($"_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("GET", Url($"_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MtermvectorsGet(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsGetAsync(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MtermvectorsGet<T>(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MtermvectorsGet(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsGetAsync(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> MtermvectorsGet<T>(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> MtermvectorsGet(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsGetAsync(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters);
		
		///<summary>Represents a POST on /_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mtermvectors<T>(object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("POST", Url($"_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("POST", Url($"_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mtermvectors(object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsAsync(object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mtermvectors<T>(string index, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(string index, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mtermvectors(string index, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsAsync(string index, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Mtermvectors<T>(string index, string type, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(string index, string type, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Mtermvectors(string index, string type, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> MtermvectorsAsync(string index, string type, object body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,MultiTermVectorsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_mtermvectors"), requestParameters, body);
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesHotThreadsForAll<T>(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesHotThreadsForAllAsync<T>(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesHotThreadsForAll(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesHotThreadsForAllAsync(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesHotThreads<T>(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesHotThreadsAsync<T>(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesHotThreads(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesHotThreadsAsync(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesHotThreadsRequestParameters>("GET", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/hotthreads"), requestParameters);
		
		///<summary>Represents a GET on /_nodes 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesInfoForAll<T>(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesInfoRequestParameters>("GET", Url($"_nodes"), requestParameters);
		
		///<summary>Represents a GET on /_nodes 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesInfoForAllAsync<T>(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesInfoRequestParameters>("GET", Url($"_nodes"), requestParameters);
		
		///<summary>Represents a GET on /_nodes 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesInfoForAll(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes"), requestParameters);
		
		///<summary>Represents a GET on /_nodes 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesInfoForAllAsync(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesInfo<T>(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesInfoAsync<T>(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesInfo(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesInfoAsync(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesInfoForAll<T>(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesInfoForAllAsync<T>(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesInfoForAll(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesInfoForAllAsync(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesInfo<T>(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesInfoAsync<T>(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesInfo(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesInfoAsync(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesInfoRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a POST on /_shutdown 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesShutdownForAll<T>(Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesShutdownRequestParameters>("POST", Url($"_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_shutdown 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesShutdownForAllAsync<T>(Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesShutdownRequestParameters>("POST", Url($"_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_shutdown 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesShutdownForAll(Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesShutdownRequestParameters>("POST", Url($"_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_shutdown 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesShutdownForAllAsync(Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesShutdownRequestParameters>("POST", Url($"_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesShutdown<T>(string node_id, Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesShutdownRequestParameters>("POST", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesShutdownAsync<T>(string node_id, Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesShutdownRequestParameters>("POST", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesShutdown(string node_id, Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesShutdownRequestParameters>("POST", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/_shutdown"), requestParameters);
		
		///<summary>Represents a POST on /_cluster/nodes/{node_id}/_shutdown 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you&#39;re connected to, leave empty to perform the operation on all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesShutdownAsync(string node_id, Func<NodesShutdownRequestParameters, NodesShutdownRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesShutdownRequestParameters>("POST", Url($"_cluster/nodes/{node_id.NotNull("node_id")}/_shutdown"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStatsForAll<T>(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStatsForAll(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsForAllAsync(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStats<T>(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStats(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsAsync(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStatsForAll<T>(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStatsForAll(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsForAllAsync(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStats<T>(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStats(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsAsync(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStatsForAll<T>(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStatsForAll(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsForAllAsync(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> NodesStats<T>(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> NodesStats(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html</para>	
	    ///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> NodesStatsAsync(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,NodesStatsRequestParameters>("GET", Url($"_nodes/{node_id.NotNull("node_id")}/stats/{metric.NotNull("metric")}/{index_metric.NotNull("index_metric")}"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PercolateGet<T>(string index, string type, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PercolateGetAsync<T>(string index, string type, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PercolateGet(string index, string type, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PercolateGetAsync(string index, string type, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PercolateGet<T>(string index, string type, string id, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PercolateGetAsync<T>(string index, string type, string id, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PercolateGet(string index, string type, string id, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PercolateGetAsync(string index, string type, string id, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Percolate<T>(string index, string type, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PercolateAsync<T>(string index, string type, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Percolate(string index, string type, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PercolateAsync(string index, string type, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Percolate<T>(string index, string type, string id, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PercolateAsync<T>(string index, string type, string id, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Percolate(string index, string type, string id, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_percolate 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html</para>	
	    ///</summary>
		///<param name="index">The index of the document being percolated.</param>
		///<param name="type">The type of the document being percolated.</param>
		///<param name="id">Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.</param>
		///<param name="body">The percolator request definition using the percolate DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PercolateAsync(string index, string type, string id, object body, Func<PercolateRequestParameters, PercolateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PercolateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_percolate"), requestParameters, body);
		
		///<summary>Represents a HEAD on / 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Ping<T>(Func<PingRequestParameters, PingRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PingRequestParameters>("HEAD", Url($""), requestParameters);
		
		///<summary>Represents a HEAD on / 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PingAsync<T>(Func<PingRequestParameters, PingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PingRequestParameters>("HEAD", Url($""), requestParameters);
		
		///<summary>Represents a HEAD on / 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Ping(Func<PingRequestParameters, PingRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PingRequestParameters>("HEAD", Url($""), requestParameters);
		
		///<summary>Represents a HEAD on / 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PingAsync(Func<PingRequestParameters, PingRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PingRequestParameters>("HEAD", Url($""), requestParameters);
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PutScript<T>(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutScriptRequestParameters>("PUT", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PutScriptAsync<T>(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutScriptRequestParameters>("PUT", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PutScript(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutScriptRequestParameters>("PUT", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PutScriptAsync(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutScriptRequestParameters>("PUT", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PutScriptPost<T>(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutScriptRequestParameters>("POST", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PutScriptPostAsync<T>(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutScriptRequestParameters>("POST", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_scripts/{lang}/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PutScriptPost(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutScriptRequestParameters>("POST", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_scripts/{lang}/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html</para>	
	    ///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PutScriptPostAsync(string lang, string id, object body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutScriptRequestParameters>("POST", Url($"_scripts/{lang.NotNull("lang")}/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PutTemplate<T>(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutTemplateRequestParameters>("PUT", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PutTemplateAsync<T>(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutTemplateRequestParameters>("PUT", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PutTemplate(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutTemplateRequestParameters>("PUT", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PutTemplateAsync(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutTemplateRequestParameters>("PUT", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> PutTemplatePost<T>(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,PutTemplateRequestParameters>("POST", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> PutTemplatePostAsync<T>(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,PutTemplateRequestParameters>("POST", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template/{id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> PutTemplatePost(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,PutTemplateRequestParameters>("POST", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template/{id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html</para>	
	    ///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> PutTemplatePostAsync(string id, object body, Func<PutTemplateRequestParameters, PutTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,PutTemplateRequestParameters>("POST", Url($"_search/template/{id.NotNull("id")}"), requestParameters, body);
		
		///<summary>Represents a GET on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ScrollGet<T>(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ScrollRequestParameters>("GET", Url($"_search/scroll"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ScrollGetAsync<T>(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ScrollRequestParameters>("GET", Url($"_search/scroll"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ScrollGet(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ScrollRequestParameters>("GET", Url($"_search/scroll"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ScrollGetAsync(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ScrollRequestParameters>("GET", Url($"_search/scroll"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> ScrollGet<T>(string scroll_id, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ScrollRequestParameters>("GET", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ScrollGetAsync<T>(string scroll_id, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ScrollRequestParameters>("GET", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> ScrollGet(string scroll_id, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ScrollRequestParameters>("GET", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters);
		
		///<summary>Represents a GET on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ScrollGetAsync(string scroll_id, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ScrollRequestParameters>("GET", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters);
		
		///<summary>Represents a POST on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Scroll<T>(object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ScrollRequestParameters>("POST", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ScrollAsync<T>(object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ScrollRequestParameters>("POST", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Scroll(object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ScrollRequestParameters>("POST", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ScrollAsync(object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ScrollRequestParameters>("POST", Url($"_search/scroll"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Scroll<T>(string scroll_id, object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<T,ScrollRequestParameters>("POST", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> ScrollAsync<T>(string scroll_id, object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,ScrollRequestParameters>("POST", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll/{scroll_id} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Scroll(string scroll_id, object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,ScrollRequestParameters>("POST", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/scroll/{scroll_id} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html</para>	
	    ///</summary>
		///<param name="scroll_id">The scroll ID</param>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> ScrollAsync(string scroll_id, object body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,ScrollRequestParameters>("POST", Url($"_search/scroll/{scroll_id.NotNull("scroll_id")}"), requestParameters, body);
		
		///<summary>Represents a GET on /_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchGet<T>(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("GET", Url($"_search"), requestParameters);
		
		///<summary>Represents a GET on /_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchGetAsync<T>(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("GET", Url($"_search"), requestParameters);
		
		///<summary>Represents a GET on /_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchGet(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("GET", Url($"_search"), requestParameters);
		
		///<summary>Represents a GET on /_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchGetAsync(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("GET", Url($"_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchGet<T>(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchGetAsync<T>(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchGet(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchGetAsync(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchGet<T>(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchGetAsync<T>(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchGet(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchGetAsync(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters);
		
		///<summary>Represents a POST on /_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Search<T>(object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("POST", Url($"_search"), requestParameters, body);
		
		///<summary>Represents a POST on /_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchAsync<T>(object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("POST", Url($"_search"), requestParameters, body);
		
		///<summary>Represents a POST on /_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Search(object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("POST", Url($"_search"), requestParameters, body);
		
		///<summary>Represents a POST on /_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchAsync(object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("POST", Url($"_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Search<T>(string index, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchAsync<T>(string index, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Search(string index, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchAsync(string index, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Search<T>(string index, string type, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchAsync<T>(string index, string type, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Search(string index, string type, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchAsync(string index, string type, object body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExists<T>(object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("POST", Url($"_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsAsync<T>(object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("POST", Url($"_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExists(object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsAsync(object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExists<T>(string index, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsAsync<T>(string index, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExists(string index, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsAsync(string index, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/{type}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExists<T>(string index, string type, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/{type}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsAsync<T>(string index, string type, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/{type}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExists(string index, string type, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a POST on /{index}/{type}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsAsync(string index, string type, object body, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, body, allow404: true);
		
		///<summary>Represents a GET on /_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExistsGet<T>(Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("GET", Url($"_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsGetAsync<T>(Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("GET", Url($"_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExistsGet(Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsGetAsync(Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExistsGet<T>(string index, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsGetAsync<T>(string index, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExistsGet(string index, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsGetAsync(string index, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchExistsGet<T>(string index, string type, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchExistsGetAsync<T>(string index, string type, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/_search/exists 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchExistsGet(string index, string type, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /{index}/{type}/_search/exists 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchExistsGetAsync(string index, string type, Func<SearchExistsRequestParameters, SearchExistsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchExistsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/exists"), requestParameters, allow404: true);
		
		///<summary>Represents a GET on /_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShardsGet<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("GET", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsGetAsync<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("GET", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShardsGet(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsGetAsync(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShardsGet<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsGetAsync<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShardsGet(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsGetAsync(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShardsGet<T>(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsGetAsync<T>(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShardsGet(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsGetAsync(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShards<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("POST", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsAsync<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("POST", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShards(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsAsync(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShards<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsAsync<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShards(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsAsync(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchShards<T>(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchShardsAsync<T>(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_search_shards 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchShards(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_search_shards 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchShardsAsync(string index, string type, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchShardsRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search_shards"), requestParameters);
		
		///<summary>Represents a GET on /_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplateGet<T>(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("GET", Url($"_search/template"), requestParameters);
		
		///<summary>Represents a GET on /_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("GET", Url($"_search/template"), requestParameters);
		
		///<summary>Represents a GET on /_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplateGet(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"_search/template"), requestParameters);
		
		///<summary>Represents a GET on /_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateGetAsync(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplateGet<T>(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplateGet(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateGetAsync(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplateGet<T>(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplateGet(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateGetAsync(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters);
		
		///<summary>Represents a POST on /_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplate<T>(object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("POST", Url($"_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("POST", Url($"_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplate(object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateAsync(object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplate<T>(string index, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(string index, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplate(string index, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateAsync(string index, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SearchTemplate<T>(string index, string type, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(string index, string type, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search/template 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SearchTemplate(string index, string type, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_search/template 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SearchTemplateAsync(string index, string type, object body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SearchTemplateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_search/template"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotCreate<T>(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SnapshotRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotCreateAsync<T>(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SnapshotRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotCreate(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SnapshotRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotCreateAsync(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SnapshotRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotCreatePost<T>(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SnapshotRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotCreatePostAsync<T>(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SnapshotRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotCreatePost(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SnapshotRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotCreatePostAsync(string repository, string snapshot, object body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SnapshotRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotCreateRepository<T>(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CreateRepositoryRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotCreateRepositoryAsync<T>(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CreateRepositoryRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotCreateRepository(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CreateRepositoryRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a PUT on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotCreateRepositoryAsync(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CreateRepositoryRequestParameters>("PUT", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotCreateRepositoryPost<T>(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,CreateRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotCreateRepositoryPostAsync<T>(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,CreateRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotCreateRepositoryPost(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,CreateRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotCreateRepositoryPostAsync(string repository, object body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,CreateRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters, body);
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotDelete<T>(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteSnapshotRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotDeleteAsync<T>(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteSnapshotRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotDelete(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteSnapshotRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotDeleteAsync(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteSnapshotRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotDeleteRepository<T>(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,DeleteRepositoryRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotDeleteRepositoryAsync<T>(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,DeleteRepositoryRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotDeleteRepository(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,DeleteRepositoryRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a DELETE on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotDeleteRepositoryAsync(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,DeleteRepositoryRequestParameters>("DELETE", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotGet<T>(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetSnapshotRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotGetAsync<T>(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetSnapshotRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotGet(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetSnapshotRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotGetAsync(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetSnapshotRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotGetRepository<T>(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetRepositoryRequestParameters>("GET", Url($"_snapshot"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotGetRepositoryAsync<T>(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetRepositoryRequestParameters>("GET", Url($"_snapshot"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotGetRepository(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetRepositoryRequestParameters>("GET", Url($"_snapshot"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotGetRepositoryAsync(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetRepositoryRequestParameters>("GET", Url($"_snapshot"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotGetRepository<T>(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,GetRepositoryRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotGetRepositoryAsync<T>(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,GetRepositoryRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository} 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotGetRepository(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,GetRepositoryRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository} 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotGetRepositoryAsync(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,GetRepositoryRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}"), requestParameters);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotRestore<T>(string repository, string snapshot, object body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null) =>
			this.DoRequest<T,RestoreRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_restore"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotRestoreAsync<T>(string repository, string snapshot, object body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,RestoreRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_restore"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotRestore(string repository, string snapshot, object body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,RestoreRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_restore"), requestParameters, body);
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotRestoreAsync(string repository, string snapshot, object body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,RestoreRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_restore"), requestParameters, body);
		
		///<summary>Represents a GET on /_snapshot/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotStatus<T>(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotStatus(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotStatusAsync(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotStatus<T>(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotStatus(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotStatusAsync(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotStatus<T>(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotStatus(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_status"), requestParameters);
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotStatusAsync(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SnapshotStatusRequestParameters>("GET", Url($"_snapshot/{repository.NotNull("repository")}/{snapshot.NotNull("snapshot")}/_status"), requestParameters);
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SnapshotVerifyRepository<T>(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<T,VerifyRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/_verify"), requestParameters);
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SnapshotVerifyRepositoryAsync<T>(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,VerifyRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/_verify"), requestParameters);
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SnapshotVerifyRepository(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,VerifyRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/_verify"), requestParameters);
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html</para>	
	    ///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SnapshotVerifyRepositoryAsync(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,VerifyRepositoryRequestParameters>("POST", Url($"_snapshot/{repository.NotNull("repository")}/_verify"), requestParameters);
		
		///<summary>Represents a POST on /_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Suggest<T>(object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SuggestRequestParameters>("POST", Url($"_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SuggestAsync<T>(object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SuggestRequestParameters>("POST", Url($"_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Suggest(object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SuggestRequestParameters>("POST", Url($"_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SuggestAsync(object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SuggestRequestParameters>("POST", Url($"_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Suggest<T>(string index, object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SuggestRequestParameters>("POST", Url($"{index.NotNull("index")}/_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SuggestAsync<T>(string index, object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SuggestRequestParameters>("POST", Url($"{index.NotNull("index")}/_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Suggest(string index, object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SuggestRequestParameters>("POST", Url($"{index.NotNull("index")}/_suggest"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="body">The request definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SuggestAsync(string index, object body, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SuggestRequestParameters>("POST", Url($"{index.NotNull("index")}/_suggest"), requestParameters, body);
		
		///<summary>Represents a GET on /_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SuggestGet<T>(Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SuggestRequestParameters>("GET", Url($"_suggest"), requestParameters);
		
		///<summary>Represents a GET on /_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SuggestGetAsync<T>(Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SuggestRequestParameters>("GET", Url($"_suggest"), requestParameters);
		
		///<summary>Represents a GET on /_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SuggestGet(Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SuggestRequestParameters>("GET", Url($"_suggest"), requestParameters);
		
		///<summary>Represents a GET on /_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SuggestGetAsync(Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SuggestRequestParameters>("GET", Url($"_suggest"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> SuggestGet<T>(string index, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<T,SuggestRequestParameters>("GET", Url($"{index.NotNull("index")}/_suggest"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> SuggestGetAsync<T>(string index, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,SuggestRequestParameters>("GET", Url($"{index.NotNull("index")}/_suggest"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_suggest 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> SuggestGet(string index, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,SuggestRequestParameters>("GET", Url($"{index.NotNull("index")}/_suggest"), requestParameters);
		
		///<summary>Represents a GET on /{index}/_suggest 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html</para>	
	    ///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> SuggestGetAsync(string index, Func<SuggestRequestParameters, SuggestRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,SuggestRequestParameters>("GET", Url($"{index.NotNull("index")}/_suggest"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> TermvectorGet<T>(string index, string type, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> TermvectorGetAsync<T>(string index, string type, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> TermvectorGet(string index, string type, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> TermvectorGetAsync(string index, string type, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> TermvectorGet<T>(string index, string type, string id, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> TermvectorGetAsync<T>(string index, string type, string id, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> TermvectorGet(string index, string type, string id, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters);
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> TermvectorGetAsync(string index, string type, string id, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TermvectorRequestParameters>("GET", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters);
		
		///<summary>Represents a POST on /{index}/{type}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Termvector<T>(string index, string type, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> TermvectorAsync<T>(string index, string type, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Termvector(string index, string type, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> TermvectorAsync(string index, string type, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Termvector<T>(string index, string type, string id, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<T,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> TermvectorAsync<T>(string index, string type, string id, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Termvector(string index, string type, string id, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvector 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html</para>	
	    ///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document.</param>
		///<param name="body">Define parameters. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> TermvectorAsync(string index, string type, string id, object body, Func<TermvectorRequestParameters, TermvectorRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,TermvectorRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_termvector"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update 
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<T> Update<T>(string index, string type, string id, object body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null) =>
			this.DoRequest<T,UpdateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_update"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to /para>
		///<para> - byte[], no deserialization, but the response stream will be closed</para>
		///<para> - Stream, no deserialization, response stream is your responsibility</para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<T>> UpdateAsync<T>(string index, string type, string id, object body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<T,UpdateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_update"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update 
		///<para></para>Returns: ElasticsearchResponse&lt;DynamicDictionary&gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public ElasticsearchResponse<DynamicDictionary> Update(string index, string type, string id, object body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null) =>
			this.DoRequest<DynamicDictionary,UpdateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_update"), requestParameters, body);
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update 
		///<para></para>Returns: A task of ElasticsearchResponse&lt;DynamicDictionary$gt;
		///<para> - Dynamic dictionary is a special dynamic type that allows json to be traversed safely</para>
		///<para> - i.e result.Response.hits.hits[0].property.nested["nested_deeper"]</para>
		///<para> - can be safely dispatched to a nullable type even if intermediate properties do not exist</para> 
	    ///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html</para>	
	    ///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		public Task<ElasticsearchResponse<DynamicDictionary>> UpdateAsync(string index, string type, string id, object body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null) =>
			this.DoRequestAsync<DynamicDictionary,UpdateRequestParameters>("POST", Url($"{index.NotNull("index")}/{type.NotNull("type")}/{id.NotNull("id")}/_update"), requestParameters, body);
		
	
	  }
	  }
	
