# Strongly typed field access 

Several places in the elasticsearch API expect the path to a field from your original source document as a string.
NEST allows you to use C# expressions to strongly type these field path strings. 
These expressions are assigned to a type called `FieldName` and there are several ways to create a instance of that type

Using the constructor directly is possible but rather involved 

[source, csharp]
----
var fieldString = new FieldName() {Name = "name"};
----
especially when using C# expressions since these can not be simply new'ed

[source, csharp]
----
Expression<Func<Project, object>> expression = p => p.Name;
----
[source, csharp]
----
var fieldExpression = new FieldName() { Expression = expression };
Expect("name")
				.WhenSerializing(fieldExpression)
				.WhenSerializing(fieldString);
----
Therefor you can also implicitly convert strings and expressions to FieldName's 

[source, csharp]
----
FieldName fieldString = "name";
----
but for expressions this is still rather involved 

[source, csharp]
----
Expression<Func<Project, object>> expression = p => p.Name;
----
[source, csharp]
----
FieldName fieldExpression = expression;
Expect("name")
				.WhenSerializing(fieldExpression)
				.WhenSerializing(fieldString);
----
to ease creating FieldName's from expressions there is a static Property class you can use 

[source, csharp]
----
FieldName fieldString = "name";
----
but for expressions this is still rather involved 

[source, csharp]
----
var fieldExpression = Property.Field<Project>(p=>p.Name);
----
Using static imports in c# 6 this can be even shortened:
using static Nest.Property; 

[source, csharp]
----
fieldExpression = Field<Project>(p=>p.Name);
----
Now this is much much terser then our first example using the constructor! 

[source, csharp]
----
Expect("name").WhenSerializing(fieldExpression);
----
By default NEST will camelCase all the field names to be more javascripty 

using SetDefaultFieldNameInferrer on ConnectionSettings you can change this behavior 

[source, csharp]
----
var setup = WithConnectionSettings(s => s.SetDefaultFieldNameInferrer(p => p.ToUpper()));
----
[source, csharp]
----
setup.Expect("NAME").WhenSerializing(Field<Project>(p => p.Name));
----
However string are *always* passed along verbatim 

[source, csharp]
----
setup.Expect("NaMe").WhenSerializing<FieldName>("NaMe");
----
if you want the same behavior for expressions simply do nothing in the default inferrer 

[source, csharp]
----
setup = WithConnectionSettings(s => s.SetDefaultFieldNameInferrer(p => p));
----
[source, csharp]
----
setup.Expect("Name").WhenSerializing(Field<Project>(p => p.Name));
----
Complex field name expressions 

[source, csharp]
----
Expect("leadDeveloper.firstName").WhenSerializing(Field<Project>(p => p.LeadDeveloper.FirstName));
----
