:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/2.3

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

[[verbatim-and-strict-query-usage]]
== Verbatim and Strict Query Usage

NEST has the concept of conditionless queries; if the input to a query is determined to be __empty__, for example,`null` or `""` for a string input, then the query will not be serialized and sent to Elasticsearch. If a conditionless
query is part of a compound query then the query will not be part of the json query dsl sent to Elasticsearch.

Conditionless behavior can be controlled on individual queries by using Strict and Verbatim queries

Strict::

Individual queries can be marked as strict meaning that if they are conditionless, an exception is thrown.
This is useful for when a query must have an input value.

Verbatim::

Individual queries can be marked as verbatim meaning that the query should be sent to Elasticsearch **as is**,
even if it is conditionless.

[[verbatim-usage]]
[float]
== Verbatim Usage

`IsVerbatim` should be set on individual queries to take effect

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Verbatim()
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
&& new TermQuery
{
    Field = "name",
    Value = "foo"
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "description": {
            "value": ""
          }
        }
      },
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

[[non-cascading-strict-outer-queries]]
[float]
== Non-Cascading Strict Outer Queries

Setting `IsStrict` on the outer query container does not cascade

=== Fluent DSL Example

[source,csharp]
----
q
.Strict()
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
IQueryContainer query = new QueryContainer(new BoolQuery
{
    Must = new List<QueryContainer>
    {
        new TermQuery
        {
            Field = "description",
            Value = ""
        },
        new TermQuery
        {
            Field = "name",
            Value = "foo"
        }
    }
});
query.IsStrict = true;
return (QueryContainer)query;
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

[[non-cascading-verbatim-outer-queries]]
[float]
== Non-Cascading Verbatim Outer Queries

Setting `IsVerbatim` on the outer query container does not cascade

=== Fluent DSL Example

[source,csharp]
----
q
.Verbatim()
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
IQueryContainer query = new QueryContainer(new BoolQuery
{
    Must = new List<QueryContainer>
    {
        new TermQuery
        {
            Field = "description",
            Value = ""
        },
        new TermQuery
        {
            Field = "name",
            Value = "foo"
        }
    }
});
query.IsVerbatim = true;
return (QueryContainer)query;
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

[[verbatim-single-queries]]
[float]
== Verbatim Single Queries

Setting `IsVerbatim` on a single query is still supported though

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Verbatim()
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new BoolQuery
{
    IsVerbatim = true,
}
----

[source,javascript]
.Example json output
----
{
  "bool": {}
}
----

=== Fluent DSL Example

[source,csharp]
----
q
.Term(t => t
    .Verbatim()
    .Field(p => p.Description)
    .Value("")
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "value": ""
    }
  }
}
----

[[verbatim-compound-queries]]
[float]
== Verbatim Compound Queries

Similarly to verbatim single queries, setting `IsVerbatim` on a single query that is part
of a compound query is also supported

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Filter(f => !f
        .Term(t => t
            .Verbatim()
            .Field(p => p.Name)
            .Value("")
        ) && f
        .Exists(e => e
            .Field(p => p.NumberOfCommits)
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new BoolQuery
{
    Filter = new QueryContainer[] {
        !new TermQuery
        {
            IsVerbatim = true,
            Field = "name",
            Value = ""
        } &&
        new ExistsQuery
        {
            Field = "numberOfCommits"
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "filter": [
      {
        "bool": {
          "must": [
            {
              "exists": {
                "field": "numberOfCommits"
              }
            }
          ],
          "must_not": [
            {
              "term": {
                "name": {
                  "value": ""
                }
              }
            }
          ]
        }
      }
    ]
  }
}
----

