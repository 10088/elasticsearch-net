:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/7.0

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Tests/Aggregations/Metric/ScriptedMetric/ScriptedMetricAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[scripted-metric-aggregation-usage]]
=== Scripted Metric Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
a => a
.ScriptedMetric("sum_the_hard_way", sm => sm
    .InitScript(ss => ss.Source(Script.Init))
    .MapScript(ss => ss.Source(Script.Map))
    .CombineScript(ss => ss.Source(Script.Combine))
    .ReduceScript(ss => ss.Source(Script.Reduce))
)
----

==== Object Initializer syntax example

[source,csharp]
----
new ScriptedMetricAggregation("sum_the_hard_way")
{
    InitScript = new InlineScript(Script.Init),
    MapScript = new InlineScript(Script.Map),
    CombineScript = new InlineScript(Script.Combine),
    ReduceScript = new InlineScript(Script.Reduce)
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var sumTheHardWay = response.Aggregations.ScriptedMetric("sum_the_hard_way");
sumTheHardWay.Should().NotBeNull();
sumTheHardWay.Value<int>().Should().BeGreaterThan(0);
----

[source,csharp]
----
private class Scripted
{
    public string Combine { get; set; }
    public string Init { get; set; }
    public string Language { get; set; }
    public string Map { get; set; }
    public string Reduce { get; set; }
}
----

==== Fluent DSL example

[source,csharp]
----
a => a
.ScriptedMetric("by_state_total", sm => sm
    .InitScript(ss => ss.Source(First.Init).Lang(First.Language))
    .CombineScript(ss => ss.Source(First.Combine).Lang(First.Language))
    .MapScript(ss => ss.Source(First.Map).Lang(First.Language))
    .ReduceScript(ss => ss.Source(First.Reduce).Lang(First.Language))
)
.ScriptedMetric("total_commits", sm => sm
    .InitScript(ss => ss.Source(Second.Init).Lang(Second.Language))
    .MapScript(ss => ss.Source(Second.Map).Lang(Second.Language))
    .CombineScript(ss => ss.Source(Second.Combine).Lang(Second.Language))
    .ReduceScript(ss => ss.Source(Second.Reduce).Lang(Second.Language))
)
----

==== Object Initializer syntax example

[source,csharp]
----
new ScriptedMetricAggregation("by_state_total")
{
    InitScript = new InlineScript(First.Init) { Lang = First.Language },
    CombineScript = new InlineScript(First.Combine) { Lang = First.Language },
    MapScript = new InlineScript(First.Map) { Lang = First.Language },
    ReduceScript = new InlineScript(First.Reduce) { Lang = First.Language }
}
&& new ScriptedMetricAggregation("total_commits")
{
    InitScript = new InlineScript(Second.Init) { Lang = Second.Language },
    MapScript = new InlineScript(Second.Map) { Lang = Second.Language },
    CombineScript = new InlineScript(Second.Combine) { Lang = Second.Language },
    ReduceScript = new InlineScript(Second.Reduce) { Lang = Second.Language }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var byStateTotal = response.Aggregations.ScriptedMetric("by_state_total");
var totalCommits = response.Aggregations.ScriptedMetric("total_commits");

byStateTotal.Should().NotBeNull();
totalCommits.Should().NotBeNull();

byStateTotal.Value<IDictionary<string, int>>().Should().NotBeNull();
totalCommits.Value<int>().Should().BeGreaterThan(0);
----

