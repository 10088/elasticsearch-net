[[aliasing]]
== Aliasing 

Adding/removing and updating aliases are also easy to do in NEST. 
For more information look at the http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html[Alias documentation]

[float]
=== Add

[float]
==== Fluent Syntax

[source,csharp]
----
client.Alias(a => a
    .Add(add => add
        .Index("myindex")
        .Alias("myalias")
    )
);
----

[float]
==== Object Initializer Syntax

[source,csharp]
----
var request = new AliasRequest
{
    Actions = new IAliasAction[]
    {
        new AliasAddAction 
        { 
            Add = new AliasAddOperation { Index = "myindex", Alias = "myalias" } 
        }
    }
};

client.Alias(request);
----

[float]
=== Remove

[float]
==== Fluent Syntax

[source,csharp]
----
client.Alias(a => a
    .Remove(remove => remove
        .Index("myindex")
        .Alias("myalias")
    )
);
----

[float]
==== Object Initializer Syntax

[source,csharp]
----
var request = new AliasRequest
{
    Actions = new IAliasAction[]
    {
        new AliasRemoveAction 
        { 
            Remove = new AliasRemoveOperation { Index = "myindex", Alias = "myalias" } 
        }
    }
};

client.Alias(request);
----

[float]
=== Rename

To rename an alias, just do an Add and a Remove in the same operation. Elasticsearch will then atomically rename your alias:

[float]
==== Fluent Syntax

[source,csharp]
----
client.Alias(a => a
    .Add(add => add
        .Index("myindex")
        .Alias("newalias")
    )
    .Remove(remove => remove
        .Index("myindex")
        .Alias("oldalias")
    )
);
----

[float]
==== Object Initializer Syntax

[source,csharp]
----
var request = new AliasRequest
{
    Actions = new IAliasAction[]
    {
        new AliasAddAction 
        { 
            Add = new AliasAddOperation { Index = "myindex", Alias = "myalias" } 
        },
        new AliasRemoveAction 
        { 
            Remove = new AliasRemoveOperation { Index = "myindex", Alias = "myalias" } 
        }
    }
};

client.Alias(request);
----

