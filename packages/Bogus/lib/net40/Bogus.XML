<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bogus</name>
    </assembly>
    <members>
        <member name="T:Bogus.DataSet">
            <summary>
            Data set methods that access the JSON database of locales.
            </summary>
        </member>
        <member name="T:Bogus.ILocaleAware">
            <summary>
            Marker interface for datasets that are locale aware.
            </summary>
        </member>
        <member name="P:Bogus.ILocaleAware.Locale">
            <summary>
            The current locale for the dataset.
            </summary>
        </member>
        <member name="M:Bogus.DataSet.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSet.Get(System.String)">
            <summary>
            This method accesses the JSON path of a locale dataset LOCALE.CATEGORY.KEY and returns the JToken.
            </summary>
            <param name="keyOrSubPath">key in the category</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSet.GetArray(System.String)">
            <summary>
            Helper method to access LOCALE.CATEGORY.KEY of a locale data set and returns it as a JArray.
            </summary>
            <param name="keyOrSubPath">key int the category</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSet.GetObject(System.String)">
            <summary>
            Helper method to access LOCALE.CATEGORY.KEY of a locale data set and returns it as a JObject.
            </summary>
            <param name="keyOrSubPath">key int the category</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSet.GetRandomArrayItem(System.String)">
            <summary>
            Helper method to access LOCALE.CATEGORY.KEY of a locale data set and returns a random element.
            It assumes LOCALE.CATEGORY.KEY is a JArray.
            </summary>
            <param name="keyOrSubPath">key int the category</param>
            <returns></returns>
        </member>
        <member name="P:Bogus.DataSet.Random">
            <summary>
            The Randomizer
            </summary>
        </member>
        <member name="P:Bogus.DataSet.Category">
            <summary>
            The category name of inside the locale
            </summary>
        </member>
        <member name="P:Bogus.DataSet.Locale">
            <summary>
            Current locale of the data set.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Address">
            <summary>
            Methods for generating an address
            </summary>
        </member>
        <member name="F:Bogus.DataSets.Address.Name">
            <summary>
            The source to pull names from.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Address.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Address.ZipCode">
            <summary>
            Get a zipcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.City">
            <summary>
            Get a city name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.StreetAddress(System.Boolean)">
            <summary>
            Get a street address.
            </summary>
            <param name="useFullAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.CityPrefix">
            <summary>
            Get a city prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.CitySuffix">
            <summary>
            Get a city suffix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.StreetName">
            <summary>
            Get a street name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.StreetSuffix">
            <summary>
            Get a street suffix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.SecondaryAddress">
            <summary>
            Get a secondary address like 'Apt. 2' or 'Suite 321'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.County">
            <summary>
            Get a county.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.Country">
            <summary>
            Get a country.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.State">
            <summary>
            Get a state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.StateAbbr">
            <summary>
            Get a state abbreviation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.Latitude">
            <summary>
            Get a Latitude
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Address.Longitude">
            <summary>
            Get a Longitude
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bogus.DataSets.Company">
            <summary>
            Generates a random company name and phrases
            </summary>
        </member>
        <member name="F:Bogus.DataSets.Company.Name">
            <summary>
            The source to pull names from.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Company.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Company.CompanySuffix">
            <summary>
            Get a company suffix. "Inc" and "LLC" etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Company.CompanyName(System.Nullable{System.Int32})">
            <summary>
            Get a company name
            </summary>
            <param name="formatIndex">0: name + suffix, 1: name-name, 2: name, name and name."</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Company.CatchPhrase">
            <summary>
            Get a company catch phrase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Company.Bs">
            <summary>
            Get a company BS phrase.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bogus.Database">
            <summary>
            The main database object that can access locale data.
            </summary>
        </member>
        <member name="F:Bogus.Database.Data">
            <summary>
            The root of all locales in a single JObject. { de: { ... } ,  en: { ... } }
            </summary>
        </member>
        <member name="M:Bogus.Database.Initialize">
            <summary>
            Initializes the database by going though all the locales in the assembly manifests.
            and merges them into a single JObject like. IE: Root["en"] or Root["de"].
            </summary>
        </member>
        <member name="M:Bogus.Database.Get(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the JToken of the locale.category.key. If the key does not exist, then the locale fallback is used.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Date">
            <summary>
            Methods for generating dates
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Date.Past(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Get a date in the past between refDate and years past that date.
            </summary>
            <param name="yearsToGoBack">Years to go back from refDate. Default is 1 year.</param>
            <param name="refDate">The date to start calculations. Default is now.</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Date.Future(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Get a date in the future between refDate and years forward of that date.
            </summary>
            <param name="yearsToGoForward">Years to go forward from refDate. Default is 1 year.</param>
            <param name="refDate">The date to start calculations. Default is now.</param>
        </member>
        <member name="M:Bogus.DataSets.Date.Between(System.DateTime,System.DateTime)">
            <summary>
            Get a random date between start and end.
            </summary>
            <param name="start">Starting</param>
            <param name="end">Ending</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Date.Recent(System.Int32)">
            <summary>
            Get a random date/time within the last few days since now.
            </summary>
            <param name="days">Number of days to go back.</param>
            <returns></returns>
        </member>
        <member name="T:Bogus.Faker">
            <summary>
            A hub of all the categories merged into a single class to ease fluent syntax API.
            </summary>
        </member>
        <member name="F:Bogus.Faker.DefaultStrictMode">
            <summary>
            The default mode to use when generating objects. Strict mode ensures that all properties have rules.
            </summary>
        </member>
        <member name="M:Bogus.Faker.#ctor(System.String)">
            <summary>
            Create a Faker with a specific locale.
            </summary>
        </member>
        <member name="M:Bogus.Faker.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Helper method to pick a random element.
            </summary>
        </member>
        <member name="M:Bogus.Faker.PickRandom``1">
            <summary>
            Picks a random Enum of T. Works only with Enums.
            </summary>
            <typeparam name="T">Must be an Enum</typeparam>
        </member>
        <member name="P:Bogus.Faker.Person">
            <summary>
            A contextually relevant fields of a person.
            </summary>
        </member>
        <member name="P:Bogus.Faker.Phone">
            <summary>
            Generate Phone Numbers
            </summary>
        </member>
        <member name="P:Bogus.Faker.Name">
            <summary>
            Generate Names
            </summary>
        </member>
        <member name="P:Bogus.Faker.Lorem">
            <summary>
            Generate Words
            </summary>
        </member>
        <member name="P:Bogus.Faker.Image">
            <summary>
            Generate Image URL Links
            </summary>
        </member>
        <member name="P:Bogus.Faker.Finance">
            <summary>
            Generate Finance Items
            </summary>
        </member>
        <member name="P:Bogus.Faker.Address">
            <summary>
            Generate Addresses
            </summary>
        </member>
        <member name="P:Bogus.Faker.Date">
            <summary>
            Generate Dates
            </summary>
        </member>
        <member name="P:Bogus.Faker.Internet">
            <summary>
            Generate Internet stuff like Emails and UserNames.
            </summary>
        </member>
        <member name="P:Bogus.Faker.Random">
            <summary>
            Generate numbers, booleans, and decimals.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Currency">
            <summary>
            Represents a currency
            </summary>
        </member>
        <member name="P:Bogus.DataSets.Currency.Description">
            <summary>
            The long for description of the currency. IE: "US Dollar"
            </summary>
        </member>
        <member name="P:Bogus.DataSets.Currency.Code">
            <summary>
            The currency code. iE: USD.
            </summary>
        </member>
        <member name="P:Bogus.DataSets.Currency.Symbol">
            <summary>
            The currency symbol. IE: $
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Finance">
            <summary>
            Provides financial randomness.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Finance.Account(System.Int32)">
            <summary>
            Get an account number. Default length is 8 digits.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Finance.AccountName">
            <summary>
            Get an account name. Like "savings", "checking", "Home Loan" etc..
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Finance.Amount(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Get a random amount. Default 0 - 1000.
            </summary>
            <param name="min">Min value. Default 0.</param>
            <param name="max">Max value. Default 1000.</param>
            <param name="decimals">Decimal places. Default 2.</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Finance.TransactionType">
            <summary>
            Get a transaction type: "deposit", "withdrawal", "payment", or "invoice".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Finance.Currency">
            <summary>
            Get a random currency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Finance.CreditCardNumber">
            <summary>
            Returns a credit card number that should pass validation. See: https://developers.braintreepayments.com/ios+ruby/reference/general/testing
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bogus.DataSets.Hacker">
            <summary>
            Hackerish words
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Hacker.Abbreviation">
            <summary>
            Returns an abbreviation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Hacker.Adjective">
            <summary>
            Returns a adjective.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Hacker.Noun">
            <summary>
            Returns a noun.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Hacker.Verb">
            <summary>
            Returns a verb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Hacker.IngVerb">
            <summary>
            Returns an -ing verb.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Hacker.Phrase">
            <summary>
            Returns a phrase.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bogus.Faker`1">
            <summary>
            Generates fake objects of T.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.#ctor(System.String)">
            <summary>
            Creates a Faker with a locale.
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.Faker`1.MakeNewContext">
            <summary>
            Forcibly makes a new person context.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.UseBindingFlags(System.Reflection.BindingFlags)">
            <summary>
            Set the binding flags visibility when getting properties. IE: Only public or public+private properties.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.CustomInstantiator(System.Func{Bogus.Faker,`0})">
            <summary>
            Uses the factory method to generate new instances.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,`0,``0})">
            <summary>
            Creates a rule for a compound property and providing access to the instance being generated.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Bogus.Faker,``0})">
            <summary>
            Creates a rule for a property.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.StrictMode(System.Boolean)">
            <summary>
            Ensures all properties of T have rules.
            </summary>
            <param name="ensureRulesForAllProperties">Overrides any global setting in Faker.DefaultStrictMode</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.Faker`1.FinishWith(System.Action{Bogus.Faker,`0})">
            <summary>
            Action is invoked after all the rules are applied.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.Generate">
            <summary>
            Generates a fake object of T.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.Faker`1.Generate(System.Int32)">
            <summary>
            Generates multiple fake objects of T.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.Populate(`0)">
            <summary>
            Only populates an instance of T.
            </summary>
        </member>
        <member name="M:Bogus.Faker`1.Validate">
            <summary>
            Checks if all properties have rules.
            </summary>
            <returns>True if validation pases, false otherwise.</returns>
        </member>
        <member name="P:Bogus.Faker`1.Locale">
            <summary>
            The current locale.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Images">
            <summary>
            Generates images URLs from lorempixel.com
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Images.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Images.Image">
            <summary>
            Gets a random image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.ImageUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Creates an image URL with lorempixel.com.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Images.Abstract(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Animals(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Business(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Cats(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.City(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Food(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Nightlife(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Fashion(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.People(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Nature(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Sports(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Technics(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Images.Transport(System.Int32,System.Int32)">
            <summary>
            Get an random image based on your category selection.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="T:Bogus.DataSets.Internet">
            <summary>
            Random Internet things like email addresses
            </summary>
        </member>
        <member name="F:Bogus.DataSets.Internet.Name">
            <summary>
            The source to pull names from.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Internet.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Internet.Avatar">
            <summary>
            Generates a legit Internet URL avatar from twitter accounts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Internet.Email(System.String,System.String,System.String)">
            <summary>
            Generates an email address.
            </summary>
            <param name="firstName">Always use this first name.</param>
            <param name="lastName">Sometimes used depending on randomness. See 'UserName'.</param>
            <param name="provider">Always use the provider.</param>
        </member>
        <member name="M:Bogus.DataSets.Internet.UserName(System.String,System.String)">
            <summary>
            Generates user names.
            </summary>
            <param name="firstName">Always used.</param>
            <param name="lastName">Sometimes used depending on randomness.</param>
        </member>
        <member name="M:Bogus.DataSets.Internet.DomainName">
            <summary>
            Generates a random domain name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Internet.DomainWord">
            <summary>
            Generates a domain word used for domain names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Internet.DomainSuffix">
            <summary>
            Generates a domain name suffix like .com, .net, .org
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Internet.Ip">
            <summary>
            Gets a random IP address.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Internet.Color(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets a random aesthetically pleasing color near the base R,G.B. See: http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
            </summary>
            <param name="baseRed">Red base color</param>
            <param name="baseGreen">Green base color</param>
            <param name="baseBlue">Blue base color</param>
        </member>
        <member name="M:Bogus.DataSets.Internet.Protocol">
            <summary>
            Returns a random protocol. HTTP or HTTPS.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Internet.Url">
            <summary>
            Generates a random URL.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.Lorem">
            <summary>
            Generates plain old boring text.
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Lorem.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Lorem.Words(System.Int32)">
            <summary>
            Get some lorem words
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Lorem.Sentance(System.Int32,System.Int32)">
            <summary>
            Get a random sentence. Default minimum of 3 words but at most 10 words (range = 7).
            If you want a sustenance with 5 words always call Sentence(5, range: 0);
            </summary>
            <param name="minWordCount">Minimum word count</param>
            <param name="range">Plus, add extra number of words ranging from 0 to range</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Lorem.Sentances(System.Int32)">
            <summary>
            Get some sentences.
            </summary>
            <param name="count">The number of sentences</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Lorem.Paragraph(System.Int32)">
            <summary>
            Get a paragraph.
            </summary>
            <param name="count">The number of paragraphs</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Lorem.Paragraphs(System.Int32)">
            <summary>
            Get some paragraphs with tabs n all.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Bogus.DataSets.Name">
            <summary>
            Methods for generating names
            </summary>
        </member>
        <member name="M:Bogus.DataSets.Name.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.Name.FirstName">
            <summary>
            Gets a first name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Name.LastName">
            <summary>
            Gets a last name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Name.Prefix">
            <summary>
            Gets a random prefix for a name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Name.Suffix">
            <summary>
            Gets a random suffix for a name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Name.FindName(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets a full name
            </summary>
            <param name="firstName">Use this first name.</param>
            <param name="lastName">use this last name.</param>
            <param name="withPrefix">Add a prefix?</param>
            <param name="withSuffix">Add a suffix?</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.Name.JobTitle">
            <summary>
            Gets a random job title.
            </summary>
        </member>
        <member name="T:Bogus.DataSets.PhoneNumbers">
            <summary>
            Generates phone numbers
            </summary>
        </member>
        <member name="M:Bogus.DataSets.PhoneNumbers.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:Bogus.DataSets.PhoneNumbers.PhoneNumber(System.String)">
            <summary>
            Get a phone number. 
            </summary>
            <param name="format">Format of phone number in any format. Replaces # characters with numbers. IE: '###-###-####' or '(###) ###-####'</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.PhoneNumbers.PhoneNumberFormat(System.Int32)">
            <summary>
            Gets a phone number via format array index as defined in a locale's phone_number.formats[] array.
            </summary>
            <param name="phoneFormatsArrayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Bogus.DataSets.PhoneNumbers.PhoneFormat">
            <summary>
            Gets the format of a phone number.
            </summary>
        </member>
        <member name="T:Bogus.Person">
            <summary>
            Uses Faker to generate a person with contextually relevant fields.
            </summary>
        </member>
        <member name="T:Bogus.Randomizer">
            <summary>
            The randomizer. It randoms things.
            </summary>
        </member>
        <member name="F:Bogus.Randomizer.Seed">
            <summary>
            Set the random number generator manually with a seed to get reproducible results.
            </summary>
        </member>
        <member name="M:Bogus.Randomizer.Number(System.Int32)">
            <summary>
            Get an int from 0 to max.
            </summary>
            <param name="max">Upper bound, inclusive</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.Randomizer.Number(System.Int32,System.Int32)">
            <summary>
            Get an int from min to max.
            </summary>
            <param name="min">Lower bound, inclusive</param>
            <param name="max">Upper bound, inclusive</param>
            <returns></returns>
        </member>
        <member name="M:Bogus.Randomizer.Double">
            <summary>
            Get a random double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.Randomizer.Bool">
            <summary>
            Get a random boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bogus.Randomizer.ArrayElement``1(``0[])">
            <summary>
            Get a random array element.
            </summary>
        </member>
        <member name="M:Bogus.Randomizer.ArrayElement(Newtonsoft.Json.Linq.JProperty[])">
            <summary>
            Helper method to get a random JProperty.
            </summary>
        </member>
        <member name="M:Bogus.Randomizer.ArrayElement(System.Array)">
            <summary>
            Get a random array element.
            </summary>
        </member>
        <member name="M:Bogus.Randomizer.ArrayElement(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Helper method to get a random element inside a JArray
            </summary>
        </member>
        <member name="M:Bogus.Randomizer.Replace(System.String,System.Char)">
            <summary>
            Replaces symbols with numbers. IE: ### -> 283
            </summary>
            <param name="format"></param>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:Bogus.Randomizer.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles an IEnumerable source.
            </summary>
        </member>
        <member name="T:Bogus.Utils">
            <summary>
            Some utility functions
            </summary>
        </member>
        <member name="M:Bogus.Utils.Slugify(System.String)">
            <summary>
            Slugify's text so that it is URL compatible. IE: "Can make food" -> "Can-make-food".
            </summary>
        </member>
    </members>
</doc>
